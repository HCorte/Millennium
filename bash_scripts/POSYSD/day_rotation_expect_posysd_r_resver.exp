#!/usr/bin/expect
# should use /usr/bin/expect instead of bash run commands spawn, expect, send
# path to script C:/Users/105864/Documents/Millennium/bash_scripts (create a windows environment variable)
# install sshpass (https://stackoverflow.com/questions/37243087/how-to-install-sshpass-on-windows-through-cygwin) 
# finall step (sudo- run cygwin as administrator) make install

#####################################################################
#   cd "C:\Users\105864\Documents\Millennium\bash_scripts"          #
#   run script: expect day_rotation_bash.sh                         #
#                                                                   #
#####################################################################

#proc sshposysd_pass {} {                                                                                                                                                                                                                                                                                                                                               
#    set SSHUSER "console"
#    spawn sshpass -e ssh -e "~" -o "KexAlgorithms diffie-hellman-group1-sha1" -o "HostKeyAlgorithms ssh-dss" -o "Ciphers aes256-cbc" $SSHUSER@10.100.82.100                                                
#}

proc new_line {} {
    expect "POSYSD::SCML> " {send "\r"} \
        timeout { puts "\n\nTest Failure: \n\r"; exit}
}

set green "\033\[1;32;40m"
set red "\033\[1;31m"
set normal "\033\[0;0m"

set timeout 20

#sshPOSYSD_pass

###########################################################################
#                                                                         #
# documentation: https://www.tcl-lang.org/man/expect5.31/expect.1.html    #
#                                                                         #
#  user_spawn_id is a global variable containing a descriptor which       #
# refers to the user. For example, when                                   #
#  spawn_id is set to this value expect behaves like expect_user          #
#                                                                         #
#The major difference is that interactsets up a background matching event #
# loop. expect blocks foreground processing (and ignores user input)      #
# during it's matching event loop                                         #  
#                                                                         #
# Patterns from the most recent expect_before command are implicitly used #
# before any other patterns. Patterns from the most recent expect_after   #
# command are implicitly used after any other patterns.                   #
###########################################################################
spawn sshpass -e ssh -e "~" -o "KexAlgorithms diffie-hellman-group1-sha1" -o "HostKeyAlgorithms ssh-dss" -o "Ciphers aes256-cbc" console@10.100.82.100                                                  

expect "POSYSD::*> " {send "GOSCML\r"} \
    timeout { 
        puts "\n\n!!!Test Failure: Go to SCML Environment!!!\n\r";
        #exit 
        interact {
              \001 {
                    send_user "\n\nUser interaction completed.\n\n"
                     return 
                 }
            }
    }

new_line

expect "POSYSD::SCML> " {send "dir *.EXE;0 /TOTAL\r"} \
    timeout { 
        puts "\n\n!!!Test Failure: test dir total!!!\n\r"; 
        #exit 
        interact {
              \001 {
                    send_user "\n\nUser interaction completed.\n\n"
                     return 
                 }
            }
    }

new_line

############################################################
#
#   Run resver
#
############################################################

spawn sshpass -e ssh -e "~" -o "KexAlgorithms diffie-hellman-group1-sha1" -o "HostKeyAlgorithms ssh-dss" -o "Ciphers aes256-cbc" console@10.100.82.100                                                  

set SECOND_SPAWN $spawn_id

puts "\n\n!!!spawn_id: $SECOND_SPAWN!!!\n\r";

expect "POSYSD::*> " {send "GOSCML\r"} \
    timeout { 
        puts "\n\n!!!Test Failure: Go to SCML Environment!!!\n\r";
        #exit 
        interact {
              \001 {
                    send_user "\n\nUser interaction completed.\n\n"
                     return 
                 }
            }
    }

new_line

expect "POSYSD::SCML> " {send "dir *.EXE;0 /TOTAL\r"} \
    timeout { 
        puts "\n\n!!!Test Failure: test dir total!!!\n\r"; 
        #exit 
        interact {
              \001 {
                    send_user "\n\nUser interaction completed.\n\n"
                     return 
                 }
            }
    }

new_line

send "run resver\r"

#Lotto   4 draw  518

expect "Enter first*number*>" { 
    send "1\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Enter second*number*>" { 
    send "2\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Enter third*number*>" { 
    send "3\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Enter forth*number*>" { 
    send "4\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Enter fifth*number*>" { 
    send "5\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Enter Lucky*Number*>" { 
    send "1\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - key value\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Are the numbers entered correct*(Y/N)*>" { 
    send "y\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - numbers entered correct\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}    

expect "Do Your Have Special Totoloto Jackpot Fund*\[Y/N\]*>" { 
    send "n\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - numbers entered correct\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
}

expect "Lotto*4 results entry complete" { 
    send_user "\n\n${green}Winner Key Insertion Success\n\n"
    send_user "${normal}"
    sleep 2
    send "\r\r" 
} \
timeout { 
    puts "\n\nTest Failure: resver - numbers entered correct\n\r"; 
    interact {
        \001 {
                send_user "\n\nUser interaction completed.\n\n"
                return 
            }
        }
} 

interact {
    \001 {
        send_user "\n\nEnd Of Script.\n\n"
        return 
    }
}
 