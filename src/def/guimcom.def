C GUIMCOM.DEF
C
C V03 07-FEB-2011 RXK COMMON ADDED FOR GUI_MES_BUF.
C V02 14-NOV-2000 UXN GUI_ prefix added. Multithreaded GUIMGR changes - 
C                     GUIWORKER queues added.
C V01 15-JUN-1993 MP  INITIAL RELEASE FOR VAX
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1993 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C This common contains all the queues and parameters necessary
C for the communication between GUILINK, and GUIMGR.
C
	INCLUDE 'INCLIB:GUIMPRM.DEF'
C
	INTEGER*4	GUI_START
	COMMON /GUICOM/ GUI_START
C
	INTEGER*4 GUI_DBG_UNIT		!display debug info to console if non 0
	COMMON /GUICOM/ GUI_DBG_UNIT
C
C	GUI Data Declarations
C
	INTEGER*4 GUI_READ_OUT(0:GUI_MAX_READS-1,GUI_MAX_CONN)  !Outstanding read flag
	INTEGER*4 GUI_WRITE_OUT(0:GUI_MAX_WRITES-1,GUI_MAX_CONN)!Outstanding write flag
	INTEGER*4 GUI_READ_BUF(0:GUI_MAX_READS-1,GUI_MAX_CONN)
	INTEGER*4 GUI_WRITE_BUF(0:GUI_MAX_WRITES-1,GUI_MAX_CONN)
	INTEGER*4 GUI_RED_IGNORE(GUI_MAX_CONN)	!Ignore all read buffs if non 0
	INTEGER*4 GUI_READS(GUI_MAX_CONN)	!# of good reads
	INTEGER*4 GUI_READERRS(GUI_MAX_CONN)	!# of bad reads
	INTEGER*4 GUI_READLERR(GUI_MAX_CONN)	! last read error
	INTEGER*4 GUI_WRITES(GUI_MAX_CONN)	!# of good writes
	INTEGER*4 GUI_WRITEERRS(GUI_MAX_CONN)	!# of bad writes
	INTEGER*4 GUI_WRITELERR(GUI_MAX_CONN) ! last write error
	INTEGER*4 GUI_WRITENOCS(GUI_MAX_CONN)	!# of writes rejected because no conn
C
	INTEGER*4 GUI_CHAN_SETUP
C
	INTEGER*4 GUI_CONNECTS(GUI_MAX_CONN)	!# of good connections
	INTEGER*4 GUI_CONNERRS(GUI_MAX_CONN)	!# of bad connections
	INTEGER*4 GUI_CONNLERR(GUI_MAX_CONN)	! last connect error
	INTEGER*4 GUI_DISCONNS(GUI_MAX_CONN)	!# of good disconnects
	INTEGER*4 GUI_DISCERRS(GUI_MAX_CONN)	!# of bad disconnects
	INTEGER*4 GUI_DISCLERR(GUI_MAX_CONN)	! last disconnect error
C
 	RECORD /GUI_IOSSTRUCT/
     *		GUI_WRITE_IOSB(0:GUI_MAX_WRITES-1,GUI_MAX_CONN),
     *		GUI_READ_IOSB(0:GUI_MAX_READS-1,GUI_MAX_CONN),
     *		GUI_CONN_IOSB(GUI_MAX_CONN)
C
	COMMON /GUICOM/ GUI_WRITE_IOSB
	COMMON /GUICOM/ GUI_READ_IOSB
	COMMON /GUICOM/ GUI_CONN_IOSB
C
C	GUI_CONN_... tables
C
	INTEGER*4    GUI_CONN_STS(GUI_MAX_CONN)	   !Connect Status
	INTEGER*4    GUI_CONN_TYPE(GUI_MAX_CONN)	   !Connect Type
	INTEGER*4    GUI_CONN_CHAN(GUI_MAX_CONN)
	BYTE	     GUI_CONN_RHOST_ADD(16,GUI_MAX_CONN) ! Rem host IP address
	INTEGER*4    GUI_CONN_RHOST_RETLEN(GUI_MAX_CONN) ! RHOST_ADD length
C
	INTEGER*4    GUI_CONN_AUTH_INX(GUI_MAX_CONN)	   ! authorization index
	INTEGER*4    GUI_CONN_LAST_SPOOL_SENT(GUI_MAX_CONN)!last spool nr sent
C
	INTEGER*4    GUI_CONN_NEXT_SEQ_NR(GUI_MAX_CONN)  ! next ser. nr, used
							   ! only in 'recovery'
	CHARACTER*32 GUI_CONN_SYSTEM_NAME(GUI_MAX_CONN)  ! client system name
	INTEGER*4    GUI_CONN_LAST_MSN_IN(GUI_MAX_CONN)  ! last message nr IN
	INTEGER*4    GUI_CONN_LAST_MSN_OUT(GUI_MAX_CONN) ! last message nr OUT
	INTEGER*4    GUI_CONN_LAST_TIME(GUI_MAX_CONN)	   ! last time
	LOGICAL*4    GUI_CONN_SIGNED_ON(GUI_MAX_CONN)	   ! TRUE - signed on
	INTEGER*4    GUI_CONN_DATA_CLASS_BITS(GUI_MAX_CONN)! REQUESTED DATA
C
	COMMON /GUICOM/
     *		GUI_CONN_STS,
     *		GUI_CONN_TYPE,
     *		GUI_CONN_CHAN,
     *		GUI_CONN_RHOST_ADD,
     *		GUI_CONN_RHOST_RETLEN,
     *		GUI_CONN_AUTH_INX,
     *		GUI_CONN_LAST_SPOOL_SENT,
     *		GUI_CONN_NEXT_SEQ_NR,
     *		GUI_CONN_SYSTEM_NAME,
     *		GUI_CONN_LAST_MSN_IN,
     *		GUI_CONN_LAST_MSN_OUT,
     *		GUI_CONN_LAST_TIME,
     *		GUI_CONN_SIGNED_ON,
     *		GUI_CONN_DATA_CLASS_BITS
C
C	Queues between GUILINK and GUIMGR
C
	INTEGER*4  GUI_LINK_FRE_QUE(GUI_LINK_BUFS+QHEDSZ) !GUILINK bufs
	INTEGER*4  GUI_FROM_LINK_QUES(GUI_LINK_BUFS+QHEDSZ,    !RECEIVED
     *				    GUI_MAX_CONN)
	INTEGER*4  GUI_TO_LINK_QUES(GUI_LINK_BUFS+QHEDSZ,    !TO SEND
     *				    GUI_MAX_CONN)
	INTEGER*4  GUI_FROM_GAME_QUE(GUI_LINK_BUFS+QHEDSZ) !FROM GAME
C
	INTEGER*4    GUI_LINK_BUF(GUI_BUF_SIZ,GUI_LINK_BUFS)
	BYTE         GUI_LINK_BBUF(GUI_BUF_SIZ*4,GUI_LINK_BUFS)
	EQUIVALENCE (GUI_LINK_BBUF(1,1), GUI_LINK_BUF(1,1))
C
C Queues between GUIMGR and GUIWORKERs
C
	INTEGER*4  GUI_MAX_WORKER_MSG
	PARAMETER(GUI_MAX_WORKER_MSG=200)
	INTEGER*4  GUI_WORKER_FREE_QUEUE(GUI_MAX_WORKER_MSG+QHEDSZ)
	INTEGER*4  GUI_TO_WORKER_QUEUE(GUI_MAX_WORKER_MSG+QHEDSZ)
C
C Data controlled by GUIWORKER queues
C
	INTEGER*4  GUI_WORKER_BUF(GUI_BUF_SIZ, GUI_MAX_WORKER_MSG)
	BYTE	   GUI_WORKER_BBUF(GUI_BUF_SIZ*4, GUI_MAX_WORKER_MSG)
	EQUIVALENCE	(GUI_WORKER_BBUF,GUI_WORKER_BUF)
	INTEGER*4  GUI_WORKER_SOURCE_ID(GUI_BUF_SIZ)
	INTEGER*4  GUI_WORKER_MSG_LEN(GUI_BUF_SIZ)
C
	INTEGER*4  GUI_WORKER_DIE ! IF SET TO NON-ZERO, GUIWORKER WILL EXIT
	INTEGER*4  GUI_WORKER_RELOAD ! If set to non-zero, GUIMGR will reload 
                                     ! GUIWORKers
C
C	Spooled data classes obtained from the 
C	the GUIAUTH.FIL file.
C
	INTEGER*4 GUI_SPOOL_DATA_CLASS_BITS
	COMMON /GUICOM/ GUI_SPOOL_DATA_CLASS_BITS
C
C	Critical (print if not delivered) data classes obtained from the 
C	the GUIAUTH.FIL file.
C
	INTEGER*4 GUI_CRITICAL_DATA_CLASS_BITS
	COMMON /GUICOM/ GUI_CRITICAL_DATA_CLASS_BITS
C
C	GUI_AUTH_... tables
C
	CHARACTER*32 GUI_AUTH_NAME(GUI_MAX_AUTH_USERS)
	CHARACTER*32 GUI_AUTH_PASSWRD(GUI_MAX_AUTH_USERS)
	INTEGER*4    GUI_AUTH_DATA_CLASS_BITS(GUI_MAX_AUTH_USERS)
C
	INTEGER*4	GUI_NUM_BUF, GUI_NUM_REC
	INTEGER*4	GUI_SHORT_WAIT, GUI_LONG_WAIT
	INTEGER*4	GUI_LINK_FRE_BUFS_GOAL ! used to prevent GUILINK
						! from using all buffers for
						! read from the network.
C
C Following is not part of the COMMON, but just local to each routine space
C
	INTEGER*4	GUI_MES_BUF(33)
	CHARACTER*132	GUI_MES_CBUF
	EQUIVALENCE	(GUI_MES_BUF, GUI_MES_CBUF)
        COMMON // GUI_MES_BUF
C
	COMMON /GUICOM/
     *		GUI_READ_OUT,	 GUI_WRITE_OUT, GUI_READ_BUF,
     *		GUI_WRITE_BUF,	 GUI_CHAN_SETUP,  
     *		GUI_FROM_GAME_QUE,
     *		GUI_RED_IGNORE, GUI_READS,      GUI_READERRS,
     *		GUI_WRITES,     GUI_WRITEERRS,  GUI_WRITENOCS, 
     *		GUI_CONNECTS,   GUI_CONNERRS,   GUI_DISCONNS,
     *		GUI_DISCERRS,   GUI_DISCLERR,   GUI_CONNLERR,
     *		GUI_WRITELERR,  GUI_READLERR,
     *		GUI_TO_LINK_QUES,	GUI_FROM_LINK_QUES,
     *		GUI_LINK_FRE_QUE,	GUI_LINK_BUF,
     *          GUI_WORKER_FREE_QUEUE, GUI_TO_WORKER_QUEUE,
     *          GUI_WORKER_BUF, GUI_WORKER_DIE,
     *          GUI_WORKER_RELOAD,
     *          GUI_WORKER_SOURCE_ID, GUI_WORKER_MSG_LEN
C
	COMMON /GUICOM/
     *			GUI_AUTH_NAME,
     *			GUI_AUTH_PASSWRD,
     *			GUI_AUTH_DATA_CLASS_BITS
C
	COMMON /GUICOM/ GUI_NUM_BUF,	    GUI_NUM_REC,
     *			GUI_SHORT_WAIT,    GUI_LONG_WAIT,
     *			GUI_LINK_FRE_BUFS_GOAL
C
	LOGICAL		GUI_REOPEN_GTRK  ! INITIALIZED TO FALSE BY RESET
	COMMON /GUICOM/ GUI_REOPEN_GTRK ! SET TO TRUE BY VIS_PTHSNP
					  ! TO BE ABLE TO OUTPUT GTRKMSGS.FIL
C
	INTEGER*4   GUI_PORT		! INITIALIZED TO 0 BY RESET
	COMMON /GUICOM/ GUI_PORT      ! MODIFIED FOR TESTING BY VIS_PTHSNP
C
	INTEGER*4   GUI_WATCH_TIME	! WATCH_DOG TIME INTERVAL IN MSECS
	COMMON /GUICOM/ GUI_WATCH_TIME
C
	INTEGER*4   GUI_END
	COMMON /GUICOM/ GUI_END
C
        INTEGER*4        FRST_GUICOM
        EQUIVALENCE     (FRST_GUICOM, GUI_START)
        INTEGER*4        LAST_GUICOM
        EQUIVALENCE     (LAST_GUICOM, GUI_END)
C
	VOLATILE /GUICOM/ 
C
C END GUIMCOM.DEF
C
