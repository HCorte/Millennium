C GUIMPRM.DEF
C
C V02 08-NOV-2000 UXN GUI_ prefix added.
C V01 15-JUN-1993 MP  INITIAL RELEASE FOR VAX
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1993 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C This common contains parameters necessary for data definitions
C in GUIMCOM.DEF
C
C event number that defines event cluster
C
	INTEGER*4	GUI_EVNT_START		!EVENT CLUSTER IDENTIFIER
	PARAMETER      (GUI_EVNT_START=64)
C
C NAME OF COMMON EVENT FLAG CLUSTER.
C
	CHARACTER*7	GUI_EVNNAME
	PARAMETER      (GUI_EVNNAME='TCFLAGS')
C
C	GUI Parameter declarations
C
	INTEGER*4  GUI_DAT_SIZ, GUI_HED_SIZ, GUI_BUF_SIZ
	PARAMETER (GUI_DAT_SIZ=1048)	!Size of data -
					! In bytes should be >
					!((PROCOM size=392) +
					! (GUI_LH_SZ=14)   +
					! (GUI_PH_ADDR=6))
	PARAMETER (GUI_HED_SIZ=6)	!Size of header
	PARAMETER (GUI_BUF_SIZ=GUI_DAT_SIZ+GUI_HED_SIZ)	!Size of buffer
C
	INTEGER*4  GUI_MAX_MSG_LEN
	PARAMETER  (GUI_MAX_MSG_LEN=(GUI_DAT_SIZ*4)) !Max message length 
C
C The following describes the layout of the header of GUI_BUF
C	note: The header is not actually sent.
C
	INTEGER*4  GUI_BUF_NUM_OFF		!GUI_ BUFFER NUMBER
	PARAMETER (GUI_BUF_NUM_OFF=1)
C
	INTEGER*4  GUI_BUF_LEN_OFF		!LENGTH OF MESSAGE
	PARAMETER (GUI_BUF_LEN_OFF=2)		!VARIABLE LENGTH ALLOWED
C
	INTEGER*4  GUI_BUF_IO_INX_OFF
	PARAMETER (GUI_BUF_IO_INX_OFF=3)	! ??? IO STATUS TABLE INDEX
C
	INTEGER*4  GUI_BUF_IO_STS_OFF
	PARAMETER (GUI_BUF_IO_STS_OFF=4)		!BUFFER STATUS
C
	  INTEGER*4  GUI_BLNWRT, GUI_GODWRT, GUI_BADWRT
	  INTEGER*4  GUI_GODRED, GUI_BADRED, GUI_NOCWRT, GUI_DISRED
	  INTEGER*4  GUI_DISWRT
C
	  PARAMETER (GUI_GODWRT=-101)	!GOOD NO ERROR
	  PARAMETER (GUI_BADWRT=-102)	!ERROR ON WRITE
	  PARAMETER (GUI_DISWRT=-103)	!ERROR ON WRITE, DISCONNECT
	  PARAMETER (GUI_NOCWRT=-104)	!NO CONN, REJECT WRITE
	  PARAMETER (GUI_BLNWRT=-105)	!REJECTED BECAUSE OF BAD LENGTH
C
	  PARAMETER (GUI_GODRED=-201)	!GOOD NO ERROR
	  PARAMETER (GUI_BADRED=-202)	!ERROR ON READ
	  PARAMETER (GUI_DISRED=-203)	!ERROR ON READ, DISCONNECT
C
	INTEGER*4  GUI_BUF_ERR_OFF
	PARAMETER (GUI_BUF_ERR_OFF=5)		 !BUFFER ERROR CODE:
						 ! - QIO ERROR if buffer is
						 !   sent from GUILINK to
						 !   GUIMGR;
						 ! - when buffer is sent from
						 !   GUISEND to GUIHBUF the
						 !   value=1 indicates the fact
						 !   that GUISEND returned an
						 !   error condition to the 
						 !   caller, so there is no
						 !   need to print an error
						 !   message in GUIHBUF if
						 !   message cannot be
						 !   delivered.
C
	INTEGER*4  GUI_BUF_CONN_OFF
	PARAMETER (GUI_BUF_CONN_OFF=6)		 !Connection nr
C
	INTEGER*4  GUI_BUF_DAT_OFF              !START POSITION OF I/O
	PARAMETER (GUI_BUF_DAT_OFF=7)
C
	INTEGER*4  GUI_BUF_DAT_BOFF              !START POSITION OF I/O
	PARAMETER (GUI_BUF_DAT_BOFF=GUI_BUF_DAT_OFF*4-3)
C
	INTEGER*4  GUI_MAX_REC
	PARAMETER (GUI_MAX_REC=1)		!MAX # OF RECS IN BUF
C
	INTEGER*4  GUI_MAX_CONN
	PARAMETER (GUI_MAX_CONN=20)		!Maximum # Of Sign-ons
C
	INTEGER*4  GUI_MAX_AUTH_USERS
	PARAMETER (GUI_MAX_AUTH_USERS=10)		!Maximum # Of Users
C
C	Link Header Byte Offsets (counting from 0 !!!):
C
	INTEGER*4  GUI_LH_LEN_OFF,    GUI_LH_MSG_NR_OFF
	INTEGER*4  GUI_LH_TIME_OFF  , GUI_LH_SPARE_OFF
	INTEGER*4  GUI_LH_TYPE_OFF  , GUI_LH_SEQ_NR_OFF
	PARAMETER (GUI_LH_LEN_OFF=0)		! has to be 0 !!!!
	PARAMETER (GUI_LH_MSG_NR_OFF=2)
	PARAMETER (GUI_LH_TIME_OFF=4)
	PARAMETER (GUI_LH_SPARE_OFF=8)
	PARAMETER (GUI_LH_TYPE_OFF=9)
	PARAMETER (GUI_LH_SEQ_NR_OFF=10)
C
	INTEGER*4  GUI_LH_SZ
	PARAMETER (GUI_LH_SZ=14)		! Bytes
C
	INTEGER*4  GUI_MIN_MSG_LEN
	PARAMETER (GUI_MIN_MSG_LEN=GUI_LH_SZ)	!Min message length 
C
C 'LH_TYPE' values
C
	INTEGER*4  GUI_LH_TYPE_SIGN_ON_REQ,
     *		   GUI_LH_TYPE_SIGN_ON_RESP,
     *		   GUI_LH_TYPE_DATA_MSG,
     *		   GUI_LH_TYPE_SIGN_OFF_REQ,
     *		   GUI_LH_TYPE_SIGN_OFF_RESP,
     *		   GUI_LH_TYPE_DATA_REJECT,
     *		   GUI_LH_TYPE_LOOP_BACK_REQ,
     *		   GUI_LH_TYPE_LOOP_BACK_RESP
	PARAMETER (GUI_LH_TYPE_SIGN_ON_REQ=1)
	PARAMETER (GUI_LH_TYPE_SIGN_ON_RESP=2)
	PARAMETER (GUI_LH_TYPE_DATA_MSG=3)
	PARAMETER (GUI_LH_TYPE_SIGN_OFF_REQ=4)
	PARAMETER (GUI_LH_TYPE_SIGN_OFF_RESP=5)
	PARAMETER (GUI_LH_TYPE_DATA_REJECT=6)
	PARAMETER (GUI_LH_TYPE_LOOP_BACK_REQ=7)
	PARAMETER (GUI_LH_TYPE_LOOP_BACK_RESP=8)
C
C Size of the REJECT message header
C
	INTEGER*4  GUI_LH_DATA_REJECT_HED_SIZ
	PARAMETER (GUI_LH_DATA_REJECT_HED_SIZ=6)
C
C	Path Header Byte Offsets (counting from 0 !!!):
C
	INTEGER*4  GUI_PH_DATA_CLASS_OFF, GUI_PH_DEVICE_TYPE_OFF
	INTEGER*4  GUI_PH_SOURCE_ID_OFF,  GUI_PH_DEST_ID_OFF
	INTEGER*4  GUI_PH_USER_DATA_OFF				! V1.02
	INTEGER*4  GUI_PH_AFI_OFF,        GUI_PH_ADDR_LEN_OFF
	INTEGER*4  GUI_PH_ADDR_OFF
	PARAMETER (GUI_PH_DATA_CLASS_OFF=0)
	PARAMETER (GUI_PH_DEVICE_TYPE_OFF=1)
	PARAMETER (GUI_PH_SOURCE_ID_OFF=2)
	PARAMETER (GUI_PH_DEST_ID_OFF=3)
	PARAMETER (GUI_PH_USER_DATA_OFF=4)				! V1.02
	PARAMETER (GUI_PH_AFI_OFF=6)
	PARAMETER (GUI_PH_ADDR_LEN_OFF=7)
	PARAMETER (GUI_PH_ADDR_OFF=8)
C
	INTEGER*4 GUI_MAX_READS, GUI_MAX_WRITES
	PARAMETER (GUI_MAX_READS=3)	  !MAX # of outstanding reads
	PARAMETER (GUI_MAX_WRITES=5)	  !MAX # of outstanding writes
C
	INTEGER*4  GUI_FROM_LINK_BUFS	  ! Needed # Of Read Buffers
	PARAMETER (GUI_FROM_LINK_BUFS= 2*GUI_MAX_CONN*GUI_MAX_READS)
C
	INTEGER*4  GUI_TO_LINK_BUFS	  ! Needed # Of Write Buffers
	PARAMETER (GUI_TO_LINK_BUFS= 3*GUI_MAX_CONN*GUI_MAX_WRITES)
C
	INTEGER*4  GUI_LINK_BUFS
	PARAMETER (GUI_LINK_BUFS=(GUI_FROM_LINK_BUFS+GUI_TO_LINK_BUFS))
c
	INTEGER*4  GUI_ACTV, GUI_PASS
	PARAMETER (GUI_ACTV=1)
	PARAMETER (GUI_PASS=2)
C
	INTEGER*4  GUI_READY, GUI_INPROG
	PARAMETER (GUI_READY=0)
	PARAMETER (GUI_INPROG=1)
C
	INTEGER*4  GUI_CONN_STS_CONNECTED,
     *		   GUI_CONN_STS_CONINP,
     *		   GUI_CONN_STS_DISINP,
     *		   GUI_CONN_STS_DISCON
	PARAMETER (GUI_CONN_STS_CONNECTED=0)
	PARAMETER (GUI_CONN_STS_CONINP=1)
	PARAMETER (GUI_CONN_STS_DISINP=2)
	PARAMETER (GUI_CONN_STS_DISCON=3)
C
	INTEGER*4  GUI_OK_CONN, GUI_NO_CONN
	PARAMETER (GUI_OK_CONN=0)		!ALLOW CONNECTIONS
	PARAMETER (GUI_NO_CONN=1)		!DON'T ALLOW CONNECTIONS
C
	STRUCTURE /GUI_IOSSTRUCT/
          INTEGER*2 STAT                          !VMS STATUS
          INTEGER*2 XSIZE                         !TRANSFER SIZE
          INTEGER*4 PARM                          !PARAMETER/BUFFER ADDRESS
        END STRUCTURE
C
C parameters to be used for controlling the TCP_LINK via the 'GUIQUE' routine-
C they are really indexes into TCP_EVNS array defined in TCPCOM.
C
	INTEGER*4   GUI_PCONNECT
	PARAMETER  (GUI_PCONNECT   = 01) !TELL GUILINK TO DO A PASSIVE CONNECT
	INTEGER*4   GUI_WRITE
	PARAMETER  (GUI_WRITE      = 02) !TELL GUILINK TO write
	INTEGER*4   GUI_DISC_RED_IGN
	PARAMETER  (GUI_DISC_RED_IGN = 03) ! DISCONNECT those with RED_IGNORE=1
	INTEGER*4   GUI_DISCONNECT
	PARAMETER  (GUI_DISCONNECT = 04) ! DISCONNECT unconditionally
	INTEGER*4   GUI_STOP
	PARAMETER  (GUI_STOP       = 05) !STOP GUILINK
C
C	CONNECT/DISCONNECT WAIT PARAMETERS
C
	INTEGER*4	GUI_CONN_WAIT, GUI_DISC_WAIT
	PARAMETER	(GUI_CONN_WAIT=10000)		! MILLISECONDS
	PARAMETER	(GUI_DISC_WAIT=2000)		! MILLISECONDS
C
	INTEGER*4	GUI_WATCH_TIME_DEFAULT
	PARAMETER	(GUI_WATCH_TIME_DEFAULT=60000)	! 60 seconds
C
	INTEGER*4	GUI_MAX_SERIALS		! per message
	PARAMETER	(GUI_MAX_SERIALS=10)
C
	INTEGER*4	GUI_BYTES_PER_SERIAL_MAX
	PARAMETER	(GUI_BYTES_PER_SERIAL_MAX=(7+2*15)*4)
							! 148 - see DESLOG.DEF
C
	INTEGER*4	GUI_ADDR_FORMAT_MISSING
	INTEGER*4	GUI_ADDR_FORMAT_TER_NR
	INTEGER*4	GUI_ADDR_FORMAT_LINE_DROP
	INTEGER*4	GUI_ADDR_FORMAT_STA_PRT_DRP
	INTEGER*4	GUI_ADDR_FORMAT_PHYSICAL
	INTEGER*4	GUI_ADDR_FORMAT_X121
	INTEGER*4	GUI_ADDR_FORMAT_AGT_NR
C
	PARAMETER	(GUI_ADDR_FORMAT_MISSING=0)
	PARAMETER	(GUI_ADDR_FORMAT_TER_NR=1)
	PARAMETER	(GUI_ADDR_FORMAT_LINE_DROP=2)
	PARAMETER	(GUI_ADDR_FORMAT_STA_PRT_DRP=3)
	PARAMETER	(GUI_ADDR_FORMAT_PHYSICAL=4)
	PARAMETER	(GUI_ADDR_FORMAT_X121=5)
	PARAMETER	(GUI_ADDR_FORMAT_AGT_NR=6)
C
C RPC DATA TYPE PARAMETERS
C
        INTEGER*4       RPCBYTE,RPCCHAR,RPCINT,RPCMONEY,RPCNULL
        PARAMETER       (RPCCHAR='2F'X)
        PARAMETER       (RPCBYTE='30'X)
        PARAMETER       (RPCINT='38'X)
        PARAMETER       (RPCMONEY='3C'X)
        PARAMETER       (RPCNULL='00'X)
C
C GUI DATA TYPE PARAMETERS
C
        INTEGER*4       GUIBYTE,GUICHAR,GUIINT,GUIMONEY,GUINULL,GUIVARCHAR
        PARAMETER       (GUIVARCHAR='27'X)
        PARAMETER       (GUICHAR='2F'X)
        PARAMETER       (GUIBYTE='30'X)
        PARAMETER       (GUIINT='38'X)
        PARAMETER       (GUIMONEY='3C'X)
        PARAMETER       (GUINULL='00'X)
C
C END GUIMPRM.DEF
C
