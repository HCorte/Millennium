C LDBREC.DEF
C
C V05 30-JUN-2000 UXN LDBLAT added.
C V05 18-MAY-1999 UXN LDBCMB added.
C V04 28-NOV-1995 HXK Batch of changes for Double/Couple release
C V03 10-NOV-1995 HXK Further changes for Double, Couple
C V02 07-NOV-1995 HXK Changes for Double, Couple install
C V01 06-NOV-1995 PXB Initial revision.
C  
C LOGICAL SUPER DOUBLE GAME RECORD LAYOUT 
C
C     LDBSTS(NUMDBL)                         ; GAME STATUS
C     LDBWEK(NUMDBL)                         ; WEEK NUMBER
C     LDBDAT(NUMDBL)                         ; DRAW DATE
C     LDBDRW(NUMDBL)                         ; DRAW NUMBER
C     LDBBSD(NUMDBL)                         ; BEGINNING SALES DATE
C     LDBESD(NUMDBL)                         ; ENDING SALES DATE
C     LDBPUP(NUMDBL)                         ; LAST PRUGE UPDATE  (FILE ONLY)
C     LDBUPD(NUMDBL)                         ; LAST FILE UPDATE   (FILE ONLY)
C     LDBCTM(NUMDBL)                         ; ACTUAL TIME WHEN CLOSED
C     LDBTIM(NUMDBL)                         ; TIME WHEN GAME SHOULD CLOSE
C     LDBSER(NUMDBL)                         ; LAST SERIAL NUMBER
C     LDBSAL(NUMTOT,NUMDBL)                  ; TOTAL SALES (COUNT , AMOUNT)
C     LDBPAD(NUMDBL)                         ; PRIZES PAID + REFUNDS
C     LDBPRG(NUMDBL)                         ; PRIZES PURGED
C     LDBPRF(NUMDBL)                         ; PAID REFUNDS
C     LDBREF(NUMDBL)                         ; TOTAL REFUND AMOUNT
C     LDBERF(NUMDBL)                         ; EARLY REFUNDS PAID
C     LDBTER(NUMDBL)                         ; TOTAL EARLY REFUNDS (LIAB)
C     LDBWON(NUMDBL)                         ; PRIZES WON
C     LDBPOL(2,NUMDBL)                       ; ROLL POOL
C     LDBTPL(NUMDBL)                         ; TOTAL PRIZE POOL
C     LDBTBK(NUMDBL)                         ; TOTAL BREAKAGE
C     LDBBRK(2,NUMDBL)                       ; WINNING ROUNDING POT
C     LDBABW(NUMDBL)                         ; AMOUNT BET ON WINNING SCORE
C     LDBODS(MAXDBLTI,NUMDBL)                ; WINNING ODDS
C     LDBWIN(2,MAXDBLTI,NUMDBL)              ; WINNING RESULTS
C     LDBHLD(2,MAXDBLTI,NUMDBL)              ; WINNING RESULTS HOLD
C     LDBTAX(NUMDBL)                         ; WINNING TAXES
C     LDBOTX(NUMTOT,NUMDBL)                  ; OVER TAX LIMIT
C     LDBMID(NUMTOT,NUMDBL)                  ; >REDMIN <REDMAX
C     LDBUTX(NUMTOT,NUMDBL)                  ; UNDER TAX LIMIT
C     LDBHST(MAXDBLTI,NUMDBL)                ; HIGHEST WINNER PER WINING COMB
C     LDBORM(NUMTOT,NUMDBL)                  ; OVER REDMAX
C     LDBENM(DBLENM_LEN/4,NUMDBL)            ; EVENT NAME
C     LDBDES(DBLDES_LEN/4,NUMDBL)            ; GAME DESCRIPTION
C     LDBNMS(DBLNMS_LEN/4,MAXDBLRW,NUMDBL)   ; ROW NAMES
C     LDBSTA(MAXDBLRW,NUMDBL)                ; ROW STATUS 1 THROUGH MAXTRW
C     LDBSBR(MAXDBLRW,NUMDBL)                ; SALES BY ROW TABLE
C     LDBREV(NUMDBL)                         ; REV #
C     LDBPFN(5,NUMDBL)                       ; POOL FILE NAME
C     LDBRTM(MAXDBLRW,NUMDBL)                ; ROW CLOSE TIMES
C     LDBPRC(NUMDBL)                         ; BASE PRICE
C     LDBSPR(NUMDBL)                         ; POOL PERCENTAGE
C     LDBTVC(DBLTVC_LEN/4,NUMDBL)    	     ; TV-CHANEL NAME
C     LDBMDS(MAXMLTD_AVL,NUMDBL)	     ; MULTI DRAW SELECTED TABLE
C						(52 BYTE / 4 = 13)
C     LDBRWS(NUMDBL)			     ; ACTUAL # OF ROWS USED.
C     LDBWCP(MAXDBLTI,NUMDBL)	             ; # WINNING COUPONS PALYED.
C     LDBWBT(NUMTOT,MAXDBLTI,NUMDBL)	     ; CNT, AMT WINNERS PLAYED.
C     LDBWRO(NUMTOT,2,NUMDBL)                ; WINNING: COUNT,AMOUNT REFUNDS ONLY
C     LDBWRA(NUMTOT,2,NUMDBL)                ; WINNING: COUNT,AMOUNT REFUNDS ALTOGETHER
C     LDBWPO(NUMTOT,2,NUMDBL)                ; WINNING: COUNT,AMOUNT PRIZES ONLY
C     LDBWPA(NUMTOT,2,NUMDBL)                ; WINNING: COUNT,AMOUNT PRIZES ALTOGETHER
C     LDBWPR(NUMTOT,2,NUMDBL)                ; WINNING: COUNT,AMOUNT PRIZES AND REFUNDS
C					     ; (1=PRWON,2=PRPAD)
C     LDBODT(MAXDBLRW*MAXDBLRW,NUMDBL)       ; TABLE OF AMTS ON COMBNS FOR ODDS
C     LDBPCC(NUMDBL)		             ; Partially Closed Combination
C                                            ; IF combination 17/18 is not allowed
C                                            ; to play then DDBPCC is set to 1,
C                                            ; otherwise it is 0. 
C     LDBCMB(NUMDBL)                         ; NUMBEROF WINNING COMBINATIONS.
C     LDBLAT(NUMLAT,NUMDBL)          ; EVENT STARTED BEFORE GAME WAS CLOSED
C                                    ; TICKETS PLAYED LATER SHOULD BE REFUNDED.
C     LDBFRS(94,NUMDBL)			     ; FREE SPACE
C
C LOGICAL GAME FILE VARIABLE OFFSETS
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1990 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

C
C OFFSET PARAMETERS AND EQUIVALENCES
C
	INTEGER*4 LDBSTS_OFF, LDBWEK_OFF, LDBDAT_OFF, LDBDRW_OFF
	INTEGER*4 LDBBSD_OFF, LDBESD_OFF, LDBPUP_OFF, LDBUPD_OFF
	INTEGER*4 LDBCTM_OFF, LDBTIM_OFF, LDBSER_OFF, LDBSAL_OFF
	PARAMETER(LDBSTS_OFF = 1)		
	PARAMETER(LDBWEK_OFF = LDBSTS_OFF + NUMDBL)
	PARAMETER(LDBDAT_OFF = LDBWEK_OFF + NUMDBL)
	PARAMETER(LDBDRW_OFF = LDBDAT_OFF + NUMDBL)
	PARAMETER(LDBBSD_OFF = LDBDRW_OFF + NUMDBL)
	PARAMETER(LDBESD_OFF = LDBBSD_OFF + NUMDBL)
	PARAMETER(LDBPUP_OFF = LDBESD_OFF + NUMDBL)
	PARAMETER(LDBUPD_OFF = LDBPUP_OFF + NUMDBL)
	PARAMETER(LDBCTM_OFF = LDBUPD_OFF + NUMDBL)
	PARAMETER(LDBTIM_OFF = LDBCTM_OFF + NUMDBL)
	PARAMETER(LDBSER_OFF = LDBTIM_OFF + NUMDBL)
	PARAMETER(LDBSAL_OFF = LDBSER_OFF + NUMDBL)

	INTEGER*4 LDBPAD_OFF, LDBPRG_OFF, LDBPRF_OFF, LDBREF_OFF
	INTEGER*4 LDBERF_OFF, LDBTER_OFF, LDBWON_OFF, LDBPOL_OFF
	INTEGER*4 LDBTPL_OFF, LDBTBK_OFF, LDBBRK_OFF, LDBABW_OFF
	PARAMETER(LDBPAD_OFF = LDBSAL_OFF + NUMTOT * NUMDBL)
	PARAMETER(LDBPRG_OFF = LDBPAD_OFF + NUMDBL)
	PARAMETER(LDBPRF_OFF = LDBPRG_OFF + NUMDBL)
	PARAMETER(LDBREF_OFF = LDBPRF_OFF + NUMDBL)
	PARAMETER(LDBERF_OFF = LDBREF_OFF + NUMDBL)
	PARAMETER(LDBTER_OFF = LDBERF_OFF + NUMDBL)
	PARAMETER(LDBWON_OFF = LDBTER_OFF + NUMDBL)
	PARAMETER(LDBPOL_OFF = LDBWON_OFF + NUMDBL)
	PARAMETER(LDBTPL_OFF = LDBPOL_OFF + 2 * NUMDBL)
	PARAMETER(LDBTBK_OFF = LDBTPL_OFF + NUMDBL)
	PARAMETER(LDBBRK_OFF = LDBTBK_OFF + NUMDBL)
	PARAMETER(LDBABW_OFF = LDBBRK_OFF + 2 * NUMDBL)

	INTEGER*4 LDBODS_OFF, LDBWIN_OFF, LDBHLD_OFF, LDBTAX_OFF
	INTEGER*4 LDBOTX_OFF, LDBMID_OFF, LDBUTX_OFF, LDBHST_OFF
	INTEGER*4 LDBORM_OFF, LDBENM_OFF, LDBDES_OFF, LDBNMS_OFF
	PARAMETER(LDBODS_OFF = LDBABW_OFF + NUMDBL)
	PARAMETER(LDBWIN_OFF = LDBODS_OFF + MAXDBLTI * NUMDBL)
	PARAMETER(LDBHLD_OFF = LDBWIN_OFF + 2 * MAXDBLTI * NUMDBL)
	PARAMETER(LDBTAX_OFF = LDBHLD_OFF + 2 * MAXDBLTI * NUMDBL)
	PARAMETER(LDBOTX_OFF = LDBTAX_OFF + NUMDBL)
	PARAMETER(LDBMID_OFF = LDBOTX_OFF + NUMTOT * NUMDBL)
	PARAMETER(LDBUTX_OFF = LDBMID_OFF + NUMTOT * NUMDBL)
	PARAMETER(LDBHST_OFF = LDBUTX_OFF + NUMTOT * NUMDBL)
	PARAMETER(LDBORM_OFF = LDBHST_OFF + MAXDBLTI * NUMDBL)
	PARAMETER(LDBENM_OFF = LDBORM_OFF + NUMTOT*NUMDBL)
	PARAMETER(LDBDES_OFF = LDBENM_OFF + (DBLENM_LEN/4) * NUMDBL)
	PARAMETER(LDBNMS_OFF = LDBDES_OFF + (DBLDES_LEN/4) * NUMDBL)

	INTEGER*4 LDBSTA_OFF, LDBSBR_OFF, LDBREV_OFF, LDBPFN_OFF
	INTEGER*4 LDBRTM_OFF, LDBPRC_OFF, LDBSPR_OFF, LDBTVC_OFF
	INTEGER*4 LDBMDS_OFF
	PARAMETER(LDBSTA_OFF = LDBNMS_OFF + (DBLNMS_LEN/4)*MAXDBLRW*NUMDBL)
	PARAMETER(LDBSBR_OFF = LDBSTA_OFF + MAXDBLRW * NUMDBL)
	PARAMETER(LDBREV_OFF = LDBSBR_OFF + MAXDBLRW * NUMDBL)
	PARAMETER(LDBPFN_OFF = LDBREV_OFF + NUMDBL)
	PARAMETER(LDBRTM_OFF = LDBPFN_OFF + 5 * NUMDBL)
	PARAMETER(LDBPRC_OFF = LDBRTM_OFF + MAXDBLRW * NUMDBL)
	PARAMETER(LDBSPR_OFF = LDBPRC_OFF + NUMDBL)
	PARAMETER(LDBTVC_OFF = LDBSPR_OFF + NUMDBL)
	PARAMETER(LDBMDS_OFF = LDBTVC_OFF + (DBLTVC_LEN/4) * NUMDBL)		

        INTEGER*4 LDBWRO_OFF, LDBWRA_OFF, LDBWPO_OFF, LDBWPA_OFF
        INTEGER*4 LDBWPR_OFF, LDBRWS_OFF, LDBWCP_OFF, LDBODT_OFF
	INTEGER*4 LDBWBT_OFF
	PARAMETER(LDBRWS_OFF = LDBMDS_OFF + (MAXMLTD_AVL/4) * NUMDBL)
	PARAMETER(LDBWCP_OFF = LDBRWS_OFF + NUMDBL)
	PARAMETER(LDBWBT_OFF = LDBWCP_OFF + MAXDBLTI * NUMDBL)
        PARAMETER(LDBWRO_OFF = LDBWBT_OFF + NUMTOT * MAXDBLTI * NUMDBL)
        PARAMETER(LDBWRA_OFF = LDBWRO_OFF + NUMTOT * 2 * NUMDBL)
        PARAMETER(LDBWPO_OFF = LDBWRA_OFF + NUMTOT * 2 * NUMDBL)
        PARAMETER(LDBWPA_OFF = LDBWPO_OFF + NUMTOT * 2 * NUMDBL)
        PARAMETER(LDBWPR_OFF = LDBWPA_OFF + NUMTOT * 2 * NUMDBL)
        PARAMETER(LDBODT_OFF = LDBWPR_OFF + NUMTOT * 2 * NUMDBL)

	INTEGER*4 LDBPCC_OFF
	PARAMETER(LDBPCC_OFF = LDBODT_OFF + (MAXDBLRW * MAXDBLRW * NUMDBL))

	INTEGER*4 LDBCMB_OFF
	PARAMETER(LDBCMB_OFF = LDBPCC_OFF + NUMDBL)

	INTEGER*4 LDBLAT_OFF
	PARAMETER(LDBLAT_OFF = LDBCMB_OFF + NUMDBL)

	INTEGER*4 LDBFRS_OFF
	PARAMETER(LDBFRS_OFF = LDBLAT_OFF + NUMLAT*NUMDBL)

        INTEGER*4 LDBRECLEN
        PARAMETER(LDBRECLEN = LDBFRS_OFF + 94 * NUMDBL -1)
C                                                                               
C LOGICAL RECORD DEFINITION                                                     
C                                                                               
        INTEGER*4 LDBREC(LDBRECLEN)

C
C CALCULATE FREE SPACE BASED ON MACHINE DEPENDENT SECTOR SIZES.
C SHOULD ALLWAYS ADD UP TO A EVEN SECTOR SIZE BYTES (VAX 512).
C NOTE! IN CALCULATIONS, FRE_OFF-2 IS DONE TO TAKE CARE OF WHEN THE DATA SIZE
C       ENDS ON A EVEN SECTOR SIZE.
C
C        INTEGER*4 LDBSEC_VAX, LDBSEC_NUM
C        PARAMETER (LDBSEC_VAX = SECSIZE/4)
C	PARAMETER (LDBSEC_NUM = NINT(FLOAT((LDBFRE_OFF-2)/LDBSEC_VAX)+.5))
C
C        INTEGER*4 LDBLEN, LDBSEC
C        PARAMETER(LDBLEN = LDBSEC_VAX * LDBSEC_NUM)        ! even sector size
C        PARAMETER(LDBSEC = LDBLEN/64)
C
C        INTEGER*4 LDBREC(LDBLEN)

	INTEGER*4 LDBSTS(NUMDBL),LDBWEK(NUMDBL)
        INTEGER*4 LDBDAT(NUMDBL),LDBBSD(NUMDBL)
	INTEGER*4 LDBESD(NUMDBL),LDBCTM(NUMDBL)
	INTEGER*4 LDBTIM(NUMDBL),LDBSAL(NUMTOT,NUMDBL)
	INTEGER*4 LDBPAD(NUMDBL),LDBPRG(NUMDBL)
	INTEGER*4 LDBREF(NUMDBL),LDBWON(NUMDBL)
	INTEGER*4 LDBPOL(2,NUMDBL),LDBTPL(NUMDBL)
	INTEGER*4 LDBTBK(NUMDBL),LDBBRK(2,NUMDBL)
	INTEGER*4 LDBABW(NUMDBL),LDBODS(MAXDBLTI,NUMDBL)
	INTEGER*4 LDBWIN(2,MAXDBLTI,NUMDBL),LDBTAX(NUMDBL)
	INTEGER*4 LDBOTX(NUMTOT,NUMDBL),LDBHLD(2,MAXDBLTI,NUMDBL)
	INTEGER*4 LDBMID(NUMTOT,NUMDBL),LDBUTX(NUMTOT,NUMDBL)
	INTEGER*4 LDBHST(MAXDBLTI,NUMDBL),LDBORM(2,NUMDBL)
	INTEGER*4 LDBENM(DBLENM_LEN/4,NUMDBL)
	INTEGER*4 LDBDES(DBLDES_LEN/4,NUMDBL)
	INTEGER*4 LDBNMS(DBLNMS_LEN/4,MAXDBLRW,NUMDBL)
	INTEGER*4 LDBREV(NUMDBL),LDBPUP(NUMDBL)
	INTEGER*4 LDBUPD(NUMDBL),LDBSTA(MAXDBLRW,NUMDBL)
	INTEGER*4 LDBSBR(MAXDBLRW,NUMDBL),LDBPFN(5,NUMDBL)
	INTEGER*4 LDBERF(NUMDBL),LDBTER(NUMDBL)
	INTEGER*4 LDBDRW(NUMDBL)
	INTEGER*4 LDBRTM(MAXDBLRW,NUMDBL),LDBSER(NUMDBL)
	INTEGER*4 LDBPRF(NUMDBL),LDBSPR(NUMDBL),LDBPRC(NUMDBL)
	INTEGER*4 LDBTVC(DBLTVC_LEN/4,NUMDBL)

	BYTE	  LDBMDS(MAXMLTD_AVL,NUMDBL)

	INTEGER*4 LDBRWS(NUMDBL),LDBWCP(MAXDBLTI,NUMDBL)
        INTEGER*4 LDBWBT(NUMTOT,MAXDBLTI,NUMDBL)
        INTEGER*4 LDBWRO(NUMTOT,2,NUMDBL),LDBWRA(NUMTOT,2,NUMDBL)
	INTEGER*4 LDBWPO(NUMTOT,2,NUMDBL)
        INTEGER*4 LDBWPA(NUMTOT,2,NUMDBL),LDBWPR(NUMTOT,2,NUMDBL)       
        INTEGER*4 LDBODT(MAXDBLRW*MAXDBLRW,NUMDBL)
	INTEGER*4 LDBPCC(NUMDBL),LDBCMB(NUMDBL), LDBLAT(NUMLAT,NUMDBL)
	INTEGER*4 LDBFRS(94,NUMDBL)
C
	EQUIVALENCE(LDBSTS,LDBREC(LDBSTS_OFF))
	EQUIVALENCE(LDBWEK,LDBREC(LDBWEK_OFF))
	EQUIVALENCE(LDBDAT,LDBREC(LDBDAT_OFF))
	EQUIVALENCE(LDBDRW,LDBREC(LDBDRW_OFF))
	EQUIVALENCE(LDBBSD,LDBREC(LDBBSD_OFF))
	EQUIVALENCE(LDBESD,LDBREC(LDBESD_OFF))
	EQUIVALENCE(LDBPUP,LDBREC(LDBPUP_OFF))
	EQUIVALENCE(LDBUPD,LDBREC(LDBUPD_OFF))
	EQUIVALENCE(LDBCTM,LDBREC(LDBCTM_OFF))
	EQUIVALENCE(LDBTIM,LDBREC(LDBTIM_OFF))
	EQUIVALENCE(LDBSER,LDBREC(LDBSER_OFF))
	EQUIVALENCE(LDBSAL,LDBREC(LDBSAL_OFF))
	EQUIVALENCE(LDBPAD,LDBREC(LDBPAD_OFF))
	EQUIVALENCE(LDBPRG,LDBREC(LDBPRG_OFF))
	EQUIVALENCE(LDBPRF,LDBREC(LDBPRF_OFF))
	EQUIVALENCE(LDBREF,LDBREC(LDBREF_OFF))
	EQUIVALENCE(LDBERF,LDBREC(LDBERF_OFF))
	EQUIVALENCE(LDBTER,LDBREC(LDBTER_OFF))
	EQUIVALENCE(LDBWON,LDBREC(LDBWON_OFF))
	EQUIVALENCE(LDBPOL,LDBREC(LDBPOL_OFF))
	EQUIVALENCE(LDBTPL,LDBREC(LDBTPL_OFF))
	EQUIVALENCE(LDBTBK,LDBREC(LDBTBK_OFF))
	EQUIVALENCE(LDBBRK,LDBREC(LDBBRK_OFF))
	EQUIVALENCE(LDBABW,LDBREC(LDBABW_OFF))
	EQUIVALENCE(LDBODS,LDBREC(LDBODS_OFF))
	EQUIVALENCE(LDBWIN,LDBREC(LDBWIN_OFF))
	EQUIVALENCE(LDBHLD,LDBREC(LDBHLD_OFF))
	EQUIVALENCE(LDBTAX,LDBREC(LDBTAX_OFF))
	EQUIVALENCE(LDBOTX,LDBREC(LDBOTX_OFF))
	EQUIVALENCE(LDBMID,LDBREC(LDBMID_OFF))
	EQUIVALENCE(LDBUTX,LDBREC(LDBUTX_OFF))
	EQUIVALENCE(LDBHST,LDBREC(LDBHST_OFF))
	EQUIVALENCE(LDBORM,LDBREC(LDBORM_OFF))
	EQUIVALENCE(LDBENM,LDBREC(LDBENM_OFF))
	EQUIVALENCE(LDBDES,LDBREC(LDBDES_OFF))
	EQUIVALENCE(LDBNMS,LDBREC(LDBNMS_OFF))
	EQUIVALENCE(LDBSTA,LDBREC(LDBSTA_OFF))
	EQUIVALENCE(LDBSBR,LDBREC(LDBSBR_OFF))
	EQUIVALENCE(LDBREV,LDBREC(LDBREV_OFF))
	EQUIVALENCE(LDBPFN,LDBREC(LDBPFN_OFF))
	EQUIVALENCE(LDBRTM,LDBREC(LDBRTM_OFF))
	EQUIVALENCE(LDBPRC,LDBREC(LDBPRC_OFF))
	EQUIVALENCE(LDBSPR,LDBREC(LDBSPR_OFF))
	EQUIVALENCE(LDBTVC,LDBREC(LDBTVC_OFF))
	EQUIVALENCE(LDBMDS,LDBREC(LDBMDS_OFF))
	EQUIVALENCE(LDBRWS,LDBREC(LDBRWS_OFF))
	EQUIVALENCE(LDBWCP,LDBREC(LDBWCP_OFF))
	EQUIVALENCE(LDBWBT,LDBREC(LDBWBT_OFF))
        EQUIVALENCE(LDBWRO,LDBREC(LDBWRO_OFF))
        EQUIVALENCE(LDBWRA,LDBREC(LDBWRA_OFF))
        EQUIVALENCE(LDBWPO,LDBREC(LDBWPO_OFF))
        EQUIVALENCE(LDBWPA,LDBREC(LDBWPA_OFF))
        EQUIVALENCE(LDBWPR,LDBREC(LDBWPR_OFF))
        EQUIVALENCE(LDBODT,LDBREC(LDBODT_OFF))
        EQUIVALENCE(LDBPCC,LDBREC(LDBPCC_OFF))
        EQUIVALENCE(LDBCMB,LDBREC(LDBCMB_OFF))
        EQUIVALENCE(LDBLAT,LDBREC(LDBLAT_OFF))
        EQUIVALENCE(LDBFRS,LDBREC(LDBFRS_OFF))
