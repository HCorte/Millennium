C HASHMEM.DEF
C
C V12 15-MAR-2011 RXK  HASH_NUMAGT INCREASED 6144-->12288
C V12 13-JUN-2000 OXK  HASH_NEXT_RECORD, HASH_NEXT_BLOCK removed here
C V11 26-NOV-1999 OXK  Corrected multiply defined names.
C V10 25-NOV-1999 UXN  TSPCSB added for checkpointing.
C V09 06-JAN-1997 HXK  Increased agent database from 4096 to 6144
C V08 25-FEB-1994 HXK  PITKA LIABILITY LIMITATIONS CHANGE.
C V07 17-FEB-1994 JXP  Include arrays for Pitka liability suppression
C V06 16-FEB-1994 JXP  Odds limit chhanges
C V05 04-FEB-1994 JXP  New fields for pitka odds limit
C V04 30-JUN-1993 GXA  Increased number of Agents to 4096 for Finland.
C V03 21-JAN-1993 DAB  Initial Release
C                      Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                      DEC Baseline
C V02 29-JUN-1992 GCAN INITIAL RELESE FOR THE NETHERLANDS
C V01 01-AUG-1990 XXX  RELEASED FOR VAX
C
C COPYRITF.DEF+++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C COPYRIGHT 1991 GTECH CORPORATION.  ALL RIGHTS RESERVED.
C
C CONFIDENTIAL PROPRIETARY INFORMATION
C This item is the property of GTECH Corporation, W. Greenwich, Rhode
C Island, and contains confidential and trade secret information.  It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH.  Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published or disclosed, in whold or in part, directly
C or indirectly, except as expressly authorized by an officer of
C GTECH pursuant to written agreement.
C COPYRITF.DEF-------------------------------------------------------
C
	INTEGER*4  HASH_NUMAGT
	PARAMETER (HASH_NUMAGT=12288)      !NUMBER OF AGENTS
	INTEGER*4  HASH_AGT_RECORDS
	PARAMETER (HASH_AGT_RECORDS=100)   !NUMBER OF RECORDS PER AGENT
	INTEGER*4  HASH_RECORDS, HASH_NUM_BLOCKS
	PARAMETER  (HASH_RECORDS=100)      !# OF RECORDS IN BLOCK
	PARAMETER  (HASH_NUM_BLOCKS=2500)  !NUM OF BLOCKS
	INTEGER*4  HASH_MAX_SEARCH
	PARAMETER  (HASH_MAX_SEARCH=3)     !LOOK IN UP TO 3 BLOCKS
	INTEGER*4  HASH_RECORD_SIZE
	PARAMETER  (HASH_RECORD_SIZE=1)    !SIZE OF RECORD STORED, 1ST
C                                ;VALUE HAS THE RANGE (0..'7FFFFFF'X)
	INTEGER*4  HASH_TAB_DIM1           !AREA TO STORE KEY AND RECORD
	PARAMETER  (HASH_TAB_DIM1 = HASH_RECORD_SIZE+1)
C
C MASKS FOR AGENT HASH TABLE
C
	INTEGER*4  HASH_TER_MASK
	PARAMETER (HASH_TER_MASK='0000FFF0'X) !TERMINAL NUMBER MASK
	INTEGER*4  HASH_ROW_MASK
	PARAMETER (HASH_ROW_MASK='0000000F'X) !ROW COUNT MASK
	INTEGER*4  HASH_AMT_MASK
	PARAMETER (HASH_AMT_MASK='FFFF0000'X) !AMOUNT MASK
C
C SHIFTING BITS PARAMETERS
C
	INTEGER*4  HASH_MOV_AMT
	PARAMETER (HASH_MOV_AMT=65536) ! SHIFTS THE AMOUNT 16 BITS
	INTEGER*4  HASH_MOV_TER
	PARAMETER (HASH_MOV_TER=16)    ! SHIFTS THE TERM# 4 BITS
	INTEGER*4  HASH_MOV_ROW
	PARAMETER (HASH_MOV_ROW=1)     ! SHIFTS THE ROW COUNT 0 BITS
C
C CALLS TO HASHMEM RETURN STATUSES
C
	INTEGER*4  HASH_RETURN_OK, HASH_RETURN_TOO_MANY,
     *	           HASH_RETURN_NOT_FOUND,HASH_RETURN_INVALID_KEY,
     *	           HASH_RETURN_NOT_SAME
C
	PARAMETER  (HASH_RETURN_OK = 0)           !OK
	PARAMETER  (HASH_RETURN_NOT_FOUND = 1)    !RECORD NOT FOUND
	PARAMETER  (HASH_RETURN_TOO_MANY = -1)    !TOO LONG SEARCH
	PARAMETER  (HASH_RETURN_INVALID_KEY = -2) !BAD KEY REQUESTED
	PARAMETER  (HASH_RETURN_NOT_SAME = -3)    !NOT SAME RECORD
C                                               ;AS IN HASHGET
C                                               ;CORRECT CALL
C
C     HASH CALL PARAMETERS
C
	INTEGER*4  SAME_RECORD, NOT_SAME_RECORD
C
	PARAMETER  (SAME_RECORD=1)
	PARAMETER  (NOT_SAME_RECORD=0)
C
C DIRECT ACCESS TABLE TO STORE COMBINATIONS OF 3
C THIS IS HERE TO KEEP BOTH TOTOSELECT LIABILITY POOL TABLES
C IN THE SAME PLACE
C
	INTEGER*4  HASH_NUM_COMB3          !# OF COMBINATIONS OF 3
	PARAMETER (HASH_NUM_COMB3=266760)
	INTEGER*4  HASH_DIR(HASH_NUM_COMB3)!DIRECT ACCESS TABLE
	INTEGER*4  HASH_DIR_SUP(2,HASH_NUM_COMB3)
C
C STORAGE ACCESS PARAMETERS
C
	INTEGER*4   HASHLEN               !LENGTH IN FULL WORDS
	PARAMETER  (HASHLEN=HASH_TAB_DIM1*HASH_RECORDS*
     *	                    HASH_NUM_BLOCKS)
	INTEGER*4   HASHLEN_AGT
      PARAMETER (HASHLEN_AGT=HASH_TAB_DIM1*HASH_AGT_RECORDS*HASH_NUMAGT)
C
C HASH TABLE
C
	INTEGER*4  HASH_TAB(HASH_TAB_DIM1,HASH_RECORDS,HASH_NUM_BLOCKS)
	INTEGER*4  HASH_TAB_SUP(2,HASH_RECORDS,HASH_NUM_BLOCKS)
	INTEGER*4  HASH_AGT(HASH_TAB_DIM1,HASH_AGT_RECORDS,HASH_NUMAGT)
C
C HASH TABLE
C
	INTEGER*4	HASH_ROW_SUP(40,3)
	INTEGER*4	HASH_COMB_SUP(40,40)

	INTEGER*4  HASH_CLOSE,HASH_WARN,HASH_OK
C
	PARAMETER  (HASH_OK = 0)		!OK
	PARAMETER  (HASH_CLOSE = -1)		!COMBINATION CLOSED
	PARAMETER  (HASH_WARN = -2)		!COMBINATION WARNING
C
	INTEGER*4  HASH_DIR_OFF, HASH_TAB_OFF, HASH_AGT_OFF
	INTEGER*4  HASH_DIR_SUP_OFF, HASH_TAB_SUP_OFF, HASH_ROW_SUP_OFF
	INTEGER*4  HASH_COMB_SUP_OFF, TSPFRE_OFF

	PARAMETER(HASH_DIR_OFF = 1)
	PARAMETER(HASH_TAB_OFF = HASH_DIR_OFF + HASH_NUM_COMB3)
	PARAMETER(HASH_AGT_OFF = HASH_TAB_OFF + 
     *                           HASH_TAB_DIM1*HASH_RECORDS*HASH_NUM_BLOCKS)
        PARAMETER(HASH_DIR_SUP_OFF = HASH_AGT_OFF + 
     *                           HASH_TAB_DIM1*HASH_AGT_RECORDS*HASH_NUMAGT)
        PARAMETER(HASH_TAB_SUP_OFF = HASH_DIR_SUP_OFF + 2*HASH_NUM_COMB3)
	PARAMETER(HASH_ROW_SUP_OFF = HASH_TAB_SUP_OFF +
     *                           2*HASH_RECORDS*HASH_NUM_BLOCKS)
        PARAMETER(HASH_COMB_SUP_OFF = HASH_ROW_SUP_OFF + 40*3)
	PARAMETER(TSPFRE_OFF = HASH_COMB_SUP_OFF + 40*40) 

	INTEGER*4 TSPCOMSEC_NUM, TSPCOMSEC_SIZ
	PARAMETER(TSPCOMSEC_SIZ = 2048)
	PARAMETER(TSPCOMSEC_NUM = NINT(FLOAT((TSPFRE_OFF-2)/TSPCOMSEC_SIZ)+.5))
	INTEGER*4 TSPCOM_LEN 
	PARAMETER(TSPCOM_LEN = TSPCOMSEC_SIZ * TSPCOMSEC_NUM) 
	
	INTEGER*4 TSPFRE(TSPCOM_LEN - TSPFRE_OFF + 1)

	COMMON  /TSPCOM/ HASH_DIR, HASH_TAB, HASH_AGT,
     *			 HASH_DIR_SUP, HASH_TAB_SUP, HASH_ROW_SUP,
     *			 HASH_COMB_SUP, TSPFRE
C
C EQUIVLENCE FOR CHECKPOINT
C
	INTEGER*4 TSPCSB, TSPBLK
	PARAMETER(TSPCSB = TSPCOMSEC_NUM)
	DIMENSION TSPBLK(2048,TSPCSB)
	EQUIVALENCE(TSPBLK(1,1),HASH_DIR(1))
C
        INTEGER*4        FRST_TSPCOM(2)
        EQUIVALENCE     (FRST_TSPCOM, TSPBLK(1,1))
        INTEGER*4        LAST_TSPCOM
        EQUIVALENCE     (LAST_TSPCOM, TSPBLK(2048,TSPCSB))
C
	VOLATILE /TSPCOM/
