C
C     FILE   : GSONLTRN.FOR
C     AUTHOR : J.H.R
C     VERSION: 01            DATE: 09 / 02 / 2001
C
C V10 10-MAY-2017 HXK Modified S14 change from 01M to 1X2
C V09 30-MAR-2015 MTK Modified Super 14 game
C V08 20-APR-2012 FRP Fix for Base Game in Joker standalone wagers
C V07 31-JAN-2011 FRP Modify title formats according to DSP_TOTSAL_INFO
C V06 03-DEC-2010 FRP Lotto2 Changes
C V05 15-MAR-2010 RXK CHANGES FOR EPASSIVE 
C V04 18-MAR-2009 LRS STANDALONE JOKER FOR EUM ADDED
C V03 26-JAN-2007 CMB RETURN PASSIVE TICKET AMOUNT
C V02 31-OCT-2003 FRP Modify for Batch2 Totobola Changes.
C V01 JHR INITIAL RELEASE FOR PORTUGAL PROJECT
C
C GSALES ON LINE TRANSACTION, THIS PROGRAM RUNS GSALES LOADER FOR ON LINE
C TRANSACTIONS ( ON LINE AND PASSIVE )
C
C     **************************************************************************
C
C        THIS ITEM IS THE PROPERTY OF GTECH CORPORATION, POVIDENCE, RHODE
C     ISLAND, AND CONTAINS CONFIDENTIAL AND TRADE SECRET INFORMATION. IT MAY
C     NOT BE TRANSFERRED FROM THE CUSTODY OR CONTROL OF GTECH EXCEPT AS AUTO -
C     RIZED IN WRITING BY AN OFFICER OF GTECH. NEITHER THIS ITEM NOR THE
C     INFORMATION IT CONTAINS MAY BE USED, TRANSFERRED, REPRODUCED, PUBLISHED
C     OR DISCLOSED, IN WHOLE OR IN PART, AND DIRECTLY OR INDIRECTLY, EXCEPT AS
C     EXPRESSLY AUTHORIZED BY AN OFFICER OR GTECH, PURSUANT TO WRITTEN AGREEMENT
C
C     Copyright 2000 GTECH Corporation. All Rigth Reserved
C
C     **************************************************************************
C
C
C THIS PROGRAM RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      PROGRAM GSONLTRN
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:PRMLOG.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:RECDAF.DEF'
C
C CONSTANT PARAMETERS TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      INTEGER * 4 VERSION             ! TRANSACTION FILE LOADER VERSION
C
C INITIATE CONSTANT PARAMETERS TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      PARAMETER(VERSION = 4)          ! TRANSACTION FILE LOADER VERSION
C
C VARIABLES DEFINITION TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      INTEGER * 4 DAFIDFIL            ! DAF IDENTIFICATION FILE
      INTEGER * 4 DAFFDB(7)           ! DAF FILE DESCRIPTOR BLOCK
      INTEGER * 4 MTMFIDFIL           ! MTMF  IDENTIFICATION FILE
      INTEGER * 4 MTMSERNUM           ! MTMF TRANSACTION SERIAL NUMBER
      INTEGER * 4 LOGREC(LREC * 3)    ! LOGGER REGISTER
      INTEGER * 4 GNUM                ! GAME NUMBER
      INTEGER * 4 GTYP                ! GAME TYPE
      INTEGER * 4 GIND                ! GAME INDEX
      INTEGER * 4 CNTA                ! COUNTER A
      INTEGER * 4 CNTB                ! COUNTER B
      INTEGER * 4 TOTSTIT / 'TOTL' /  ! TOTAL SALES TITLE 
C
      CHARACTER * 23 FILENAME         ! FILE NAME
C
      LOGICAL EOF                     ! END OF FILE
C
      INTEGER * 4 LUN_STRM            ! LOGICAL UNIT FOR MEMORY STREAM RECORDS
      COMMON /STRM/ LUN_STRM
C
C READ TMF TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      CALL GENERATE_STREAM_RECORDS
C
C INTIATE VARIABLES TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      MTMSERNUM = 1
      FILRECCNT = 0
      DO CNTA = 1, TOTSPOS
        DO CNTB = 1, MAXTSAL
          TOTSAL(CNTA, CNTB) = 0.0D0
        ENDDO
      ENDDO
C
C DISPLAY USER INFORMATION ( RUNNING GSALES TRANSACTION LOADER )
C
      CALL COPYRITE
      TYPE *, IAM()
      TYPE *, IAM(), 'Running Gsales On Line Transactions Loader'
      TYPE *, IAM()
C
C GET FREE IDENTIFICATION FILE NUMBER FOR TRANSACTION FILE ( MTMF01.FIL )
C
      MTMFIDFIL = GET_FREE_IDFIL(1)
C
C OPEN TRANSACTION MASTER FILE NAME ( MTMF01.FIL )
C
      CALL OPEN_SYS_FILE(MTMFIDFIL, MTMFIL, PTMF)
C
C GET FREE IDENTIFICATION FILE NUMBER FOR DAILY ACTIVITY FILE ( DAF.FIL )
C
      DAFIDFIL = GET_FREE_IDFIL(1)
C
C OPEN DAILY ACTIVITY FILE NAME ( DAF.FIL )
C
      CALL OPEN_SYS_FILE(DAFIDFIL, DAFFIL, DAF)
      CALL IOINIT(DAFFDB, DAFIDFIL, DAFSEC * 256)
C
C GET GSALES TRANSACTION FILE NAME YYYYMMDD_ONLTRAN.FIL
C
      WRITE(FILENAME, 100) GET_YYYYMMDD_CDC(DAYCDC)
C
C IF TRANSACTION FILE EXIST, DELETE IT 
C
      CALL DELETE_FILE_NAME(FILENAME)
C
C GET FREE IDENTIFICATION FILE NUMBER FOR REPORT FILE ( YYYYMMDD_ONLTRAN.FIL )
C
      IDFIL = GET_FREE_IDFIL(0)
C
C OPEN YYYYMMDD_ONLTRAN.FIL ( ASCII FILE, ALTHOUGH IT'S EXTENSION IS '.FIL' )
C
      CALL OPEN_FILE_NAME(IDFIL, FILENAME)
C
C WRITE HEADER INT TRANSACTION FILE LOADER
C
      CALL GSHEADER(VERSION)
C
C READ TRANSACTION FROM MASTER FILE
C
2000  CONTINUE
      EOF = .FALSE.
      CALL READTMF(LOGREC, MTMSERNUM, EOF)
      IF(EOF) GOTO 1000
C
C CHECK IF TRANSACTION SHOULD BE PRINTED, IF NOT, GO TO READ NEXT TRANSACTION
C
      CALL LOGTRA(TRABUF, LOGREC)
      IF(TRABUF(TTER) .LE. 0) GOTO 2000
      IF(TRABUF(TTIM) .LT. 0) GOTO 2000
      IF(TRABUF(TSER) .LT. 1) GOTO 2000
      IF(TRABUF(TERR) .NE. NOER) GOTO 2000
C
C TRANSACTION SHOULD BE PRINTED ( WAGERS, CANCEL, VALIDATIONS, RETURN )
C
      IF (TRABUF(TTYP) .NE. TWAG .AND.
     *    TRABUF(TTYP) .NE .TCAN .AND.
     *    TRABUF(TTYP) .NE. TVAL .AND.
     *    TRABUF(TTYP) .NE. TRET)
     *THEN
        GOTO 2000
      ENDIF
C
C IF EPASSIVE WAGER THAN DROP OTHER THAN SALES 
C   
      IF (TRABUF(TGAMTYP).EQ.TPAS.AND.TRABUF(TTYP).EQ.TWAG) THEN
         IF(TRABUF(TWEPOP).NE.EPASSAL) GOTO 2000 
      ENDIF
C
C CHECK TRANSACTION STATUS, IF IT'S NOT GOOD DON'T PRINT TO GSALES FILE
C
      IF(TRABUF(TSTAT) .NE. GOOD .AND.
     *   TRABUF(TSTAT) .NE. CASH .AND.
     *   TRABUF(TSTAT) .NE. XCHD .AND.
     *   TRABUF(TSTAT) .NE. CLAM )
     *THEN
        GOTO 2000
      ENDIF
C
C CHECK PASSIVE STATUS ( VWINNER FOR VALIDATIONS AND RETURND FOR RETURNED )
C
      IF(TRABUF(TGAMTYP) .EQ. TPAS. AND.
     *  (TRABUF(TTYP).EQ.TRET .OR. TRABUF(TTYP).EQ.TVAL)) THEN
        DO CNTA = 1, TRABUF(TPTCK)
          IF(CHECK_PASSIVE_STATUS(TRABUF, CNTA)) GOTO 4000
        ENDDO
        GOTO 2000
      ENDIF
C
C WE HAVE AT LEAST ONE PASSIVE TICKET WIT VALIDATION STATUS GOOD
C
4000  CONTINUE
C
C SET TRANSACTION TYPE
C
      TRNTYP = TRABUF(TTYP)
C
C WRITE ON LINE TRANSACTION IN GSALES FILE
C
      CALL PRINT_GSALES_TRANSACTION(TRABUF,DAFFDB)
C
C GO TO READ NEXT TRANSACTION TO MTMF01.FIL FILE
C
      GOTO 2000
C
C END FOR READ TRANSACTION MASTER FILE ( MTMF01.FIL )
C
1000  CONTINUE
C
C WRITE FOOTER AND CLOSE ALL FILES
C
      CALL GSFOOTER
      CALL USRCLOS1(IDFIL)
      CALL CLOSEFIL(DAFFDB)
      CALL USRCLOS1(MTMFIDFIL)
      IF(LUN_STRM .NE. -1) CALL SORT_CLOSE(LUN_STRM)
C
C DISPLAY TOTALS BY GAME TO THE CONSOLE ( DISPLAY HEADER TOTALS )
C
      WRITE(6, 200)
      WRITE(6, 300)
      WRITE(6, 400)
      WRITE(6, 500)
C  
C LOOP TO DISPLAY TOTAL SALES AND WRITE INFORMATION TO CONSOLE
C
      DO 3000 GNUM = 1, MAXGAM
C
C GET GAME TYPE AND GAME INDEX, IF GAME IS NOT ACTIVE GO TO CHECK NEXT GAME
C
        GTYP = GNTTAB(GAMTYP, GNUM)
        GIND = GNTTAB(GAMIDX, GNUM)
        IF(GTYP .LT. 1 .OR. GTYP .GT. MAXTYP) GOTO 3000
        IF(GIND .LT. 1 .OR. GIND .GT. MAXIND) GOTO 3000
C
C DISPLAY GAME TOTAL SALES ( PARTIAL BY GAME )
C
        CALL DSP_TOTSAL_INFO(GSNAMES(GNUM), GNUM)
C
C CALCULATE TOTAL GAME SALES
C
         DO CNTA = 1, MAXTSAL
           TOTSAL(TOTSPOS, CNTA) = TOTSAL(TOTSPOS, CNTA) + TOTSAL(GNUM, CNTA)
         ENDDO
C
C END OF LOOP TO DISPLAY TOTAL SALES AND WRITE INFORMATION IN CONSOLE
C
3000  CONTINUE
C
C DISPLAY GAME TOTAL SALES
C
      WRITE(6, 500)
      CALL DSP_TOTSAL_INFO(TOTSTIT, TOTSPOS)
C
C DISPLAY MESSAGE TO USER
C
      WRITE(6, 200)
      TYPE *, IAM()
      TYPE *, IAM(), 'Generated Transaction GSales File: ', FILENAME
      TYPE *, IAM()
C
C CREATE GSALES END FILE ( TO GSALES MEANS END OF PROCEDURE )
C
      WRITE(FILENAME, 600) GET_YYYYMMDD_CDC(DAYCDC)
      CALL CREATE_GSALES_END_FILE(FILENAME)
C
C GSALES TRANSACTION LOADER ENDS OK
C
      CALL GSTOP(GEXIT_SUCCESS)
C
C FORMATS DEFINITION TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS 
C
100   FORMAT('valx:', A8, '_otran.fil')
200   FORMAT(X)
300   FORMAT(01X, 'GAME',
     *       08X, 'WAGERS',
     *       13X, 'CANCELS',
     *       13X, 'RETURNS',
     *       14X, 'VALIDS')
400   FORMAT(X, 'NAME', 4(5X, 'CNT', 6X, 'AMOUNT'))
500   FORMAT(X, 84('='))
600   FORMAT('valx:', A8, '_otran.fin')
C
C THIS IS THE END TO RUN GSALES LOADER FOR ON LINE TRANSACTIONS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_PASSIVE_FRACTIONS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 19 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      INTEGER * 4 FUNCTION GET_PASSIVE_FRACTIONS(TRABUF, TCKS)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:PASCOM.DEF'
C
C PARAMETERS DEFINITION TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
      INTEGER * 4 TCKS             ! NUMBER OF TICKETS COUNTER
C
C VARIABLES DEFINITION TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
       INTEGER * 4 GIND             ! GAME INDEX
       INTEGER * 4 TOTFRCT          ! TOTAL NUMBER OF FRACTIONS
       INTEGER * 4 MYEMIS           ! EMISION NUMBER TO SEARCH
       INTEGER * 4 EMISIND          ! EMISION INDEX
C
        LOGICAL FOUND                ! FOUND EMISION NUMBER
C
C INITIATE VARIABLES TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
       TOTFRCT = 0
       GIND = TRABUF(TGAMIND)
       MYEMIS  = TRABUF(TPEMIS1 + OFFTRA * (TCKS - 1))
       EMISIND = CURDRW
       FOUND = .FALSE.
C
C IF TRANSACTION TYPE IS VALIDATION NUMBER OF FACTION IS ONE
C
       IF(TRNTYP .EQ. TVAL) THEN
         TOTFRCT = 1
         GOTO 1000
       ENDIF
C
C SEARCH MY EMISION NUMBER
C
      DOWHILE(EMISIND .LE. PAGEMI .AND. FOUND .EQ. .FALSE.)
        IF(PASEMIS(EMISIND, GIND) .EQ. MYEMIS) THEN
          FOUND = .TRUE.
        ELSE
          EMISIND = EMISIND + 1
        ENDIF
      ENDDO
      
C
C IF WE DON'T HAVE EMISION NUMBER GO END
C
      IF(FOUND .EQ. .FALSE.) GOTO 1000

C
C SET NUMBER OF FRACTIONS ( ALL TICKETS )
C
      IF(TRABUF(TPRETYP) .EQ. ALLTCK) THEN
         TOTFRCT = PASNOFFRA(EMISIND, GIND)
         IF(GIND .EQ. PSBPOP) TOTFRCT = TOTFRCT * 2
         GOTO 1000        
      ENDIF
C
C SET NUMBER OF FRACTIONS ( BY FRACTION - EACH ONE )
C
      IF(TRABUF(TPRETYP) .EQ. BYFRAC) THEN
        TOTFRCT = 1
        GOTO 1000
      ENDIF
C
C SET NUMBER OF FRACTIONS ( HALF TICKET )
C
      IF(TRABUF(TPRETYP) .EQ. HALFTCK) THEN
        TOTFRCT = PASNOFFRA(EMISIND, GIND)
        IF(GIND .EQ. PSBCLA) TOTFRCT = TOTFRCT / 2
        GOTO 1000
      ENDIF
C
C SET NUMBER OF FRACTIONS ( QUARTER TICKET ) 
C
      IF(TRABUF(TPRETYP) .EQ. QUARTCK) THEN
        TOTFRCT = PASNOFFRA(EMISIND, GIND) / 4
	GOTO 1000
      ENDIF
C
C WRITE NUMBER OF FRACTIONS RETURN FUNCTION
C
1000   CONTINUE

       GET_PASSIVE_FRACTIONS = TOTFRCT
C
C THIS IS THE END TO GET TOTAL NUMBER OF FRACTIONS FOR PASSIVE GAMES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_PASSIVE_TOTAMOUNT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 09 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GET_PASSIVE_TOTAMOUNT(TRABUF,TRNTOTAMT,TRNTOTTCK)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:PASCOM.DEF'  ! V03
C
C PARAMETERS DEFINITION TO  GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      INTEGER * 4 TRNTOTAMT
      INTEGER * 4 TRNTOTTCK        ! TRANSACTION TOTAL TICKETS COUNTER
C
C VARIABLES DEFINITION TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      INTEGER * 4 TCKS             ! NUMBER OF TICKETS COUNTER
      INTEGER * 4 TOTAMT           ! TOTAL TRANSACTION AMOUNT
      
C VARIABLES DEFINITION  FOR PASSIVE GAMES
C
       INTEGER * 4 GIND             ! GAME INDEX
       INTEGER * 4 MYEMI           ! EMISION NUMBER TO SEARCH
       INTEGER * 4 EMISIND          ! EMISION INDEX
       LOGICAL     FOUND
C
C FUNCTION DEFINITION TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      INTEGER * 4 GET_PASSIVE_FRACTIONS

C INITIATE VARIABLES TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
      TOTAMT = 0
      TRNTOTTCK = 0

       GIND    = TRABUF(TGAMIND)
       EMISIND = CURDRW
       FOUND = .FALSE.
C
C LOOP TO CALCULATE TOTAL VALIDATION / RETURN AMOUNT FOR PASSIVE GAME
C
      DO TCKS = 1, TRABUF(TPTCK)
C   v03 passive amount must be witout comission
        IF(CHECK_PASSIVE_STATUS(TRABUF, TCKS)) THEN                         !v03
          IF (TRNTYP .EQ. TVAL)THEN
             TOTAMT = TOTAMT + TRABUF(TPPAY1 + OFFTRA * (TCKS - 1))
          ELSE
             MYEMI  = TRABUF(TPEMIS1 + OFFTRA * (TCKS - 1))
              DO  EMISIND = 1, PAGEMI
               IF (PASEMIS(EMISIND,GIND) .EQ. MYEMI ) then 
                 TOTAMT = TOTAMT + PASPRC(EMISIND,GIND)* GET_PASSIVE_FRACTIONS(TRABUF, TCKS)
                    GOTO 5000   
                ENDIF                         
              ENDDO
5000   CONTINUE  	        
          ENDIF 
          TRNTOTTCK = TRNTOTTCK + GET_PASSIVE_FRACTIONS(TRABUF, TCKS)          
    	endif
      ENDDO
C
C WRITE TOTAL AMOUNT RETURN FUNCTION

1000   CONTINUE
       !GET_PASSIVE_TOTAMOUNT  = TOTAMT
       TRNTOTAMT = TOTAMT
C
C THIS IS THE END TO  GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      END
C ******************************************************************************
C
C     SUBROUTINE: PRINT_HEADER_TRN
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 09 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO WRITE ON LINE TRANSACTION HEADER IN ON LINE GSALES LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      INTEGER * 4 FUNCTION PRINT_HEADER_TRN(TRABUF, HDRTYP, TRNTOTTCK, DAFFDB)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO WRITE ON LINE TRANSACTION HEADER
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:AGTCOM.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:RECDAF.DEF'
C
C PARAMETERS DEFINITION TO WRITE ON LINE TRANSACTION HEADER
C
      INTEGER * 4 HDRTYP         ! HEADER TYPE (0: NORMAL, 1: JOKER 2: PASSIVE)
      INTEGER * 4 TRNTOTTCK      ! TRANSACTION TOTAL TICKETS COUNTER
      INTEGER * 4 DAFFDB(7)      ! DAF FILE DESCRIPTOR BLOCK
C
C FUNCTIONS DEFIINITION TO WRITE ON LINE TRANSACTION HEADER
C
      !INTEGER * 4 GET_PASSIVE_TOTAMOUNT  ! PASSIVE TOTAL TRANSACTION AMOUNT 
C
C VARIABLES DEFINITION TO WRITE ON LINE TRANSACTION HEADER
C
      INTEGER * 4 TRNGTYP        ! TRANSACTION GAME TYPE
      INTEGER * 4 TRNGAMNUM      ! TRANSACTION GAME NUMBER
      INTEGER * 4 TRNAGTNUM      ! TRANSACTION AGENT NUMBER
      INTEGER * 4 TRNTOTAMT      ! TRANSACTION TOTAL AMOUN 
      INTEGER * 4 TRNSERIAL      ! TRANSACTION SERIAL NUMBER
      INTEGER * 4 TRNCHECKSUM    ! TRANSACTION CHECKSUM
      INTEGER * 4 DRWNUM         ! DRAW NUMBER      
      INTEGER * 4 FSTS           ! FUNCTION STATUS
C
      CHARACTER * 6 TRNDRWNUM    ! TRANSACTION DRAW NUMBER
      CHARACTER * 3 TRNNUMDRWS   ! TRANSACTION NUMBER OF DRAWS
C
C SET NUMBER OF TICKETS REGISTERED IN TRANSACTION REGISTER AND TOTAL AMOUNT
C
      TRNTOTTCK = 1
      TRNTOTAMT = 0
C
C SET TRANSACTION GAME TYPE ( 1: PASSIVE, 2: OTHER )
C
      TRNGTYP = 2
      IF(TRABUF(TGAMTYP) .EQ. TPAS) TRNGTYP = 1
C
C SET TRANSACTION GAME NUMBER
C
      TRNGAMNUM = TRABUF(TGAM)
      IF(HDRTYP .EQ. 1) THEN 
        TRNGAMNUM = TRABUF(TWKGME)
        IF(TRNTYP .EQ. TVAL) TRNGAMNUM = TRABUF(TVKGME)
      ENDIF
C
C SET TRANSACTION DRAW NUMBER 
C
      WRITE(TRNDRWNUM, 100)
      IF(TRNTYP .EQ. TWAG) THEN
        IF(HDRTYP .EQ. 0) DRWNUM = TRABUF(TWBEG)
        IF(HDRTYP .EQ. 1) DRWNUM = TRABUF(TWKBEG)
        IF(HDRTYP .EQ. 2) DRWNUM = TRABUF(TWBEG)
        WRITE(TRNDRWNUM, 200) DRWNUM
      ELSE IF(TRNTYP .EQ. TCAN) THEN
        IF(HDRTYP .EQ. 0) DRWNUM = TRABUF(TWBEG)
        IF(HDRTYP .EQ. 1) DRWNUM = TRABUF(TWKBEG)
        WRITE(TRNDRWNUM, 200) DRWNUM
      ELSE IF(TRNTYP .EQ. TVAL) THEN
        IF(HDRTYP .EQ. 0 .OR. HDRTYP .EQ. 1) THEN
          CALL READW(DAFFDB, TRABUF(TVCDC), DAFREC, FSTS)
          IF(FSTS .NE. 0) CALL GPAUSE
C
          DRWNUM = DAFDRW(TRNGAMNUM)
          WRITE(TRNDRWNUM, 200) DRWNUM
        ENDIF
      ENDIF
C
C SET TRANSACTION SERIAL NUMBER AND CHECK DIGITS
C
      CALL OUTGEN(TRABUF(TCDC), TRABUF(TSER), TRNSERIAL, TRNCHECKSUM)
C
C SET RETAILER NUMBER, ONE OFF LINE RETAILER CAN RETURN PASSIVE TICKETS IN
C ONE PRIVILEGE TERMINAL OF SCML
C
      TRNAGTNUM = TRABUF(TAGT)
      IF(TRABUF(TGAMTYP) .EQ. TPAS .AND. TRABUF(TTYP) .EQ. TRET .AND. 
     *   TRABUF(TPOFFTER) .GT. 0) THEN
        TRNAGTNUM = AGTTAB(AGTNUM, TRABUF(TPOFFTER)) 
      ENDIF
C
C SET TOTAL AMOUNT FOR WAGER AND CANCELS TRANSACTIONS
C
      IF(TRNTYP .EQ. TWAG .OR. TRNTYP .EQ. TCAN) THEN
        IF(HDRTYP .EQ. 0) TRNTOTAMT = TRABUF(TWAMT) * TRABUF(TWDUR)
        IF(HDRTYP .EQ. 1) TRNTOTAMT = TRABUF(TWKAMT) * TRABUF(TWKDUR)
        IF(HDRTYP .EQ. 2) TRNTOTAMT = TRABUF(TWAMT) * TRABUF(TWDUR)
      ENDIF
C
C SET TOTAL AMOUNT FOR VALIDATION AND RETURN TRANSACTIONS
C
      IF(TRNTYP .EQ. TVAL .OR. TRNTYP .EQ. TRET) THEN
        IF(HDRTYP .EQ. 0) TRNTOTAMT = TRABUF(TVPAY) + TRABUF(TVREF)
        IF(HDRTYP .EQ. 1) TRNTOTAMT = TRABUF(TVKPAY)
        IF(HDRTYP .EQ. 2) CALL GET_PASSIVE_TOTAMOUNT(TRABUF,TRNTOTAMT,TRNTOTTCK)
      ENDIF
C
C SET NUMBER OF DRAWS ( ONLY FOR WAGER TRANSACTIONS TYPE )
C
      WRITE(TRNNUMDRWS, 300)
      IF(TRNTYP .EQ. TWAG) THEN
        WRITE(TRNNUMDRWS, 400) TRABUF(TWDUR)
        IF(HDRTYP .EQ. 1) WRITE(TRNNUMDRWS, 400) TRABUF(TWKDUR)
      ENDIF
C
C WRITE INFORMATION IN FILE REGISTER
C
      WRITE(FILREC, 500)
     *
     *              TRNGTYP,                        ! GAME TYPE        
     *              TRNGAMNUM,                      ! GAME NUMBER
     *              TRNAGTNUM,                      ! AGENT NUMBER
     *              TRNTYP,                         ! TRANSACTION TYPE
     *              TRNDRWNUM,                      ! DRAW NUMBER
     *              TRABUF(TCDC),                   ! TRANSACTION DATE ( CDC )
     *              GET_YYYYMMDD_CDC(TRABUF(TCDC)), ! TRANSACTION DATE
     *              GET_HHMMSS_TIME(TRABUF(TTIM)),  ! TRANSACTION TIME
     *              PRNT_AMT(TRNTOTAMT, 2),         ! AMOUNT
     *              TRNNUMDRWS,                     ! NUMBER OF DRAWS
     *              GET_JULIAN_CDC(TRABUF(TCDC)),   ! JULIAN
     *              TRNSERIAL,                      ! TRN. NUM. SERIE
     *              TRNCHECKSUM                     ! TRN. CHECK DIGIT
C
      FILRECLNG = 1 + 2 + 7 + 2 + 6 + 4 + 8 + 6 + 12 + 3 + 3 + 9 + 3
C
C WRITE TOTAL AMOUNT RETURN FUNCTION
C
      PRINT_HEADER_TRN = TRNTOTAMT
C
C FORMATS DEFINITION TO ON LINE TRANSACTION HEADER
C
100   FORMAT(6(' '))
200   FORMAT(I6.6)
300   FORMAT(3(' '))
400   FORMAT(I3.3)
500   FORMAT(I1.1, I2.2, I7.7, I2.2, A6, I4.4, A8, A6, A12, A3, I3.3, 
     *       I9.9, I3.3)
C
C THIS IS THE END TO WRITE ON LINE TRANSACTION HEADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_EXCHANGE_INFORMATION
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 11 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO WRITE ON LINE GSALES EXCHANGE TICKET INFORMATION
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_EXCHANGE_INFORMATION(TRABUF)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO WRITE EXCHANGE TICKET INFORMATION
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO WRITE EXCHANGE TICKET INFORMATION
C
      INTEGER * 4 POS                    ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 EXCHGSERIAL            ! EXCHANGE SERIAL NUMBER
      INTEGER * 4 EXCHGCHECK             ! EXCHANGE CHECK DIGIT
C
      CHARACTER * 15 EXCHGINFO           ! EXCHANGE INFORMATION
C
C RESET VARIABLES ( BLANKS )
C
      POS = FILRECLNG + 1
      WRITE(EXCHGINFO, 100)
C
C SET EXCHANGE TICKET INFORMATION ( IF WE HAVE )
C
      IF(TRABUF(TVEXC) .GT. 0) THEN
        CALL OUTGEN(TRABUF(TCDC), TRABUF(TVEXC), EXCHGSERIAL, EXCHGCHECK)
        WRITE(EXCHGINFO, 200) GET_JULIAN_CDC(TRABUF(TCDC)), ! JULIAN
     *                        EXCHGSERIAL,                  ! EXC. SERIAL NUMBER
     *                        EXCHGCHECK                    ! EXC. CHECK DIGIT
        ENDIF
C
C SET EXCHANGE FILE INFORMATION IN FILE REGISTER
C
      WRITE(FILREC(POS:POS + 15), 300) EXCHGINFO
      FILRECLNG = FILRECLNG + 3 + 9 + 3 
C
C FORMATS DEFINITION TO WRITE EXCHANGE TICKET INFORMATION
C
100   FORMAT(15(' '))
200   FORMAT(I3.3, I9.9, I3.3)
300   FORMAT(A15)
C
C THIS IS THE END TO WRITE EXCHANGE TICKET INFORMATION
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_GSALES_TRANSACTION
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 09 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT ONE TRANSACTION INTO GSALES FILE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_GSALES_TRANSACTION(TRABUF,DAFFDB)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT ONE TRANSACTION IN GSALES FILE LOADER
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
C
C PARAMETERS DEFINITION TO PRINT ONE TRANSACTION IN GSALES FILE LOADER
C
      INTEGER * 4 DAFFDB(7)      ! DAF FILE DESCRIPTOR BLOCK
C
C FUNCTIONS DEFINITION TO PRINT ONE TRANSACTION IN GSALES FILE LOADER
C
      INTEGER * 4 PRINT_HEADER_TRN    ! PRINT HEADER TRANSACTION
C
C VARIABLES DEFINITION TO PRINT ONE TRANSACTION IN GSALES FILE LOADER
C
       INTEGER * 4 TRNTOTAMT          ! TRANSACTION TOTAL AMOUNT
       INTEGER * 4 TRNTOTTCK          ! TRANSACTION TOTAL TICKETS COUNTER
       INTEGER * 4 HDRTYP             ! HEADER TRANSACTION TYPE
       INTEGER * 4 JKRGAMNUM          ! JOKER GAME NUMBER
C
       INTEGER * 4 LUN_STRM           ! LOGICAL UNIT FOR MEMORY STREAM RECORDS
       COMMON /STRM/ LUN_STRM
C
C CHECK IF TRANSACTION VALIDATION ONLY WINS JOKER ( NOT WINS REGULAR GAME )
C
C ( PASSIVE GAMES DON'T HAVE JOKES, SO WE DON'T HAVE TO CHECK )
C
       IF(TRNTYP .EQ. TVAL) THEN
         IF(TRABUF(TGAMTYP) .NE. TPAS) THEN
           IF(TRABUF(TVPAY) + TRABUF(TVREF) .EQ. 0) GOTO 1000
         ENDIF
       ENDIF
C
C PRINT ON LINE TRANSACTION HEADER ( HDRTYP: 0: NORMAL, 1: JOKER, 2: PASSIVE )
C
       HDRTYP = 0
       IF(TRABUF(TGAMTYP) .EQ. TPAS) HDRTYP = 2
       TRNTOTAMT = PRINT_HEADER_TRN(TRABUF, HDRTYP, TRNTOTTCK,DAFFDB)
C
C WRITE PARTICULAR INFORMATION FOR EACH GAME ( DETAILS )
C
      IF(TRABUF(TGAMTYP) .EQ. TLTO) CALL PRINT_DETAILS_LOTTO_GAME(TRABUF)
      IF(TRABUF(TGAMTYP) .EQ. TSPT) CALL PRINT_DETAILS_SPORT_GAME(TRABUF)
      IF(TRABUF(TGAMTYP) .EQ. TTGL) CALL PRINT_DETAILS_RESULTS_GAME(TRABUF)
      IF(TRABUF(TGAMTYP) .EQ. TPAS) CALL PRINT_DETAILS_PASSIVE_GAME(TRABUF)
      IF(TRABUF(TGAMTYP) .EQ. TKIK) CALL PRINT_DETAILS_JOKER_GAME(TRABUF)      !V04

C
C WRITE INFORMATION IN GSALES FILE AND SET NUMBER OF RECORDS WRITTEN
C
      FILRECCNT = FILRECCNT + 1
      WRITE(IDFIL, 100) FILREC(1:FILRECLNG)
C
C UPDATE TOTAL AMOUNT FOR ACTUAL TRANSACTION
C
      IF(TRABUF(TGAMTYP).EQ.TPAS.AND.(TRNTYP.EQ.TVAL.OR.TRNTYP.EQ.TRET)) THEN
         CALL GET_PASSIVE_TOTAMOUNT(TRABUF,TRNTOTAMT,TRNTOTTCK)
      ENDIF

      CALL UPDATE_TOTSAL_INFO(TRABUF(TGAM), TRNTOTAMT, TRNTOTTCK)
C
C CHECK IF TRANSACTION IS PLAYING FOR JOKER GAMES ( WAGER AND CANCELS )
C
C ( HOST ONLY HAVE ONE TRANSACTION FOR JOKER AND GAME, BUT GSALES NEEDS TWO
C   TRANSACTION, JOKER IT'S FOR GSALES A SEPARATE GAME )
C
1000  CONTINUE
      IF(TRNTYP .EQ. TWAG .OR. TRNTYP .EQ. TCAN) THEN
        IF(TRABUF(TGAMTYP) .EQ. TKIK) RETURN                         !V04 
        IF(TRABUF(TWKFLG) .EQ. 0 .AND. TRABUF(TWKFLG2) .EQ. 0) RETURN
      ENDIF
C
C CHECK IF TRANSACTION IS PLAYING FOR JOKER GAMES ( VALIDATIONS )
C
      IF(TRNTYP .EQ. TVAL) THEN
        IF(TRABUF(TVKPAY) .LE. 0) RETURN                 ! NO JOKER WIN
      ENDIF
C
C CHECK IF TRANSACTION IS PLAYING FOR JOKER GAMES ( PASSIVE DON'T HAVE JOKER )
C
      IF(TRABUF(TGAMTYP) .EQ. TPAS) RETURN
C
C PRINT ON LINE TRANSACTION HEADER FOR JOKER 
C
C ( SECOND PARAMETER VALUES ARE 0: NORMAL, 1: JOKER, 2: PASSIVE )
C
      TRNTOTAMT = PRINT_HEADER_TRN(TRABUF, 1, TRNTOTTCK, DAFFDB)
C
C WRITE PARTICULAR INFORMATION FOR JOKER GAME ( DETAILS )
C
      CALL PRINT_DETAILS_JOKER_GAME(TRABUF)
C
C WRITE INFORMATION IN GSALES FILE AND SET NUMBER OF RECORDS WRITTEN
C
      FILRECCNT = FILRECCNT + 1
      WRITE(IDFIL, 100) FILREC(1:FILRECLNG)
C
C UPDATE TOTAL AMOUNT FOR JOKER GAME
C
      JKRGAMNUM = TRABUF(TWKGME)
      IF(TRNTYP .EQ. TVAL) JKRGAMNUM = TRABUF(TVKGME)
      CALL UPDATE_TOTSAL_INFO(JKRGAMNUM, TRNTOTAMT, TRNTOTTCK)
C
C FORMATS DEFINITION TO PRINT TRANSACTION INTO GSALES FILE LOADER
C
100   FORMAT(A)
C
C THIS IS THE END TO PRINT TRANSACTION INTO GSALES FILE LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_DETAILS_JOKER_GAME
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT DETAILS FOR JOKER GAMES IN GSALES ON LINE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_DETAILS_JOKER_GAME(TRABUF)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT DETAILS FOR JOKER GAMES
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO PRINT DETAILS FOR JOKER GAMES
C
      INTEGER * 4 POS             ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 TRNGTYP         ! TRANSACTION GAME TYPE
      INTEGER * 4 GAM             ! ORIGINAL GAME NUMBER  
C
      INTEGER * 4 LUN_STRM        ! LOGICAL UNIT FOR MEMORY STREAM RECORDS
      COMMON /STRM/ LUN_STRM
C
C SET TRANSACTION GAME TYPE ( 1: PASSIVE, 2: ON LINE )
C
      TRNGTYP = 2
      IF(TRABUF(TGAMTYP) .EQ. TPAS) TRNGTYP = 1
C
C SET JOKER BASE GAME NUMBER
C
      GAM=TRABUF(TGAM)
      IF(TRABUF(TGAMTYP).EQ.TKIK) CALL GET_INFO_STREAM_RECORDS(TRABUF, GAM)
C
C WRITE PARTICULAR INFORMATION FOR EACH TYPE ( WAGER DETAILS )
C
      POS = FILRECLNG + 1
      IF(TRNTYP .EQ. TWAG) THEN
        WRITE(FILREC(POS:POS + 10), 100) TRNGTYP,       ! GAME TYPE
     *                                   GAM,           ! ORIGINAL GAME NUMBER
     *                                   TRABUF(TWKICK) ! JOKER NUMBER
        FILRECLNG = FILRECLNG + 1 + 2 + 7
      ENDIF
C
C WRITE PARTICULAR INFORMATION FOR EACH TYPE VALIDATION DETAILS 
C
      IF(TRNTYP .EQ. TVAL) THEN
        CALL PRINT_EXCHANGE_INFORMATION(TRABUF)
      ENDIF
C
C FORMATS DEFINITION TO PRINT DETAILS FOR JOKER GAMES
C
100   FORMAT(I1.1, I2.2, I7.7)
C
C THIS IS THE END TO PRINT DETAILS FOR JOKER GAMES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: SET_JOKER_QP_FLAGS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO SET FLAGS FOR JOKER AND QUICK PICK
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE SET_JOKER_QP_FLAGS(TRABUF, JOKER, QP)
      IMPLICIT NONE
C
C INCLUDES DEFINITON TO SET FLAGS FOR JOKER AND QP
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C PARAMETERS DEFINITION TO SET FLAGS FOR JOKER AND QP
C
      INTEGER * 4 JOKER            ! JOKER FLAG
      INTEGER * 4 QP               ! QUICK PICK FLAG
C
C SET JOKER FLAG ( 0: NO PLAY JOKER, 1: PLAY JOKER )
C
      JOKER = 0
      IF(TRABUF(TWKFLG) .EQ. 1 .OR. TRABUF(TWKFLG2) .EQ. 1) JOKER = 1
C
C SET QUICK PICK FLAG ( 0: NO QUICK PICK, 1: QUICK PICK )
C
      QP = 0
      IF (TRABUF(TWQPF) .GT. 0) QP = 1
C
C THIS IS THE END TO SET FLAGS FOR JOKER AND QUICK PICK
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_DETAILS_LOTTO_GAME
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT DETAILS FOR LOTTO GAMES IN GSALES ON LINE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_DETAILS_LOTTO_GAME(TRABUF)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT DETAILS FOR LOTTO GAMES
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO PRINT DETAILS FOR LOTTO GAMES
C
      INTEGER * 4 CNTA                ! COUNTER A
      INTEGER * 4 CNTB                ! COUNTER B
      INTEGER * 4 FSTS                ! FUNCTION STATUS
      INTEGER * 4 POS                 ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 JOKER               ! JOKER FLAG
      INTEGER * 4 QP                  ! QUICK PICK FLAG
      INTEGER * 4 LUCKYNUM            ! LUCKY NUMBER PLAYED
      INTEGER * 4 NUMBOARD            ! NUMBER OF BOARDS
      INTEGER * 4 NUMNBRS             ! NUMBER OF NUMBERS
      INTEGER * 4 BDS(24)             ! BOARD DEFINITION ( PLAY LOTTO NUMBERS )
C
      INTEGER * 2 BOARD(4, 12)        ! BOARD DEFINITION ( PLAY LOTTO NUMBERS )
C
C PRINT INFORMATION ( DEPENDIN ON TRANSACTION TYPE )
C
      IF(TRNTYP .EQ. TVAL) GOTO 1000
      IF(TRNTYP .EQ. TWAG) GOTO 2000
      RETURN
C
C VALIDATION TRANSACTION
C
1000  CONTINUE
      CALL PRINT_EXCHANGE_INFORMATION(TRABUF)
      RETURN 
C
C TRANSACTION WAGER TYPE
C
2000  CONTINUE
C
C SET JOKER AND QP FLAGS ( 0: NOT SET, 1: SET )
C
      CALL SET_JOKER_QP_FLAGS(TRABUF, JOKER, QP)
C
C SET LUCKY NUMBER PLAYED
C
      LUCKYNUM = TRABUF(TWLUCK)
C
C SET NUMBER OF BOARDS AND NUMBER OF NUMBERS
C
      NUMBOARD = TRABUF(TWNBET)
      NUMNBRS = TRABUF(TWNMRK)
C
C WRITE LOTTO DELAILS IN GSALES TRANSACTION FILE
C
      POS = FILRECLNG + 1
      WRITE(FILREC(POS: POS + 9), 100) JOKER,               ! JOKER FLAG
     *                                 TRABUF(TWSYST),      ! SYSTEM FLAG
     *                                 QP,                  ! QUICK PICK FLAG
     *                                 LUCKYNUM,            ! LUCKY NUMBER
     *                                 NUMBOARD,            ! NUMBER OF BOARDS
     *                                 NUMNBRS              ! NUMBER OF NUMBERS
C
      FILRECLNG  = FILRECLNG + 1 + 1 + 1 + 2 + 2 + 2
C
C GET LOTTO NUMBER IN ARRAY FORMAT ( BITMAP )
C
      CALL SINTMAP(TRABUF(TWBORD), 1, NUMBOARD, TRABUF(TWNMRK), 64, BOARD, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Gsales Lotto Bitmap System Error'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C WRITE LOTTO BET NUMBER DETAILS ( GET PLAYING NUMBERS )
C
      DO CNTA = 1, NUMBOARD
        POS = FILRECLNG + 1
        CALL UNMAP(BOARD(1, CNTA), 8, BDS, NUMNBRS)
        WRITE(FILREC(POS:POS + NUMNBRS * 2), 200) (BDS(CNTB), CNTB = 1, NUMNBRS)
        FILRECLNG = FILRECLNG + NUMNBRS * 2
      ENDDO
C
C END FOR WAGER TRANSACTION TYPE
C
      RETURN
C
C FORMATS DEFINITON TO PRINT DETAILS FOR LOTTO GAMES
C
100   FORMAT(I1.1, I1.1, I1.1, I2.2, I2.2, I2.2)
200   FORMAT(<NUMNBRS>I2.2)
C
C THIS IS THE END TO PRINT DETAILS FOR LOTTO GAMES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_DETAILS_SPORT_GAME
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT DETAILS FOR SPORTS GAMES IN GSALES ON LINE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_DETAILS_SPORT_GAME(TRABUF)
      IMPLICIT NONE
C
C INCLUDE DEFINITIONS TO PRINT DETAILS FOR SPORTS GAMES
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO PRINT DETAILS FOR SPORTS GAMES
C
      INTEGER * 4 CNTA                ! COUNTER A
      INTEGER * 4 CNTB                ! COUNTER B
      INTEGER * 4 CNTC                ! COUNTER C
      INTEGER * 4 POS                 ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 JOKER               ! JOKER FLAG
      INTEGER * 4 QP                  ! QUICK PICK FLAG
      INTEGER * 4 NUMBOARD            ! NUMBER OF BOARDS
      INTEGER * 4 NUMNBRS             ! NUMBER OF NUMBERS
      INTEGER * 4 NUMFRG              ! NUMBER OF RESULTS ROWS
      INTEGER * 4 SYSBETNUM           ! SYSTEM BET NUMBER
      INTEGER * 4 ROWS(SPGNBR, 12)    ! ROW NUMBER ( 1, X, 2 )
      INTEGER * 4 RROWS(2, TGGNBR, 12)! SUPER 14 ROW NUMBER ( 0, 1, M )
      INTEGER *4  BCNT                ! SUPER 14 ROW COUNT 
C
      CHARACTER * 3 GSALROW(0:7)      ! GSALES ROW CODIFICATION
      CHARACTER * 3 GSALRROW(0:7)     ! GSALES RROW CODIFICATION
C
C INITIATE VARIABLES TO PRINT DETAILS FOR SPORTS GAMES
C
      DATA GSALROW / '000',        ! SELECT - - -   ( NOT ALLOWED )
     *               '100',        ! SELECT 1 - -
     *               '010',        ! SELECT - X -
     *               '110',        ! SELECT 1 X -
     *               '001',        ! SELECT - - 2
     *               '101',        ! SELECT 1 - 2
     *               '011',        ! SELECT - X 2
     *               '111'  /      ! SELECT 1 X 2
C
      DATA GSALRROW / '000',        ! SELECT - - -   ( NOT ALLOWED )
     *                '100',        ! SELECT 0 - -
     *                '010',        ! SELECT - 1 -
     *                '110',        ! SELECT 0 1 -
     *                '001',        ! SELECT - - M
     *                '101',        ! SELECT 0 - M
     *                '011',        ! SELECT - 1 M
     *                '111'  /      ! SELECT 0 1 M
C
C WRITE INFORMATION ( DEPENDIN ON TRANSACTION TYPE )
C
      IF(TRNTYP .EQ. TVAL) GOTO 1000
      IF(TRNTYP .EQ. TWAG) GOTO 2000
      RETURN
C
C TRANSACTION VALIDATION TYPE
C
1000  CONTINUE
      CALL PRINT_EXCHANGE_INFORMATION(TRABUF)
      RETURN 
C
C TRANSACTION WAGER TYPE
C
2000  CONTINUE
C
C SET NUMBER OF BOARDS, NUMBER OF NUMBERS AND NUMBER OF RESULTS ROWS
C
      BCNT = 0
      IF(TRABUF(TWSPFRG).NE.0) BCNT = 1

      NUMBOARD = TRABUF(TWNBET)
      NUMNBRS = TRABUF(TWSRW) - BCNT
      NUMFRG = TRABUF(TWSPFRG)
C
C SET JOKER AND QP FLAGS ( 0: NOT SET, 1: SET )
C
      CALL SET_JOKER_QP_FLAGS(TRABUF, JOKER, QP)
C
C SET SYSTEM BET NUMBER ( ONLY IF PLAY SYSTEM IF NOT SET ZERO )
C
      SYSBETNUM = TRABUF(TWSIMP)
      IF(TRABUF(TWSYST) .EQ. 0) SYSBETNUM = 0
C
C WRITE SPORTS DELAILS IN GSALES TRANSACTION FILE
C
      POS = FILRECLNG + 1
      WRITE(FILREC(POS: POS + 10), 100) JOKER,             ! JOKER FLAG
     *                                  TRABUF(TWSYST),    ! SYSTEM FLAG
     *                                  QP,                ! QUICK PICK FLAG
     *                                  NUMBOARD,          ! NUMBER OF BOARDS
     *                                  SYSBETNUM,         ! SYSTEM BET NUMBER
     *                                  NUMNBRS            ! NUMBER OF NUMBERS
C
      FILRECLNG = FILRECLNG + 1 + 1 + 1 + 2 + 3 + 2
C
C GET SPORTS NUMBER IN ARRAY FORMAT ( NOT BITMAP )
C
      CALL GETROW(TRABUF, ROWS, RROWS)
C
C WRITE SPORTS BET NUMBER DETAILS
C
      DO CNTA = 1, NUMBOARD
        DO CNTB = 1, NUMNBRS
          POS = FILRECLNG + 1
          WRITE(FILREC(POS: POS + 3), 200) GSALROW(ROWS(CNTB, CNTA))
          FILRECLNG = FILRECLNG + 3
        ENDDO
      ENDDO
C
C WRITE SUPER14 (RESULTS) ROW DETAILS

      IF(TRABUF(TWSPFRG).EQ.1) THEN
        DO CNTC = 1, 2
          POS = FILRECLNG + 1
          WRITE(FILREC(POS: POS + 3), 200) GSALRROW(RROWS(CNTC,1,1))
          FILRECLNG = FILRECLNG + 3
        ENDDO
      ENDIF

      IF(TRABUF(TWSPFRG).EQ.2) THEN
        POS = FILRECLNG + 1
        WRITE(FILREC(POS: POS + 3), 200) GSALROW(RROWS(1,1,1))
        FILRECLNG = FILRECLNG + 3
        POS = FILRECLNG + 1
        WRITE(FILREC(POS: POS + 3), 200) GSALROW(0)  ! last row always '000' for S14
        FILRECLNG = FILRECLNG + 3
      ENDIF
C
C END FOR WAGER TRANSACTION TYPE
C
      RETURN
C
C FORMATS DEFINITION TO PRINT DETAILS FOR SPORTS GAMES
C
100   FORMAT(I1.1, I1.1, I1.1, I2.2, I3.3, I2.2)
200   FORMAT(A3)
C
C THIS IS THE END TO PRINT DETAILS FOR SPORTS GAMES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_DETAILS_RESULTS_GAME
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT DETAILS FOR RESULTS GAMES IN GSALES ON LINE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_DETAILS_RESULTS_GAME(TRABUF)
      IMPLICIT NONE
C
C INCLUDE DEFINITIONS TO PRINT DETAILS FOR RESULTS GAMES
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO PRINT DETAILS FOR RESULTS GAMES
C      
      INTEGER * 4 CNTA                ! COUNTER A
      INTEGER * 4 CNTB                ! COUNTER B
      INTEGER * 4 CNTC                ! COUNTER C
      INTEGER * 4 POS                 ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 JOKER               ! JOKER FLAG
      INTEGER * 4 QP                  ! QUICK PICK FLAG
      INTEGER * 4 NUMBOARD            ! NUMBER OF BOARDS
      INTEGER * 4 NUMNBRS             ! NUMBER OF NUMBERS
      INTEGER * 4 SYSBETNUM           ! SYSTEM BET NUMBER
      INTEGER * 4 ROWS(2, TGGNBR, 12) ! ROW NUMBER ( 0 / 1 / 2 / M )
C
      CHARACTER * 4 GSALROW(0:15)     ! GSALES ROW CODIFICATION
C
C INITIATE VARIABLES TO PRINT DETAILS FOR RESULTS GAMES
C
      DATA GSALROW / '0000',        ! SELECT - - - -   ( NOT ALLOWED )
     *               '1000',        ! SELECT 0 - - -
     *               '0100',        ! SELECT - 1 - -
     *               '1100',        ! SELECT 0 1 - -
     *               '0010',        ! SELECT - - 2 -
     *               '1010',        ! SELECT 0 - 2 -
     *               '0110',        ! SELECT - 1 2 -
     *               '1110',        ! SELECT 0 1 2 -
     *               '0001',        ! SELECT - - - M
     *               '1001',        ! SELECT 0 - - M
     *               '0101',        ! SELECT - 1 - M
     *               '1101',        ! SELECT 0 1 - M
     *               '0011',        ! SELECT - - 2 M
     *               '1011',        ! SELECT 0 - 2 M
     *               '0111',        ! SELECT - 1 2 M
     *               '1111'  /      ! SELECT 0 1 2 M
C
C WRITE INFORMATION ( DEPENDIN ON TRANSACTION TYPE )
C
      IF(TRNTYP .EQ. TVAL) GOTO 1000
      IF(TRNTYP .EQ. TWAG) GOTO 2000
      RETURN
C
C TRANSACTION VALIDATION TYPE
C
1000  CONTINUE
      CALL PRINT_EXCHANGE_INFORMATION(TRABUF)
      RETURN 
C
C TRANSACTION WAGER TYPE
C
2000  CONTINUE
C
C SET JOKER AND QP FLAGS ( 0: NOT SET, 1: SET )
C
      CALL SET_JOKER_QP_FLAGS(TRABUF, JOKER, QP)
C
C SET NUMBER OF BOARDS AND NUMBER OF NUMBERS
C
      NUMBOARD = TRABUF(TWNBET)
      NUMNBRS = TRABUF(TWSRW)
C
C SET SYSTEM BET NUMBER ( ONLY IF PLAY SYSTEM IF NOT SET ZERO )
C
      SYSBETNUM = TRABUF(TWSIMP)
      IF(TRABUF(TWSYST) .EQ. 0) SYSBETNUM = 0
C
C WRITE RESULTS DELAILS IN GSALES TRANSACTION FILE
C
      POS = FILRECLNG + 1
      WRITE(FILREC(POS: POS + 10), 100) JOKER,             ! JOKER FLAG
     *                                  TRABUF(TWSYST),    ! SYSTEM FLAG
     *                                  QP,                ! QUICK PICK FLAG
     *                                  NUMBOARD,          ! NUMBER OF BOARDS
     *                                  SYSBETNUM,         ! SYSTEM BET NUMBER
     *                                  NUMNBRS            ! NUMBER OF NUMBERS
C
      FILRECLNG = FILRECLNG + 1 + 1 + 1 + 2 + 3 + 2
C
C GET RESULTS NUMBER IN ARRAY FORMAT ( NOT BITMAP )
C
      CALL TGL_GETROW(TRABUF, ROWS)
C
C WRITE RESULTS BET NUMBER DETAILS
C
      DO CNTA = 1, NUMBOARD
        DO CNTB = 1, NUMNBRS
          DO CNTC = 1, 2
            POS = FILRECLNG + 1
            WRITE(FILREC(POS: POS + 4), 200) GSALROW(ROWS(CNTC, CNTB, CNTA))
            FILRECLNG = FILRECLNG + 4
          ENDDO
        ENDDO
      ENDDO
C
C END FOR WAGER TRANSACTION TYPE
C
      RETURN
C
C FORMATS DEFINITON TO PRINT DETAILS FOR RESULTS GAMES
C
100   FORMAT(I1.1, I1.1, I1.1, I2.2, I3.3, I2.2)
200   FORMAT(A4)
C
C THIS IS THE END TO PRINT DETAILS FOR RESULTS GAMES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_DETAILS_PASSIVE_GAME
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT DETAILS FOR PASSIIVE GAMES IN GSALES ON LINE LOADER
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_DETAILS_PASSIVE_GAME(TRABUF)
      IMPLICIT NONE
C
C INCLUDE DEFINITIONS TO PRINT DETAILS FOR PASSIVE GAMES
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:AGTCOM.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:PASCOM.DEF'  ! V03
C
C FUNCTION DEFINITION TO GET TOTAL TRANSACTION AMOUNT FOR PASSIVE GAMES
C
      INTEGER * 4 GET_PASSIVE_FRACTIONS
C
C VARIABLES DEFINITIONS TO PRINT DETAILS FOR PASSIVE GAMES
C
      INTEGER * 4 POS                 ! POSITION TO WRITE IN FILE REGISTER
      INTEGER * 4 PRIVTER             ! PRIVILEGED TERMINAL ( 0: NO, 1: YES )
      INTEGER * 4 AGTBITMAP           ! AGENT BIT MAP OPTIONS
      INTEGER * 4 NUMGOODTCKS         ! NUMBER OF GOOD TICKETS
      INTEGER * 4 TCKS                ! NUMBER OF TICKETS COUNTER
      INTEGER * 4 FRCTAMT             ! FRACTION AMOUNT
C
C VARIABLES DEFINITION  FOR PASSIVE GAMES
C
       INTEGER * 4 GIND             ! GAME INDEX
       INTEGER * 4 MYEMIS           ! EMISION NUMBER TO SEARCH
       INTEGER * 4 EMISIND          ! EMISION INDEX
C
C INITIATE VARIABLES  FOR PASSIVE GAMES
C
       GIND = TRABUF(TGAMIND)
       EMISIND = CURDRW
       
         
C TRANSACTION TYPES MAY BE WAGER, RETURN  OR VALIDATION  
C
      NUMGOODTCKS = 0
      IF(TRNTYP .EQ. TWAG. OR. TRNTYP .EQ. TCAN) GOTO 6000
      IF(TRNTYP .NE. TVAL .AND. TRNTYP .NE. TRET) RETURN
C
    
C SET IF TERMINAL FOR RETURN OR VALIDATION IT'S PRIV. ( 0: NO, 1: YES )
C
      PRIVTER = 0
      AGTBITMAP = AGTTAB(AGTTYP, TRABUF(TTER))
      IF(TSBIT(AGTBITMAP, AGTPRV)) PRIVTER = 1
C
C LOOP TO GET NUMBER OF EMISION WITH GOOD STATUS
C
      DO TCKS = 1, TRABUF(TPTCK)
        IF(CHECK_PASSIVE_STATUS(TRABUF, TCKS)) NUMGOODTCKS = NUMGOODTCKS + 1
      ENDDO
C
C WRITE TO GSALES FILE IF TERMINAL IS PRIV. ( ONLY FOR RETURN )
C
      IF(TRNTYP .EQ. TRET) THEN
	POS = FILRECLNG + 1
        WRITE(FILREC(POS:POS + 1), 100) PRIVTER
        FILRECLNG = FILRECLNG + 1
      ENDIF
C
C WRITE NUMBER OF GOOD TICKETS FOR RETURN OR FOR VALIDATION
C
      POS = FILRECLNG + 1
      WRITE(FILREC(POS:POS + 2), 200) NUMGOODTCKS
      FILRECLNG = FILRECLNG + 2
C
C LOOP TO WRITE EMISION NUMBER, TICKET COUNT / AMOUNT, FIRST FRACTION
C
      DO 1000 TCKS = 1, TRABUF(TPTCK)
C
C CHECK IF STATUS FOR RETURN / VALIDATION
C
C ( WE CAN HAVE 10 RETURNS / VALIDATIONS IN ONE TRANSACTION )
C
        IF(CHECK_PASSIVE_STATUS(TRABUF, TCKS) .NE. .TRUE.) GOTO 1000
C
C WRITE TICKET NUMBER, FRACTION NUMBER ( FIRST FOR RETURN ) AND DRAW NUMBER
C
	POS = FILRECLNG + 1
C v03 passive amount must be witout comission
         IF (TRNTYP .EQ. TVAL)THEN
                  FRCTAMT = TRABUF(TPPAY1 + OFFTRA * (TCKS - 1))
         ELSE
c                FRCTAMT = PASPRC(EMISIND,GIND)* GET_PASSIVE_FRACTIONS(TRABUF, TCKS)

             MYEMIS  = TRABUF(TPEMIS1 + OFFTRA * (TCKS - 1))
               DO  EMISIND = 1, PAGEMI
                IF (PASEMIS(EMISIND,GIND) .EQ. MYEMIS ) then 
                  FRCTAMT = PASPRC(EMISIND,GIND)* GET_PASSIVE_FRACTIONS(TRABUF, TCKS)
                    GOTO 5000   
                ENDIF                         
              ENDDO
5000   CONTINUE  	        
            
         ENDIF 

        WRITE(FILREC(POS:POS + 27), 300) 
     *
     *        TRABUF(TPNUM1 + OFFTRA * (TCKS - 1)),   ! TICKET NUMBER
     *        TRABUF(TPTEN1 + OFFTRA * (TCKS - 1)),   ! FRACTION NUMBER / FIRST
     *        TRABUF(TPEMIS1 + OFFTRA * (TCKS - 1)),  ! EMISION NUMBER
     *        GET_PASSIVE_FRACTIONS(TRABUF, TCKS),    ! FACTION COUNT
     *        PRNT_AMT(FRCTAMT, 2) ! FACTION AMOUNT
C
        FILRECLNG = FILRECLNG + 5 + 2 + 6 + 2 + 12
C
C END OF LOOP TO WRITE EMISION NUMBER, TICKET COUNT / AMOUNT, FIRST FRACTION
C
1000  CONTINUE
      RETURN
C
C EPASSIVE WAGERS
C
6000  CONTINUE
      POS = FILRECLNG + 1
      WRITE(FILREC(POS:POS + 15), 400)

     *        TRABUF(TWEPSN),                         !NUMBER
     *        TRABUF(TWEPSF),                         !FRACTION
     *        TRABUF(TWEPSS),                         !SERIE
     *        TRABUF(TWBEG)                           !DRAW NUMBER

      FILRECLNG = FILRECLNG + 5 + 2 + 2 + 6 
      RETURN
C
C
C FORMATS DEFINITION TO PRINT DETAILS FOR PASSIVE GAMES
C
100   FORMAT(I1.1)
200   FORMAT(I2.2)
300   FORMAT(I5.5, I2.2, I6.6, I2.2, A12)
400   FORMAT(I5.5,I2.2,I2.2,I6.6)
C
C THIS IS THE END TO PRINT DETAILS FOR PASSIVE GAMES
C
      END



C ******************************************************************************
C
C     SUBROUTINE: GENERATE_STREAM_RECORDS
C     AUTHOR    : F.R.P
C     VERSION   : 01            DATE: 20 / 04 / 2012
C
C ******************************************************************************
C
C READS TMF TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GENERATE_STREAM_RECORDS
      IMPLICIT NONE
C
C INCLUDE DEFINITIONS TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:PRMLOG.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
C
C VARIABLES DEFINITIONS TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      INTEGER * 4 MTMFIDFIL           ! MTMF  IDENTIFICATION FILE
      INTEGER * 4 MTMSERNUM           ! MTMF TRANSACTION SERIAL NUMBER
      INTEGER * 4 LOGREC(LREC * 3)    ! LOGGER REGISTER
      INTEGER * 4 STS                 ! FUNCTION STATUS
      LOGICAL EOF                     ! END OF FILE
C
      INTEGER * 4 TEMPSER
      INTEGER * 4 TEMPCHK
      INTEGER * 4 POINTER_DATA(3)     ! MEMORY STREAM DATA
C
      INTEGER * 4 I4TEMP
      BYTE      I1TEMP(4)
      EQUIVALENCE (I4TEMP,I1TEMP)
C
      INTEGER * 4 LEN_STRM            ! NUMBER OF MEMORY STREAM RECORDS
      INTEGER * 4 LUN_STRM            ! LOGICAL UNIT FOR MEMORY STREAM RECORDS
      COMMON /STRM/ LUN_STRM
C
C INTIATE VARIABLES TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      MTMSERNUM = 1
C
C GET FREE IDENTIFICATION FILE NUMBER FOR TRANSACTION FILE ( MTMF01.FIL )
C
      MTMFIDFIL = GET_FREE_IDFIL(1)
C
C OPEN TRANSACTION MASTER FILE NAME ( MTMF01.FIL )
C
      CALL OPEN_SYS_FILE(MTMFIDFIL, MTMFIL, PTMF)
C
C GET FREE IDENTIFICATION FILE NUMBER OF MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      LUN_STRM = GET_FREE_IDFIL(0)
C
C CREATE UNIT OF MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      CALL SORT_CREATE(LUN_STRM, 12)
C
C READ TRANSACTION FROM MASTER FILE
C
2000  CONTINUE
      EOF = .FALSE.
      CALL READTMF(LOGREC, MTMSERNUM, EOF)
      IF(EOF) GOTO 1000
C
C CHECK IF TRANSACTION SHOULD BE ADDEDIN STREAM RECORD, IF NOT, GO TO READ NEXT TRANSACTION
C
      CALL LOGTRA(TRABUF, LOGREC)
      IF(TRABUF(TTYP)    .NE. TWAG) GOTO 2000
      IF(TRABUF(TSTAT)   .NE. GOOD) GOTO 2000
      IF(TRABUF(TGAMTYP) .NE. TLTO) GOTO 2000  !Joker is add-on standalone for Lotto
C
C SAVE WAGER GAME NUMBER, INTERNAL AND EXTERNAL SERIAL (JUST IN CASE IS THE BASE GAME FOR JOKER)
C
      CALL OUTGEN(TRABUF(TCDC), TRABUF(TSER), TEMPSER, TEMPCHK)
C
      I4TEMP    = TEMPSER
      I1TEMP(4) = TEMPCHK
      POINTER_DATA(1) = I4TEMP
C
      POINTER_DATA(2) = TRABUF(TSER)
C
      POINTER_DATA(3) = TRABUF(TGAM)
C
      CALL SORT_ADD(LUN_STRM, POINTER_DATA, STS)          
C
C GO TO READ NEXT TRANSACTION TO MTMF01.FIL FILE
C
      GOTO 2000
C
C END FOR READ TRANSACTION MASTER FILE ( MTMF01.FIL )
C
1000  CONTINUE
C
C CHECK IF THERE ARE NO JOKER-BASED GAMES
C
      CALL SORT_GET_LEN(LUN_STRM, LEN_STRM)
      IF(LEN_STRM .EQ. 0) THEN
        CALL SORT_CLOSE(LUN_STRM)
        LUN_STRM = -1
      ENDIF
C
C CLOSE TRANSACTION MASTER FILE ( MTMF01.FIL )
C
      CALL USRCLOS1(MTMFIDFIL)
C
C THIS IS THE END TO TO FILL MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      RETURN
      END



C ******************************************************************************
C
C     SUBROUTINE: GET_INFO_STREAM_RECORDS
C     AUTHOR    : F.R.P
C     VERSION   : 01            DATE: 20 / 04 / 2012
C
C ******************************************************************************
C
C READS MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
C==== OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GET_INFO_STREAM_RECORDS(TRABUF, GAM_STRM)
      IMPLICIT NONE
C
C INCLUDE DEFINITIONS TO READ MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C PARAMETERS DEFINITIONS TO READ MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      INTEGER * 4 GAM_STRM            ! GAME NUMBER OF MEMORY STREAM RECORDS
C
C VARIABLES DEFINITIONS TO READ MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      INTEGER * 4 STS                 ! FUNCTION STATUS
      INTEGER * 4 POINTER_DATA(3)     ! MEMORY STREAM DATA
      INTEGER * 4 POINTER_IDX         ! MEMORY STREAM DATA INDEX
      INTEGER * 4 POINTER_PRV         ! MEMORY STREAM DATA PREVIOUS INDEX
      INTEGER * 4 LUN_STRM            ! LOGICAL UNIT FOR MEMORY STREAM RECORDS
C
      INTEGER * 4 I4TEMP
      BYTE      I1TEMP(4)
      EQUIVALENCE (I4TEMP,I1TEMP)
C
      LOGICAL IS_FIRST/.TRUE./        ! FIRST TIME TO READ MEMORY STREAM DATA
C
      COMMON /STRM/ LUN_STRM
C
C INTIATE VARIABLES TO READ MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      GAM_STRM = 11  !(ORIGINAL GAME NUMBER FIXED FOR EURMIL)
C
C CHECK IF THERE ARE NO JOKER-BASED GAMES
C
      IF(LUN_STRM .EQ. -1) RETURN
C
C CHECK IF IT'S GOOD JOKER WAGER
C
      IF(TRABUF(TTYP)   .NE. TWAG) RETURN
      IF(TRABUF(TSTAT)  .NE. GOOD) RETURN
      IF(TRABUF(TGAMTYP).NE. TKIK) RETURN
C
C SAVE JOKER LINKED EXTERNAL SERIAL NUMBER AND CHECK DIGITS
C
      I4TEMP    = TRABUF(TWLNKSER)
      I1TEMP(4) = TRABUF(TWLNKCHK)
C
C SEARCH IN MEMORY STREAM RECORDS FOR THE LINKED INFO
C
      IF(IS_FIRST) THEN
        CALL SORT_GO_FIRST(LUN_STRM, STS)
        POINTER_PRV = 0  !First record starts from index 0
        IS_FIRST = .FALSE.
      ENDIF
C
      STS = 0
      POINTER_IDX = POINTER_PRV  !Start reading from saved POINTER_PRV
C
      DO WHILE(STS .EQ. 0)
        CALL FASTSET(0, POINTER_DATA, SIZEOF(POINTER_DATA)/4)                                                  
        CALL SORT_GET_INDEX(LUN_STRM, POINTER_IDX, POINTER_DATA, STS)
C
        IF(POINTER_DATA(1) .EQ. I4TEMP) THEN  !Found Joker-Based Game
          GAM_STRM = POINTER_DATA(3)
          POINTER_PRV = POINTER_IDX + 1  !Save next Base Game record index to start reading next time
          RETURN
        ENDIF
C
        IF(POINTER_DATA(2) .GT. TRABUF(TSER)) RETURN  !Not Found Joker-Based Game (next time start
C                                                     !reading again from saved POINTER_PRV)
        POINTER_IDX = POINTER_IDX + 1  !Go to next Base Game record
      ENDDO
C
C THIS IS THE END TO READ MEMORY STREAM RECORDS FOR JOKER-BASED GAMES
C
      RETURN
      END
