C
C SUBROUTINE POOLUPD2
C $Log:   GXAFXT:[GOLS]POOLUPD2.FOV  $
C  
C     Rev 1.0   17 Apr 1996 14:26:40   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C  
C     Rev 1.0   21 Jan 1993 17:20:06   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - poolsys.for **
C
C
C
C+++++++++++++++++++++++++++++++++++++++++
C
C     POOLUPD2(COMBINATION_OFFSET,GAME,ADD) ;UPDATE POOLS
C     IN:
C     COMBINATION_OFFSET   - COMBINATION NR
C     GAME                 - GAME # (INDEX)
C     ADD                  - 0 IF TO INCREMENT POOLS, -1 TO DECREMENT
C
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE POOLUPD2(CMB_OFFSET,GAME,ADD)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:POOLLTO.DEF'
C
	INTEGER*4 OFFSETX, BNK, ST, STATUS, BASE_PAGE, QUEUE
	INTEGER*4 BASE, OFFSET, FDB, INDX, ADD, GAME, CMB_OFFSET
	COMMON /QUEINDEX/ INDX
	COMMON /FDBCOM/ FDB(7)
C***  INTEGER*4 LSTQUE/0/         ;!!!!
C
	OFFSET=CMB_OFFSET
	BASE=LTPOOL_BASEOFF(GAME)
	OFFSET=BASE+OFFSET
C
	IF (ADD.LT.0) OFFSET=-OFFSET
C
	QUEUE=((ABS(OFFSET)-1)/OFFSIZE)+1  !DATA PAGE OF OFFSET
	IF (QUEUE.GT.BANKSORT+1) THEN
C***     TYPE *,IAM(),'QUEUE ',QUEUE,' OFFSET ',OFFSET,' OFFSIZE ',OFFSIZE
	   RETURN
	ENDIF
C
	BASE_PAGE=LTPOOL_PAGBASE(QUEUE)
	IF (LTPOOL_INWORD(QUEUE).EQ.4) THEN  !IF BYTE OFFSETS
	   QUEUE=(ABS(OFFSET)-1-LTPOOL_OFFSETBASE(QUEUE))/(OFFSIZE/2)
     *	         +BASE_PAGE
	ELSEIF (LTPOOL_INWORD(QUEUE).EQ.2) THEN
	   QUEUE=(ABS(OFFSET)-1-LTPOOL_OFFSETBASE(QUEUE))/(OFFSIZE/4)
     *	         +BASE_PAGE
	ENDIF
C***  IF (QUEUE.NE.LSTQUE) TYPE *,IAM(),'QUEUE,OFF ',QUEUE,OFFSET,BASE_PAGE
C*** * ,' BASE ',BASE
C***  IF (QUEUE.NE.LSTQUE) LSTQUE=QUEUE
C
	IF (QUEUE.EQ.1) THEN                     !UPDATE PAGE IN MEM
	  CALL POOLUPD(OFFSET,INDX,STATUS)     !UPDATE OF PAGE # 1
	  RETURN
	ENDIF
C
C     COMBINATIONS NOT IN MEMORY LOAD TO OTHER BANK QUEUES
C
C
	CALL ABL(OFFSET,BANK(1,QUEUE-1),ST)
	IF (ST.EQ.0) RETURN
C
C***  TYPE *,IAM(),'FULL ',QUEUE,' OFFSET ',OFFSET,BASE
	DO 20 BNK=1,BANKSORT
C***  TYPE *,IAM(),'BANK ',BNK
	  CALL RTL(OFFSETX,BANK(1,BNK),ST)
	  IF (ST.NE.2) THEN
C
C     WRITE CURRENT PAGE AND READ NEXT PAGE
C
	    CALL PAGEUPD(FDB,BNK,1)
C***  TYPE *,IAM(),'FLUSH ',BNK
10	    CONTINUE
	    CALL POOLUPD(OFFSETX,INDX,STATUS)  !UPDATE OF PAGE # BNK
	    CALL RTL(OFFSETX,BANK(1,BNK),ST)
	    IF (ST.NE.2) GOTO 10
	  ENDIF
20	CONTINUE
C***  TYPE *,IAM(),'DONE '
C
	CALL PAGEUPD(FDB,0,1)
	CALL ABL(OFFSET,BANK(1,QUEUE-1),ST)
	RETURN
	END
