C SUBROUTINE CMDMSC.FOR
C
C V03 13-JUN-2000 OXK Cleanup w/ WARNINGS=ALL
C V02 11-JUL-1991 RRB SIMPLIFY AND BULLET PROOF SWITCH COMMAND PROCESSING
C V01 04-JAN-1991 RRB RELEASED FOR VAX
C
C SUBROUTINE TO PROCESS MSC (Matrix Switch) SWITCH COMMANDS.
C
C This routine will handle assigning of previoulsy unassigned local ports,
C deassigning of previously assigned local ports, and switching from one
C local port to another (deassign one and reassign the other).
C 
C If Automatic switching is enabled, a command will be issued to the MSC
C to update the switches configuration.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE CMDMSC(TRABUF,MESS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:DESTRA.DEF'
	INCLUDE 'INCLIB:MSCCOM.DEF'
	INCLUDE 'INCLIB:MSCEVN.DEF'
	INCLUDE 'INCLIB:MSCCMDS.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XLPC.DEF'
	INCLUDE 'INCLIB:X2STMES.DEF'
	INCLUDE 'INCLIB:X2FEMES.DEF'
C
	INCLUDE '($IODEF)'
        INCLUDE '($SSDEF)'
        INCLUDE '($SYSSRVNAM)'
C
	INTEGER*4   MESS(EDLEN)                          !Input message
	INTEGER*4   CMDNUM                               !Command number
	INTEGER*4   STN                                  !Station number
	INTEGER*4   ST, STATUS		                 !Subprocess status
	INTEGER*4   PREV_LOCAL_PORT, LOCAL_PORT
        INTEGER*4   NET_PORT, PVC_CIRCUIT
	INTEGER*4   SAP_PORT
	INTEGER*4   TEMP, CONF
	INTEGER*4   MSCPARMS(MSC_MAX_PARMS)              !Parameter values
C
C ASSOCIATE WITH THE COMMON EVENT FLAG CLUSTER.
C
        STATUS=SYS$ASCEFC(%VAL(MSC_EVENTS),MSC_EVENT_NAME,0,0)
        IF(.NOT.STATUS) CALL LIB$SIGNAL(%VAL(STATUS))
C
	CMDNUM = TRABUF(TCMNUM)
C
C PROCESS SWITCH COMMANDS
C
	IF(CMDNUM.EQ.CONNECT_PORT) THEN           !SWITCH PORT
C
C OPEN LOCAL PORT CONFIGURATION FILE
C
	   CALL OPENW(1,SFNAMES(1,XLPC),4,0,0,ST)
	   CALL IOINIT(X2XLPC_FDB,1,1*256)
	   IF(ST.NE.0) THEN
	      CALL FASTSET(0,MESS(2),EDLEN-1)
	      MESS(2)=TEGEN
	      MESS(3)=3
	      CALL FASTMOV(SFNAMES(1,XLPC),MESS(4),5)
	      MESS(9)=ST
	      CALL QUEMES(MESS)
	      TRABUF(TERR)=INVL
	      GOTO 8000
	   ENDIF
C
C GET PORT SWITCH INFORMATION 
C
	   LOCAL_PORT = TRABUF(TCMDT2)
	   NET_PORT = TRABUF(TCMLIN)
           PREV_LOCAL_PORT = X2XPN_NETWORK_TO_LOCAL(NET_PORT)
	   TRABUF(TCMOLD) = PREV_LOCAL_PORT
	   TRABUF(TCMNEW) = LOCAL_PORT
C
C VALIDATE
C
	   IF(PREV_LOCAL_PORT.LT.0.OR.PREV_LOCAL_PORT.GT.X2X_LOCAL_PORTS
     *        .OR.LOCAL_PORT.LT.0.OR.LOCAL_PORT.GT.X2X_LOCAL_PORTS.OR.
     *        NET_PORT.LE.0.OR.NET_PORT.GT.X2X_NETWORK_PORTS) THEN
	      TRABUF(TERR) = INVL
	      GOTO 8000
	   ENDIF
C
C CAN'T BOTH BE ZERO
C
	   IF(PREV_LOCAL_PORT.EQ.0.AND.LOCAL_PORT.EQ.0) THEN
	      TRABUF(TERR) = INVL
	      GOTO 8000
	   ENDIF
C
C IF PREVIOUS LOCAL PORT ASSIGNED THEN DEASSIGN IN FILE.
C (MAKE SURE IT IS ASSIGNED TO THIS NETWORK PORT. IF NOT, IT MUST HAVE BEEN
C ASSIGNED DURING PREVIOUS CONNECT SO DON'T DISCONNECT)
C
	   IF(PREV_LOCAL_PORT.GT.0) THEN
	      IF(X2XPL_LOCAL_TO_NETWORK(PREV_LOCAL_PORT).EQ.NET_PORT)THEN
	         CALL READW(X2XLPC_FDB,PREV_LOCAL_PORT,X2XLPC_REC,ST)
	         IF(ST.NE.0) THEN
	            CALL MSC_FILERR(MESS,4,ST,PREV_LOCAL_PORT)
	            TRABUF(TERR)=INVL
	            GOTO 8000
	         ENDIF
	         X2XLPC_NETPORT = 0
	         X2XLPC_STATE = X2XPS_IDLE
	         CALL WRITEW(X2XLPC_FDB,PREV_LOCAL_PORT,X2XLPC_REC,ST)
	         IF(ST.NE.0) THEN
	            CALL MSC_FILERR(MESS,5,ST,PREV_LOCAL_PORT)
	            TRABUF(TERR)=INVL
	            GOTO 8000
	         ENDIF
	      ENDIF
	   ENDIF
C
C UPDATE NEW LOCAL PORT ASSIGNMENT IN FILE
C
	   IF(LOCAL_PORT.GT.0) THEN
	      CALL READW(X2XLPC_FDB,LOCAL_PORT,X2XLPC_REC,ST)
	      IF(ST.NE.0) THEN
	         CALL MSC_FILERR(MESS,4,ST,LOCAL_PORT)
	         TRABUF(TERR)=INVL
	         GOTO 8000
	      ENDIF
	      X2XLPC_NETPORT = NET_PORT
	      X2XLPC_STATE = X2XPS_IDLE
	      CALL WRITEW(X2XLPC_FDB,LOCAL_PORT,X2XLPC_REC,ST)
	      IF(ST.NE.0) THEN
	         CALL MSC_FILERR(MESS,5,ST,LOCAL_PORT)
	         TRABUF(TERR)=INVL
	         GOTO 8000
	      ENDIF
	   ENDIF
C
C PERFORM SWITCH (UPDATE MEMORY)
C
	   IF(PREV_LOCAL_PORT.GT.0) THEN
	      IF(X2XPL_LOCAL_TO_NETWORK(PREV_LOCAL_PORT).EQ.NET_PORT)THEN
	         X2XPL_LOCAL_TO_NETWORK(PREV_LOCAL_PORT) = 0
	         X2XPL_STATE(PREV_LOCAL_PORT) = X2XPS_IDLE
	      ENDIF
	   ENDIF
C
	   IF(LOCAL_PORT.GT.0) THEN
	      X2XPL_LOCAL_TO_NETWORK(LOCAL_PORT) = NET_PORT
	      X2XPL_STATE(LOCAL_PORT) = X2XPS_IDLE
	   ENDIF
C
	   X2XPN_NETWORK_TO_LOCAL(NET_PORT) = LOCAL_PORT
	   X2XPN_STATE(NET_PORT) = X2XPS_IDLE
C
C IF NOT JUST DEASSIGNING THIS PORT THEN DETERMINE THE STATION(S) 
C ASSOCIATED WITH THIS NETWORK PORT AND SOFT RESET EACH.
C (IF ANYTHING COMES IN ON THE OLD PORT IT WILL BE REJECTED WITH AN
C  INVALID STATION ADDRESS SINCE THERE WILL BE NO NETWORK PORT ASSIGNMENT
C  FOR THAT SAP_PORT,SAP. THIS WILL FORCE STATION TO SHUT UP.)
C
	   IF(LOCAL_PORT.GT.0) THEN
	      DO 200 PVC_CIRCUIT = 0,X2XPN_NUMPVC(NET_PORT)
                 STN = X2XPN_PVC_TO_STATION(NET_PORT,PVC_CIRCUIT)
	         IF(STN.LT.1.OR.STN.GT.X2X_STATIONS) GOTO 200
C
C DETERMINE NEW DSAP AND
C REBUILD FE CONNECT ID FOR EACH STATION
C
	         BX2XS_SAP(STN) = X2XPL_SAP(LOCAL_PORT) 
	         SAP_PORT = X2XPL_SAP_PORT(LOCAL_PORT)
	         CALL NSBYTE(SAP_PORT,X2XS_CONN_ID(STN),0)
	         CALL MOVBYTN(PVC_CIRCUIT,2,X2XS_CONN_ID(STN),3,2)
C
C UPDATE STATION CONFIGURATION CHECKSUM
C
	         CALL ILBYTE(TEMP,IX2XS_CONF,STN-1)
	         CONF=ISHFT(IAND(TEMP,'E0'X),-5)
	         CONF=CONF+1
	         IF(MOD(CONF,8).EQ.0) CONF=0
	         CONF=ISHFT(CONF,5)
	         TEMP=IAND(TEMP,'1F'X)+CONF
	         CALL ISBYTE(TEMP,IX2XS_CONF,STN-1)
C
C SEND SOFT RESET
C
	         CALL X2STNRES(STN)
200           CONTINUE
	   ENDIF
C
C BUILD PORT SWITCH MESSAGE FOR ERRLOG.
C
300 	   CONTINUE
	   CALL FASTSET(0,MESS(2),EDLEN-1)
	   MESS(2) = TECMD
	   MESS(3) = 2
	   MESS(8) = NET_PORT
	   MESS(9) = LOCAL_PORT
C
C IF COMMAND FOR CHANGING MSCSTS
C
	ELSE IF(CMDNUM.EQ.UPDSTS) THEN
	   TRABUF(TCMOLD) = MSCSTS
	   MSCSTS = TRABUF(TCMNEW)
	   CALL FASTSET(0,MESS(2),EDLEN-1)
	   MESS(2) = TECMD
	   MESS(3) = 2
	   MESS(8) = TRABUF(TCMOLD)
	   MESS(9) = MSCSTS
	
C
C INVALID COMMAND NUMBER
C
	ELSE
	   TRABUF(TERR) = INVL	
	ENDIF
C
C BAD COMMAND
C
8000 	CONTINUE
	IF(TRABUF(TERR).NE.NOER) THEN
	   TRABUF(TSTAT)=REJT
	   CALL FASTSET(0,MESS(2),EDLEN-1)
	   MESS(2)=TECMD
	   MESS(3)=1
	   MESS(4)=TRABUF(TCMTYP)
	   MESS(5)=CMDNUM
C
C IF NOT REPROCESSING, BUILD CONNECT COMMAND STRING AND QUE TO MSCMGR
C (ONLY IF AUTOMATIC SWITCHING IS ENABLED)
C
	ELSE IF(P(REPFLG).EQ.1.AND.CMDNUM.EQ.CONNECT_PORT.AND.
     *          MSC_AUTO_SWITCH.EQ.AUTO_SWITCH_ENABLED) THEN
	   MSCPARMS(1) = NET_PORT
	   MSCPARMS(2) = LOCAL_PORT
	   CALL BLDCMD(CMDNUM,MSCPARMS,0)
           IF(NET_PORT.GE.1.AND.NET_PORT.LE.X2X_NETWORK_PORTS)
     *        MSC_SWITCH_CNT(NET_PORT) = MSC_SWITCH_CNT(NET_PORT) + 1
	ENDIF
C
C PROGRAM EXIT.
C
	IF(CMDNUM.EQ.CONNECT_PORT) CALL CLOSEFILE(X2XLPC_FDB)
	RETURN
	END
C
C MSC_FILERR
C
C QUE FILE ACCESS ERROR TO ERRLOG
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE MSC_FILERR(MESS,ERRNUM,ST,REC)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
C
	INCLUDE '($IODEF)'
        INCLUDE '($SSDEF)'
        INCLUDE '($SYSSRVNAM)'
C
	INTEGER*4   MESS(EDLEN)                          !Input message
	INTEGER*4   ERRNUM                               !Error # for ERRLOG
	INTEGER*4   ST                                   !Error code
	INTEGER*4   REC                                  !Record number
C
	CALL FASTSET(0,MESS(2),EDLEN-1)
C
	MESS(2)=TEGEN
	MESS(3)=ERRNUM
	CALL FASTMOV(SFNAMES(1,XLPC),MESS(4),5)
	MESS(8) = ST
	MESS(9) = REC
	CALL QUEMES(MESS)
	RETURN
	END
