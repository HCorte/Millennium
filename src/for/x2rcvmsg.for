C
C SUBROUTINE X2RCVMSG
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2RCVMSG.FOV                                 $
C  $Date::   17 Apr 1996 16:29:22                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - x2rcvbuf.for;1 **
C
C
C
C
C
C     GET MESSAGE FROM THE BUFFER
C
C X2RCVMSG(BUFFER,MESSAGE,MESSAGE_LEN,TERMINAL_NO,STATION_NO,
C          CURRENT_POINTER,BUF_SSAP,BUF_DSAP,BUF_LEN,DEST_LAYER,
C          HOST_ID,ST)
C
C  IN:
C     BUFFER         -     BUFFER WITH DATA, POINTED TO DATA AREA
C     CURRENT_POINT  -     POINTER TO NEXT MESSAGE, SET TO 0 FOR
C                          NEW BLOCK OF DATA (BYTE POINTER)
C                          SHOULD BE SET TO 0 FOR NEW BUFF WITH
C                          DATA
C     BUF_DSAP       -     DESTINATION_SAP
C     BUF_SSAP       -     SOURCE SAP
C     BUF_LEN        -     LENGTH OF DATA AREA
C
C  OUT:
C     MESSAGE        -     MESSAGE DATA, SET ONLY FOR DATA MESSAGES
C                          (STATUS=0), PORT REQUEST MESSAGES (STATUS=
C                           X2ERR_PORTREQ) AND VALIDATION REQUEST
C                          (STATUS=X2ERR_VALREQ)
C     MESSAGE_LEN    -     LENGTH OF MESSAGE, 0 IF MESSAGE NOT USED
C     TERMINAL_NUMBER-     TERMINAL ORIGINATED, -1 IF NO TERM MESS
C     STATION_NO     -     STATION NUMBER IT CAME FROM
C     CURRENT_POINTER-     UPDATED FOR NEXT MESSAGE IN THE BUFFER
C                          IN BYTES, SET TO -1 IF NO MORE MESSAGES
C                          IN THE BUFFER
C     DEST_LAYER     -     BIT MASK OF LAYERS PROCESSED
C     HOST_ID        -     HOST_ID FIELD FROM FE LAYER
C     STATUS         -     .NON.0 IF NO MESSAGE
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2RCVMSG(BUFFER,MESSAGE,MESSAGE_LEN
     *	          ,TERMINAL_NO,STATION_NO,CURRENT_POINTER,
     *	           BUF_SSAP,BUF_DSAP,BUF_LEN,DEST_LAYER,HOST_ID,STATUS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2PTLMES.DEF'
C
	INCLUDE 'INCLIB:X2STMES.DEF'
	INCLUDE 'INCLIB:X2TDBH.DEF'
	INCLUDE 'INCLIB:X2FEMES.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
C
	INTEGER*2 MESSAGE(*)      !MESSAGE
	BYTE      BUFFER(0:*)     !ELIMINATE ILBYTE AND ISBYTE
	INTEGER*4 TERMINAL_NO,CURRENT_POINTER,STATUS
	INTEGER*4 MESSAGE_LEN
	INTEGER*4 BUF_SSAP,BUF_DSAP,BUF_LEN
	INTEGER*4 OFFSET,CAPACITY, SAP_CONF, FE_ID, DATA_OFFSET
	INTEGER*4 BLOCK_TYPE, FLAGS, BLOCK_SIZE, SSAP
	INTEGER*4 DSAP, RECV_SEQ, HEADER, MSG_COUNT, CURRENT_MESSAGE
	INTEGER*4 HOST_ID, DEST_LAYER, STATION_NO
	DATA      CURRENT_MESSAGE /0/
	DATA      MSG_COUNT / 0/
C
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	    TYPE *,'X2RCVMSG ',CURRENT_POINTER,BUF_SSAP,BUF_DSAP
	TERMINAL_NO=-1
	DEST_LAYER=X2DEST_TRANSPORT
	STATION_NO=-1
	MESSAGE_LEN=0
	HOST_ID=0
	IF (CURRENT_POINTER.LE.0) THEN       !INITIALIZATION
	   CALL NMOV4TOI4(HEADER,BUFFER,X2TDBH_BLKCHK-1) !'TDBH'
	   IF (HEADER.NE.X2TDBH_TDBH) THEN
	      STATUS=X2ERR_FATAL+X2ERR_TDBH    !INVALID HEADER
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	         TYPE *,'RETURN X2RCVMSG 1: ',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
C
	   X2XE_TIME(BUF_SSAP)=X2X_SYSTIM
	   X2XE_CNT_RCV_BLK(BUF_SSAP)=X2XE_CNT_RCV_BLK(BUF_SSAP)+1
C
C
C     CHECK BUFFER SEQUENCE #
C
	   CALL MOV2TOI4(RECV_SEQ,BUFFER,X2TDBH_BLKSEQ-1) !RCV SEQ
	   IF (RECV_SEQ.NE.X2XE_SEQ_RECV(BUF_SSAP)) THEN
	      CALL X2ERROR(X2ERR_SEQ,BUF_SSAP,RECV_SEQ,
     *	                 X2XE_SEQ_RECV(BUF_SSAP))
	      X2XE_CNT_ERR(BUF_SSAP)=X2XE_CNT_ERR(BUF_SSAP)+1
	   ENDIF
	   X2XE_SEQ_RECV(BUF_SSAP)=MOD(RECV_SEQ+1,256)
C
C     CHECK DSAP NOW
C
	   DSAP = ZEXT (BUFFER(X2TDBH_DSAP-1))             !DEST SAP
	   IF (DSAP.NE.BUF_DSAP) THEN
	      STATUS=X2ERR_FATAL+X2ERR_SAP
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVMSG 2: ',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
C
C     CHECK SSAP NOW
C
	   SSAP = ZEXT (BUFFER(X2TDBH_SSAP-1))             !SOURCE SAP
	   IF (SSAP.NE.BUF_SSAP) THEN
	      STATUS=X2ERR_FATAL+X2ERR_SAP
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVMSG 3: ',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
C
	   IF (DSAP.NE.X2X_GAME_SAP)  THEN
	      STATUS=X2ERR_FATAL+X2ERR_SAP
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	        TYPE *,'RETURN X2RCVMSG 4: ',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
C
	   CALL MOV2TOI4(BLOCK_SIZE,BUFFER,X2TDBH_BLKSIZ-1)!SIZE
	   IF (BLOCK_SIZE.NE.BUF_LEN) THEN
C*****
	      TYPE *,'BLOCK SIZE:  ',BLOCK_SIZE,' BUF LEN:  ',BUF_LEN
C*****
	      STATUS=X2ERR_FATAL+X2ERR_LEN
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	         TYPE *,'RETURN X2RCVMSG 5: ',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
	   FLAGS = ZEXT (BUFFER(X2TDBH_FLAGS-1))               !FLAGS
	   CALL X2CHKFLG(BUF_SSAP,FLAGS,STATUS)                !CHECK FLAGS
	   IF (STATUS.NE.0) THEN
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVMSG 6: ',X2X_PTLMES(STATUS),' F ',FLAGS
	      RETURN
	   ENDIF
C
	   BLOCK_TYPE = ZEXT (BUFFER(X2TDBH_BLKTYP-1))         !TYPE
	   DATA_OFFSET = ZEXT (BUFFER(X2TDBH_DATAOFF-1))
	   MSG_COUNT = ZEXT (BUFFER(X2TDBH_MSGCNT-1))          !MSG CNT
	   FE_ID = ZEXT (BUFFER(X2TDBH_FE_ID-1))               !FRONT END ID
	   IF(X2XE_FE_ID(BUF_SSAP).EQ.0) X2XE_FE_ID(BUF_SSAP)=FE_ID
	   IF (X2XE_FE_ID(BUF_SSAP).NE.FE_ID)   THEN
	     CALL X2ERROR(X2ERR_FE,BUF_SSAP,FE_ID,
     *	          X2XE_FE_ID(BUF_SSAP))
	      X2XE_FE_ID(BUF_SSAP)=FE_ID
	   ENDIF
	   SAP_CONF = ZEXT (BUFFER(X2TDBH_CNFSUM-1))           !IGNORE
	   CALL MOV4TOI4(CAPACITY,BUFFER,X2TDBH_FEAV-1)
	   X2XE_CAPACITY(BUF_SSAP)=CAPACITY
	   IF (BLOCK_TYPE.NE.X2TDBHT_DATA) THEN
	      CALL X2TDCMD(BLOCK_TYPE,BUF_SSAP,STATUS)
	      IF (STATUS.EQ.X2ERR_TDBH_CMD_MAINTENANCE)
     *	       CALL X2MNTNCE(BUFFER((((DATA_OFFSET+1)/2)*2)-2),BUF_SSAP)
	      CURRENT_POINTER=-1
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	         TYPE *,'RETURN X2RCVMSG  7:',X2X_PTLMES(STATUS)
	      RETURN
	   ENDIF
C
	   CURRENT_MESSAGE=0
	   CURRENT_POINTER=DATA_OFFSET
	ENDIF
C
	CURRENT_MESSAGE=CURRENT_MESSAGE+1
	IF (CURRENT_MESSAGE.GT.MSG_COUNT) THEN
	   CURRENT_POINTER=-1
	   STATUS=X2ERR_NOMORE              !NO MORE DATA
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVMSG 8: ',X2X_PTLMES(STATUS)
	   RETURN
	ENDIF
	IF (CURRENT_POINTER-BUF_LEN.GE.0) THEN
	   STATUS=X2ERR_NOMORE              !NO MORE DATA
	   CURRENT_POINTER=-1
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVMSG 9: ',X2X_PTLMES(STATUS)
	   RETURN
	ENDIF
C
C     PROCESS MESSAGE NOW
C
	OFFSET=(((CURRENT_POINTER+1)/2)*2)-2
	CALL X2RCVFE(BUFFER(OFFSET),MESSAGE,MESSAGE_LEN,TERMINAL_NO,
     *	 STATION_NO,CURRENT_POINTER,BUF_SSAP,DEST_LAYER,HOST_ID,STATUS)
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	   TYPE *,'LEAVING X2RCVMSG ',CURRENT_POINTER,DEST_LAYER,
     *	          TERMINAL_NO,STATION_NO,MESSAGE_LEN,X2X_PTLMES(STATUS)
	RETURN
	END
