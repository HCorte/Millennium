C SUBROUTINE INTGAM
C
C V38 01-JAN-2010 FJG ePassive
C V37 02-MAR-2001 UXN Hardcoded game type names removed
C V36 15-DEC-2001 CS  INCLUDED PASSIVE GAME
C V35 29-NOV-2000 UXN TTGL ADDED.
C V34 26-JUL-2000 UXN Vakio 1 & Joker on Sunday commented out (it is used
C                     only in Finland)
C V33 22-MAR-2000 OXK Use SPTESD, not SPTDAT for Vakio
C V32 10-mar-2000 OXK Check Vakio 1 & Joker on Sundays
C V31 18-FEB-2000 OXK DRAW # as a parameter (Vakio changes)
C V30 27-JAN-2000 OXK SPT_PRZDRW added, (GIND.EQ.1) removed (Vakio changes)
C V29 13-OCT-1999 RXK World Tour added.
C V28 14-MAY-1999 UXN Super Triple added.
C V27 18-FEB-1999 UXN PELISUOMI CHANGED BACK TO SPEDEN
C V26 14-JAN-1999 UXN PeliSuomi changes.
C V25 30-JUL-1998 RXK Added table for old kicker (using numkik+1)
C V24 12-JAN-1998 RXK Super Score and Today's Triple added.
C V23 08-JUL-1997 UXN Added initialization of V65HOR
C V22 10-NOV-1995 HXK Further changes for Double, Couple
C V21 26-JUN-1995 HXK Changes for RAVI modification, mainly QPs, alternatives,
C                      screening and prognosis
C V20 06-MAY-1995 HXK Changed text for screening from V65 to generic RAVI
C V19 24-APR-1995 HXK Merge of V5 development with March 10th 1995 bible
C V18 21-FEB-1995 HXK Generalised for n games (PXB)
C V17 05-DEC-1994 HXK Merging from 25-Nov -> 5 Dec
C V16 30-NOV-1994 HXK Changed PRZCOM for Bingo
C V15 19-OCT-1994 HXK Fix for DBNSHV
C V14 15-OCT-1994 HXK Adding /developing Bingo (15.Oct.94)
C V13 07-OCT-1993 HXK equivalenced screen records and commons
C V12 25-AUG-1993 SXH REALLY FIXED PRIZE PROBLEM
C V11 25-AUG-1993 SXH FIXED BUG WITH 100 PRIZE DRAWS
C V10 17-AUG-1993 HXK added IAM() to all TYPE* usage
C V09 16-AUG-1993 GXA Added Loading of PRZCOM for Lotto, Sports, Spede,
C                      Kicker and Ravi games
C V08 12-AUG-1993 SXH Restored SPORTS SYSTEMS EQUIVALENCE statement
C V07 12-AUG-1993 HXK INTERIM FIX FOR SSFREC,SPSATR EQUIVALENCE PROBLEM
C V06 29-JUL-1993 JWE fixed file ioinit length bug for stats file.
C V05 16-JUL-1993 HXK ADDED VAKIO STATS MATCH LIST
C V04 24-JUN-1993 GXA Display Kicker Seed and removed LODTXT from Speden game.
C V03 16-JUN-1993 SXH Added Speden and Ravi (V65)
C V03 26-JUN-1992 GCAN CHANGED DRAW DATE DEPENDANCY TO SET CLOSING TIME TO
C                      ENDING SALES DATE FOR WIN TIP AND SCORE.
C V02 07-OCT-1991 MTK INITAL RELEASE FOR NETHERLANDS
C V01 01-AUG-1990 XXX RELEASED FOR VAX
C
C SUBROUTINE TO INITIALIZE GAME COMMONS FOR RESET
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXT
        SUBROUTINE INTGAM(GAM,DRAW)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'

        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:LTOCOM.DEF'
        INCLUDE 'INCLIB:SPTCOM.DEF'
        INCLUDE 'INCLIB:TGLCOM.DEF'
        INCLUDE 'INCLIB:KIKCOM.DEF'
C        INCLUDE 'INCLIB:NBRCOM.DEF'
        INCLUDE 'INCLIB:WITCOM.DEF'
        INCLUDE 'INCLIB:SCRCOM.DEF'
        INCLUDE 'INCLIB:TSLCOM.DEF'
        INCLUDE 'INCLIB:BNGCOM.DEF'
        INCLUDE 'INCLIB:DBLCOM.DEF'
        INCLUDE 'INCLIB:CPLCOM.DEF'
!       INCLUDE 'INCLIB:PASCOM.DEF'
        INCLUDE 'INCLIB:DLTREC.DEF'
        INCLUDE 'INCLIB:DSPREC.DEF'
C        INCLUDE 'INCLIB:DNBREC.DEF'
        INCLUDE 'INCLIB:DWIREC.DEF'
        INCLUDE 'INCLIB:DSCREC.DEF'
        INCLUDE 'INCLIB:DTSREC.DEF'
        INCLUDE 'INCLIB:DKKREC.DEF'
        INCLUDE 'INCLIB:DBNREC.DEF'
        INCLUDE 'INCLIB:DDBREC.DEF'
        INCLUDE 'INCLIB:DCPREC.DEF'
        INCLUDE 'INCLIB:RECSSF.DEF'
        INCLUDE 'INCLIB:RECTGSF.DEF'
        INCLUDE 'INCLIB:RECDAF.DEF'
C        INCLUDE 'INCLIB:POLCOM.DEF'
        INCLUDE 'INCLIB:DATBUF.DEF'
        INCLUDE 'INCLIB:GTNAMES.DEF'
        INCLUDE 'INCLIB:LSYSCOM.DEF'
        INCLUDE 'INCLIB:RECSTF.DEF'
        INCLUDE 'INCLIB:STACOM.DEF'
        INCLUDE 'INCLIB:PRZCOM.DEF'
        INCLUDE 'INCLIB:DSSREC.DEF'
        INCLUDE 'INCLIB:DTRREC.DEF'
        INCLUDE 'INCLIB:SSCCOM.DEF'
        INCLUDE 'INCLIB:TRPCOM.DEF'
        INCLUDE 'INCLIB:STRCOM.DEF'
        INCLUDE 'INCLIB:DSTREC.DEF'
        INCLUDE 'INCLIB:DTGREC.DEF'
!       INCLUDE 'INCLIB:DPAREC.DEF'
        INCLUDE 'INCLIB:STANDARD.DEF'
C
C
        ! argument
        INTEGER*4  GAM                    !
!       INTEGER*4  DRAW_REQ               !
!       INTEGER*4  PASOFF

        ! variables
        INTEGER*4  FDB(7)                 !
        INTEGER*4  IND                    !
        INTEGER*4  I                      !
        INTEGER*4  J                      !
        INTEGER*4  K                      !
        INTEGER*4  ST                     !
        INTEGER*4  GIND                   !
        INTEGER*4  GTYP                   !
        INTEGER*4  DRAW                   !
        INTEGER*4  LTSINT                 !
        INTEGER*4  SPSINT                 !
        INTEGER*4  TGSINT                 !
        INTEGER*4  WOFF                   !
        INTEGER*4  SHRV                   !Share Value for PRZCOM update.
        INTEGER*4  ROWTOT
C	INTEGER*4  KNUM, KIND

        REAL*4     RROWTOT

        INTEGER*2  DATE(12)               !

        EQUIVALENCE (DLTREC,DSPREC,DKKREC,DWIREC,DTSREC,DSCREC,
     *               DBNREC,DDBREC,DCPREC,DSSREC,DTRREC,DTGREC)
!     *               DPAREC)

        EQUIVALENCE (SSFREC,SPSATR)
        EQUIVALENCE (TGSFREC,TGSFSF)

        INTEGER*4   I4TEMP
        INTEGER*2   I2TEMP(2)
        BYTE        I1TEMP(4)
        EQUIVALENCE (I4TEMP,I2TEMP,I1TEMP)

        DATA SPSINT/0/
        DATA TGSINT/0/
        DATA LTSINT/0/
C
C
        GTYP = GNTTAB(GAMTYP,GAM)
        GIND = GNTTAB(GAMIDX,GAM)
C       DRAW = DRAW_REQ

        IF(GTYP.EQ.TLTO) GOTO  1000
        IF(GTYP.EQ.TSPT) GOTO  2000
        IF(GTYP.EQ.TKIK) GOTO  3000
        IF(GTYP.EQ.TNBR) GOTO  4000
        IF(GTYP.EQ.TSCR) GOTO  5000
        IF(GTYP.EQ.TWIT) GOTO  6000
        IF(GTYP.EQ.TTSL) GOTO  7000
        IF(GTYP.EQ.TTGL) GOTO  8000
        IF(GTYP.EQ.TBNG) GOTO 10000
        IF(GTYP.EQ.TDBL) GOTO 11000
        IF(GTYP.EQ.TCPL) GOTO 12000
        IF(GTYP.EQ.TSSC) GOTO 13000
        IF(GTYP.EQ.TTRP) GOTO 14000
        IF(GTYP.EQ.TSTR) GOTO 15000
        IF(GTYP.EQ.TPAS) GOTO 16000

        RETURN
C
C LOTTO GAMES
C
1000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DLTSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF

        WRITE(6,900) IAM(),GAM,GTNAMES(TLTO),GIND
        CALL READW(FDB,DRAW,DLTREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DLTREC,LTOBLK)
        IF (LTOTIM(GIND) .GE. '40000000'X) THEN
            LTOTIM(GIND) = LTOTIM(GIND) - '40000000'X
        ENDIF

        IF(LTOSTS(GIND).NE.GAMOPN.OR.
     *     LTOTIM(GIND).EQ.0.OR.
     *     LTOESD(GIND).NE.DAYCDC)
     *     LTOTIM(GIND) = LTOTIM(GIND) + '40000000'X
        IF(LTOSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,LTOSTS(GIND)
        IF(LTOBDR(GIND)   .NE.0) WRITE(6,912) IAM(),GAM
C
C STORE LAST 100 SHARE VALUES AND DRAW DATES TABLES IN PRZCOM.
C
        DRAW = DAYHDR(GAM)
        DO I = DRAW, DRAW-(PRZDRW-1), -1
           IF(I.GT.0) THEN
              CALL READW(FDB,I,DLTREC,ST)
              IF(ST.NE.0) THEN
                 CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
                 RETURN
              ENDIF
C
              IND = DRAW - I + 1
              CALL FASTMOV(DLTSHV,LPZSHV(1,1,IND,GIND),LTGDIV*2)
C
C DETERMINE IF SHARE VALUES HAVE BEEN SET FOR A GIVEN DRAW
C
              SHRV = 0
              DO K = 1,LTGDIV
                 SHRV = SHRV + DLTSHV(K,1)
              END DO
C
C IF SHARE VALUES HAVE NOT BEEN SET TO THEIR FINAL VALUES
C THEN SET SHARE VALUES IN PRZCOM TO -1, TO INDICATE
C THAT THE DRAW HAS BEEN POSTPONED, (NO POOL UPDATING UNTILL THE
C FINAL SHARE VALUES HAVE BEEN SET AND POOLBLD RUN FROM WINUPD).
C
              IF(((SHRV.EQ.0.AND.DLTSTS.EQ.GAMBFD).OR.
     *           (DLTSTS.EQ.GAMENV)).AND.IND.GT.1) THEN
                 DO K = 1,LTGDIV
                    LPZSHV(K,1,IND,GIND) = -1
                 END DO
              ENDIF
C
              LPZDAT(IND,GIND) = DLTDAT(CURDRW)
           ENDIF
        END DO
        CALL CLOSEFIL(FDB)
C
C LOAD LOTTO SYSTEM COMMON
C
        IF(LTSINT.EQ.0) THEN
            WRITE(6,971) IAM(),GTNAMES(TLTO)
            CALL OPENQW(3,SFNAMES(1,LSF),4,0,0,ST)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,LSF),1,ST,0)
            CALL IOQINIT(FDB,3,1*256)
            CALL READQIO(FDB,1,LSYS_ATR,LSYS_COMMON_LENGTH*4,ST)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,LSF),2,ST,1)
            CALL CLOSEQFIL(FDB)
            LTSINT=-1
        ENDIF
C
C SET WEDNESDAY (NOT SATURDAY) DRAW DATE TABLE
C
        WOFF=0
        DO 1010 I = 1, DATLEN
            DATE(VCDC)=LTODAT(I,GIND)
            CALL CDATE(DATE)
            IF(DATE(VDOW).NE.SATURDAY) THEN
                WOFF=WOFF+1
                LTOWED(WOFF,GIND)=LTODAT(I,GIND)
                IF(WOFF.GE.2) GOTO 1020
            ENDIF
1010    CONTINUE
1020    CONTINUE

        RETURN
C
C SPORTS GAMES
C
2000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DSPSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF

        WRITE(6,900) IAM(),GAM,GTNAMES(TSPT),GIND
        CALL READW(FDB,DRAW,DSPREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DSPREC,SPTBLK)
        IF (SPTTIM(GIND) .GE. '40000000'X) THEN
            SPTTIM(GIND) = SPTTIM(GIND) - '40000000'X
        ENDIF

        IF(SPTSTS(GIND).NE.GAMOPN.OR.
     *     SPTTIM(GIND).EQ.0.OR.
     *     SPTESD(GIND).NE.DAYCDC)
     *     SPTTIM(GIND) = SPTTIM(GIND) + '40000000'X
        IF(SPTSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,SPTSTS(GIND)
C
C STORE LAST SPT_PRZDRW SHARE VALUES AND DRAW DATES TABLES IN PRZCOM.
C
        DRAW = DAYHDR(GAM)
        DO I = DRAW, DRAW-(PRZDRW-1), -1
           IF(I.GT.0) THEN
              CALL READW(FDB,I,DSPREC,ST)
              IF(ST.NE.0) THEN
                 CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
                 RETURN
              ENDIF
C
              IND = DRAW - I + 1
              CALL FASTMOV(DSPSHV,SPZSHV(1,IND,GIND),SPGDIV)
C
C DETERMINE IF SHARE VALUES HAVE BEEN SET FOR A GIVEN DRAW
C
              SHRV = 0
              DO K = 1,SPGDIV
                 SHRV = SHRV + DSPSHV(K)
              END DO
C
C IF SHARE VALUES HAVE NOT BEEN SET TO THEIR FINAL VALUES
C THEN SET SHARE VALUES IN PRZCOM TO -1, TO INDICATE
C THAT THE DRAW HAS BEEN POSTPONED, (NO POOL UPDATING UNTILL THE
C FINAL SHARE VALUES HAVE BEEN SET AND POOLBLD RUN FROM WINUPD).
C
              IF(((SHRV.EQ.0.AND.DSPSTS.EQ.GAMBFD).OR.
     *           (DSPSTS.EQ.GAMENV)).AND.IND.GT.1) THEN
                 DO K = 1,SPGDIV
                    SPZSHV(K,IND,GIND) = -1
                 END DO
              ENDIF
C
              SPZDAT(IND,GIND) = DSPDAT(CURDRW)
              CALL FASTMOV(DSPMAT,SPZMAT(1,IND,GIND),SPGDIV)
           ENDIF
        END DO
        CALL CLOSEFIL(FDB)
C
C LOAD SPORTS SYSTEM COMMON
C
        IF(SPSINT.EQ.0) THEN
            WRITE(6,971) IAM(),GTNAMES(TSPT)
            CALL OPENQW(3,SFNAMES(1,SSF),4,0,0,ST)
            CALL IOQINIT(FDB,3,1*256)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,SSF),1,ST,0)
            CALL READQIO(FDB,1,SSFREC,SSFSEC*256,ST)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,SSF),2,ST,1)
            CALL CLOSEQFIL(FDB)
            SPSINT=-1
        ENDIF
C
C LOAD SPORTS STATS TABLE FILE
C
CV30	IF (GIND.EQ.1) THEN
        WRITE(6,961) IAM(),GTNAMES(TSPT)
        CALL OPENW(3,SFNAMES(1,STF),4,0,0,ST)
        CALL IOINIT(FDB,3,STFSEC*256)
        IF(ST.NE.0) CALL FILERR(SFNAMES(1,STF),1,ST,0)
        CALL READW(FDB,1,STFREC,ST)
        IF(ST.NE.0) CALL FILERR(SFNAMES(1,STF),2,ST,1)
        CALL CLOSEFIL(FDB)
        STASPT_CUP(GIND)=STFSPT_CUP(GIND)

        ROWTOT=0
        DO K=1,3
           ROWTOT=ROWTOT+STFSPT_TAB2(1,K,GIND)
        ENDDO
        IF(ROWTOT.EQ.0) ROWTOT=1
        RROWTOT=FLOAT(ROWTOT)
        SPSVER(GIND)=1
        SPSUPT(GIND)=P(ACTTIM)

        DO I=1,SPGNBR
          DO J=1,7
            STASPT_TAB1(I,J,GIND)=STFSPT_TAB1(I,J,GIND)
          ENDDO
          DO K=1,3
            STASPT_TAB2(I,K,GIND)=STFSPT_TAB2(I,K,GIND)
            SPSROP(I,K,GIND)=
     *         JNINT(1.E4*FLOAT(STFSPT_TAB2(I,K,GIND))/RROWTOT)
          ENDDO
        ENDDO
CV30	ENDIF

	IF (DAYDRW(GAM).GT.0) CALL LODTXT(GAM)

        RETURN
C
C KICKER GAMES
C
3000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DKKSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF

        WRITE(6,900)IAM(),GAM,GTNAMES(TKIK),GIND
        CALL READW(FDB,DRAW,DKKREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DKKREC,KIKBLK)
        IF (KIKTIM(GIND) .GE. '40000000'X) THEN
            KIKTIM(GIND) = KIKTIM(GIND) - '40000000'X
        ENDIF

        IF(KIKSTS(GIND).NE.GAMOPN.OR.
     *     KIKTIM(GIND).EQ.0.OR.
     *     KIKESD(GIND).NE.DAYCDC)
     *     KIKTIM(GIND) = KIKTIM(GIND) + '40000000'X
        IF(KIKSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,KIKSTS(GIND)
C
C DISPLAY KICKER NUMBER SEED
C
        WRITE(6,920) IAM(),KIKSED(1,GIND)
C
C
C STORE LAST 100 SHARE VALUES AND DRAW DATES TABLES IN PRZCOM.
C
        DRAW = DAYHDR(GAM)
        DO I = DRAW, DRAW-(PRZDRW-1), -1
           IF(I.GT.0) THEN
              CALL READW(FDB,I,DKKREC,ST)
              IF(ST.NE.0) THEN
                 CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
                 RETURN
              ENDIF
C
              IND = DRAW - I + 1
              CALL FASTMOV(DKKSHV, KPZSHV(1,IND,GIND),KIGDIV)
C
C DETERMINE IF SHARE VALUES HAVE BEEN SET FOR A GIVEN DRAW
C
              SHRV = 0
              DO K = 1,KIGDIV
                 SHRV = SHRV + DKKSHV(K)
              END DO
C
C IF SHARE VALUES HAVE NOT BEEN SET TO THEIR FINAL VALUES
C THEN SET SHARE VALUES IN PRZCOM TO -1, TO INDICATE
C THAT THE DRAW HAS BEEN POSTPONED, (NO POOL UPDATING UNTILL THE
C FINAL SHARE VALUES HAVE BEEN SET AND POOLBLD RUN FROM WINUPD).
C
              IF(((SHRV.EQ.0.AND.DKKSTS.EQ.GAMBFD).OR.
     *           (DKKSTS.EQ.GAMENV)).AND.IND.GT.1) THEN
                 DO K = 1,KIGDIV
                    KPZSHV(K,IND,GIND) = -1
                 END DO
              ENDIF
C
              KPZDAT(IND,GIND) = DKKDAT(CURDRW)
           ENDIF
        END DO
        CALL CLOSEFIL(FDB)
C
C LOAD STATISTICS FOR JOKERI GAME
C
        WRITE(6,961) IAM(),GTNAMES(TKIK)
        CALL OPENW(3,SFNAMES(1,STF),4,0,0,ST)
        CALL IOINIT(FDB,3,STFSEC*256)
        IF(ST.NE.0) CALL FILERR(SFNAMES(1,STF),1,ST,0)
        CALL READW(FDB,1,STFREC,ST)
        IF(ST.NE.0) CALL FILERR(SFNAMES(1,STF),2,ST,1)
        CALL FASTMOV(STFKIK,STAKIK,2*MAXGAM)
        CALL CLOSEFIL(FDB)
        RETURN
C
C NUMBERS GAMES
C
4000    CONTINUE
C        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
C        CALL IOINIT(FDB,3,DNBSEC*256)
C        IF(ST.NE.0) THEN
C            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
C            RETURN
C        ENDIF
C
C        WRITE(6,900) IAM(),GAM,GTNAMES(TNBR),GIND
C        CALL READW(FDB,DRAW,DNBREC,ST)
C        IF(ST.NE.0) THEN
C            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
C            RETURN
C        ENDIF
C
C        CALL LOGGAM(GTYP,GIND,DNBREC,NBRBLK)
C        IF (NBRTIM(GIND) .GE. '40000000'X) THEN
C            NBRTIM(GIND) = NBRTIM(GIND) - '40000000'X
C        ENDIF
C
C        IF(NBRSTS(GIND).NE.GAMOPN.OR.
C     *     NBRTIM(GIND).EQ.0.OR.
C     *     NBRDAT(CURDRW,GIND).NE.DAYCDC)
C     *     NBRTIM(GIND) = NBRTIM(GIND) + '40000000'X
C        IF(NBRSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,NBRSTS(GIND)
C        CALL CLOSEFIL(FDB)
C
C INITIALIZE POOL COMMON
C
C        IF(NBRINT.EQ.0) THEN
C            CALL POLINT
C            NBRINT=-1
C        ENDIF
C
C        RETURN
C
C SCORE GAMES
C
5000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DSCSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TSCR),GIND
        CALL READW(FDB,DRAW,DSCREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DSCREC,SCRBLK)

        IF (SCRTIM(GIND) .GE. '40000000'X) THEN
            SCRTIM(GIND) = SCRTIM(GIND) - '40000000'X
        ENDIF

        IF(SCRSTS(GIND).NE.GAMOPN.OR.
     *     SCRTIM(GIND).EQ.0.OR.
     *     SCRESD(GIND).NE.DAYCDC)
     *     SCRTIM(GIND) = SCRTIM(GIND) + '40000000'X
        IF(SCRSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,SCRSTS(GIND)
        IF(SCRPFN(1,GIND).EQ.'    ') CALL SYSVOL(SCRPFN(1,GIND))

        CALL CLOSEFIL(FDB)

        CALL LSPOOL(GAM)
        CALL LODTXT(GAM)

        RETURN
C
C WINNERS TIP GAMES
C
6000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DWISEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TWIT),GIND
        CALL READW(FDB,DRAW,DWIREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DWIREC,WITBLK)
        IF (WITTIM(GIND) .GE. '40000000'X) THEN
            WITTIM(GIND) = WITTIM(GIND) - '40000000'X
        ENDIF
        IF(WITSTS(GIND).NE.GAMOPN.OR.
     *     WITTIM(GIND).EQ.0.OR.
     *     WITESD(GIND).NE.DAYCDC)
     *     WITTIM(GIND) = WITTIM(GIND) + '40000000'X
        IF(WITSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,WITSTS(GIND)
        IF(WITPFN(1,GIND).EQ.'    ') CALL SYSVOL(WITPFN(1,GIND))
C
C LOAD WINNERS TIP POOL
C
        DO 6010 I=1,MAXWRW
            WTPOOL(I,WPAMNT,WPDYNM,GIND) = DWISBR(I)
6010    CONTINUE

        CALL CLOSEFIL(FDB)

        CALL LODTXT(GAM)

        RETURN
C
C TOTO SELECT GAMES
C
7000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DTSSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TTSL),GIND
        CALL READW(FDB,DRAW,DTSREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DTSREC,TSLBLK)
        DO 7010 I=1,MAXSRW
            IF (TSLTIM(I,GIND) .GE. '40000000'X) THEN
                TSLTIM(I,GIND) = TSLTIM(I,GIND) - '40000000'X
            ENDIF

            IF(TSLSTA(I,GIND).NE.GAMOPN.OR.
     *        TSLTIM(I,GIND).EQ.0.OR.
     *        TSLDAT(I,GIND).NE.DAYCDC)
     *        TSLTIM(I,GIND) = TSLTIM(I,GIND) + '40000000'X
7010    CONTINUE

        IF(TSLPFN(1,GIND).EQ.'    ') CALL SYSVOL(TSLPFN(1,GIND))
        IF(TSLSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,TSLSTS(GIND)

        CALL CLOSEFIL(FDB)

        CALL RESTSP(GAM)
        CALL LODTXT(GAM)

        RETURN
C
C TOTOGOLA GAMES
C
8000    CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DTGSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF

        WRITE(6,900) IAM(),GAM,GTNAMES(TTGL),GIND
        CALL READW(FDB,DRAW,DTGREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DTGREC,TGLBLK)
        IF (TGLTIM(GIND) .GE. '40000000'X) THEN
            TGLTIM(GIND) = TGLTIM(GIND) - '40000000'X
        ENDIF

        IF(TGLSTS(GIND).NE.GAMOPN.OR.
     *     TGLTIM(GIND).EQ.0.OR.
     *     TGLESD(GIND).NE.DAYCDC)
     *     TGLTIM(GIND) = TGLTIM(GIND) + '40000000'X
        IF(TGLSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,TGLSTS(GIND)
C
C STORE LAST PRZDRW SHARE VALUES AND DRAW DATES TABLES IN PRZCOM.
C
        DRAW = DAYHDR(GAM)
        DO I = DRAW, DRAW-(PRZDRW-1), -1
           IF(I.GT.0) THEN
              CALL READW(FDB,I,DTGREC,ST)
              IF(ST.NE.0) THEN
                 CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
                 RETURN
              ENDIF
C
              IND = DRAW - I + 1
              CALL FASTMOV(DTGSHV,TGZSHV(1,IND,GIND),TGGDIV)
C
C DETERMINE IF SHARE VALUES HAVE BEEN SET FOR A GIVEN DRAW
C
              SHRV = 0
              DO K = 1,TGGDIV
                 SHRV = SHRV + DTGSHV(K)
              END DO
C
C IF SHARE VALUES HAVE NOT BEEN SET TO THEIR FINAL VALUES
C THEN SET SHARE VALUES IN PRZCOM TO -1, TO INDICATE
C THAT THE DRAW HAS BEEN POSTPONED, (NO POOL UPDATING UNTILL THE
C FINAL SHARE VALUES HAVE BEEN SET AND POOLBLD RUN FROM WINUPD).
C
              IF(((SHRV.EQ.0.AND.DTGSTS.EQ.GAMBFD).OR.
     *           (DTGSTS.EQ.GAMENV)).AND.IND.GT.1) THEN
                 DO K = 1,TGGDIV
                    TGZSHV(K,IND,GIND) = -1
                 END DO
              ENDIF
C
              TGZDAT(IND,GIND) = DTGDAT(CURDRW)
              CALL FASTMOV(DTGMAT,TGZMAT(1,IND,GIND),TGGDIV)
           ENDIF
        END DO
        CALL CLOSEFIL(FDB)
C
C LOAD RESULTS SYSTEM COMMON
C
        IF(TGSINT.EQ.0) THEN
            WRITE(6,971) IAM(),GTNAMES(TTGL)
            CALL OPENQW(3,SFNAMES(1,TGSF),4,0,0,ST)
            CALL IOQINIT(FDB,3,1*256)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,TGSF),1,ST,0)
            CALL READQIO(FDB,1,TGSFREC, TGSFSEC*256,ST)
            IF(ST.NE.0) CALL FILERR(SFNAMES(1,TGSF),2,ST,1)
            CALL CLOSEQFIL(FDB)
            TGSINT=-1
        ENDIF

	IF (DAYDRW(GAM).GT.0) CALL LODTXT(GAM)

        RETURN
C
C BINGO GAMES
C
10000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DBNSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF

        WRITE(6,900) IAM(),GAM,GTNAMES(TBNG),GIND
        CALL READW(FDB,DRAW,DBNREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DBNREC,BNGBLK)
        IF (BNGTIM(GIND) .GE. '40000000'X) THEN
            BNGTIM(GIND) = BNGTIM(GIND) - '40000000'X
        ENDIF

        IF(BNGSTS(GIND).NE.GAMOPN.OR.
     *     BNGTIM(GIND).EQ.0.OR.
     *     BNGESD(GIND).NE.DAYCDC)
     *     BNGTIM(GIND) = BNGTIM(GIND) + '40000000'X
        IF(BNGSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,BNGSTS(GIND)
C
C STORE LAST 100 SHARE VALUES AND DRAW DATES TABLES IN PRZCOM.
C
        DRAW = DAYHDR(GAM)
        DO I = DRAW, DRAW-(PRZDRW-1), -1
           IF(I.GT.0) THEN
              CALL READW(FDB,I,DBNREC,ST)
              IF(ST.NE.0) THEN
                 CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
                 RETURN
              ENDIF
C
              IND = DRAW - I + 1

              CALL FASTMOV(DBNSHV(1,BGOBAB),BPZSHV(1,BGOBAB,IND,GIND),BGODIV)
              CALL FASTMOV(DBNSHV(1,BGOFHS),BPZSHV(1,BGOFHS,IND,GIND),BGODIV)

C DETERMINE IF SHARE VALUES HAVE BEEN SET FOR A GIVEN DRAW
C
              SHRV = 0
              DO K = 1,DBNDIV(BGOBAB)
                 SHRV = SHRV + DBNSHV(K,BGOBAB)
              ENDDO
              DO K = 1,DBNDIV(BGOFHS)
                 SHRV = SHRV + DBNSHV(K,BGOFHS)
              ENDDO
C
C IF SHARE VALUES HAVE NOT BEEN SET TO THEIR FINAL VALUES
C THEN SET SHARE VALUES IN PRZCOM TO -1, TO INDICATE
C THAT THE DRAW HAS BEEN POSTPONED, (NO POOL UPDATING UNTILL THE
C FINAL SHARE VALUES HAVE BEEN SET AND POOLBLD RUN FROM WINUPD).
C
              IF(((SHRV.EQ.0.AND.DBNSTS.EQ.GAMBFD).OR.
     *           (DBNSTS.EQ.GAMENV)).AND.IND.GT.1) THEN
                 DO K = 1,BGODIV
                 DO J = 1,BGOSUB
                    BPZSHV(K,J,IND,GIND) = -1
                 ENDDO
                 ENDDO
              ENDIF
C
              BPZDAT(IND,GIND) = DBNDAT(CURDRW)
              CALL FASTMOV(DBNDNR,BPZLOT(1,IND,GIND),BGODIV)
           ENDIF
        ENDDO
        CALL CLOSEFIL(FDB)

        RETURN
C
C DOUBLE GAMES
C
11000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DDBSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TDBL),GIND
        CALL READW(FDB,DRAW,DDBREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DDBREC,DBLBLK)
        IF (DBLTIM(GIND) .GE. '40000000'X) THEN
            DBLTIM(GIND) = DBLTIM(GIND) - '40000000'X
        ENDIF
        IF(DBLSTS(GIND).NE.GAMOPN.OR.
     *     DBLTIM(GIND).EQ.0.OR.
     *     DBLESD(GIND).NE.DAYCDC)
     *     DBLTIM(GIND) = DBLTIM(GIND) + '40000000'X
        IF(DBLSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,DBLSTS(GIND)
        IF(DBLPFN(1,GIND).EQ.'    ') CALL SYSVOL(DBLPFN(1,GIND))
C
C LOAD DOUBLE POOL
C
        DO 11010 I=1,MAXDBLRW*MAXDBLRW
           DBPOOL(I,DBLPAMNT,DBLPDYNM,GIND) = DDBODT(I)
11010   CONTINUE

        CALL CLOSEFIL(FDB)
        CALL LODTXT(GAM)
        RETURN

C
C COUPLE GAMES
C
12000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DCPSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TCPL),GIND
        CALL READW(FDB,DRAW,DCPREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DCPREC,CPLBLK)
        IF (CPLTIM(GIND) .GE. '40000000'X) THEN
            CPLTIM(GIND) = CPLTIM(GIND) - '40000000'X
        ENDIF
        IF(CPLSTS(GIND).NE.GAMOPN.OR.
     *     CPLTIM(GIND).EQ.0.OR.
     *     CPLESD(GIND).NE.DAYCDC)
     *     CPLTIM(GIND) = CPLTIM(GIND) + '40000000'X
        IF(CPLSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,CPLSTS(GIND)
        IF(CPLPFN(1,GIND).EQ.'    ') CALL SYSVOL(CPLPFN(1,GIND))
C
C LOAD WINNERS TIP POOL
C
        DO 12010 I=1,(MAXCPLRW/2)*(MAXCPLRW/2)
           CPPOOL(I,CPLPAMNT,CPLPDYNM,GIND) = DCPODT(I)
12010   CONTINUE

        CALL CLOSEFIL(FDB)
        CALL LODTXT(GAM)
        RETURN
C
C SUPERSCORE GAMES
C
13000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DSSSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TSSC),GIND
        CALL READW(FDB,DRAW,DSSREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF

        CALL LOGGAM(GTYP,GIND,DSSREC,SSCBLK)

        IF (SSCTIM(GIND) .GE. '40000000'X) THEN
            SSCTIM(GIND) = SSCTIM(GIND) - '40000000'X
        ENDIF

        IF(SSCSTS(GIND).NE.GAMOPN.OR.
     *     SSCTIM(GIND).EQ.0.OR.
     *     SSCESD(GIND).NE.DAYCDC)
     *     SSCTIM(GIND) = SSCTIM(GIND) + '40000000'X
        IF(SSCSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,SSCSTS(GIND)
        IF(SSCPFN(1,GIND).EQ.'    ') CALL SYSVOL(SSCPFN(1,GIND))
        IF(SSCPOF(1,GIND).EQ.'    ') CALL SYSVOL(SSCPOF(1,GIND))

        CALL CLOSEFIL(FDB)

        CALL LSSPOOL(GAM)
        CALL LODTXT(GAM)

        RETURN
C
C TODAY'S TRIO GAMES
C
14000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DTRSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TTRP),GIND
        CALL READW(FDB,DRAW,DTRREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DTRREC,TRPBLK)
        IF (TRPTIM(GIND) .GE. '40000000'X) THEN
            TRPTIM(GIND) = TRPTIM(GIND) - '40000000'X
        ENDIF
        IF(TRPSTS(GIND).NE.GAMOPN.OR.
     *     TRPTIM(GIND).EQ.0.OR.
     *     TRPESD(GIND).NE.DAYCDC)
     *     TRPTIM(GIND) = TRPTIM(GIND) + '40000000'X
        IF(TRPSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,TRPSTS(GIND)
        IF(TRPPFN(1,GIND).EQ.'    ') CALL SYSVOL(TRPPFN(1,GIND))
C
C LOAD POOL
C
        CALL LTRPOOL(GAM)
        CALL CLOSEFIL(FDB)
        CALL LODTXT(GAM)
        RETURN
C
C SUPER TRIPLE GAMES
C
15000   CONTINUE
        CALL OPENW(3,GFNAMES(1,GAM),4,0,0,ST)
        CALL IOINIT(FDB,3,DSTSEC*256)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),1,ST,0)
            RETURN
        ENDIF
        WRITE(6,900) IAM(),GAM,GTNAMES(TSTR),GIND
        CALL READW(FDB,DRAW,DSTREC,ST)
        IF(ST.NE.0) THEN
            CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
            RETURN
        ENDIF
        CALL LOGGAM(GTYP,GIND,DSTREC,STRBLK)
        IF (STRTIM(GIND) .GE. '40000000'X) THEN
            STRTIM(GIND) = STRTIM(GIND) - '40000000'X
        ENDIF
        IF(STRSTS(GIND).NE.GAMOPN.OR.
     *     STRTIM(GIND).EQ.0.OR.
     *     STRESD(GIND).NE.DAYCDC)
     *     STRTIM(GIND) = STRTIM(GIND) + '40000000'X
        IF(STRSTS(GIND).LT.GAMOPN) WRITE(6,910) IAM(),GAM,STRSTS(GIND)
        IF(STRPFN(1,GIND).EQ.'    ') CALL SYSVOL(STRPFN(1,GIND))
C
C LOAD POOL
C
        CALL LSTPOOL(GAM)
        CALL CLOSEFIL(FDB)
        CALL LODTXT(GAM)
        RETURN

C PASSIVE LOTTERY
C
16000   CONTINUE
	TYPE*,IAM()
	TYPE*,IAM(),' WARNING: Incorrect invocation, use INTPAS instead'
	TYPE*,IAM(),' Passive GAME: ',GAM,' Type: ',GTYP,' Index: ',GIND
	TYPE*,IAM()
	CALL GPAUSE()
!
	RETURN
!===============================================================================
900     FORMAT(1X,A18,' Loading game number ',I2,1X,A8,1X,I1,
     *         ' game data ')
910     FORMAT(1X,A18,' Game number ',I2,' Invalid game status > ',I4)
911     FORMAT(1X,A18,' Game number ',I2,' Extra draw enabled')
912     FORMAT(1X,A18,' Game number ',I2,' Bonus draw enabled')
920     FORMAT(1X,A18,' Loading seed information: ',Z8.8)
961     FORMAT(1X,A18,' Loading ',A8,' statistics')
971     FORMAT(1x,A18,' Loading ',A8,' system file')	
        END
