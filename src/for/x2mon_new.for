C
C SUBROUTINE X2MON
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2MON_NEW.FOV                                $
C  $Date::   17 Apr 1996 16:24:02                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C ** Source - vis_x2mon.for **
C
C X2MON.FOR
C
C
C X2X Upgrade: 22-FEB-96 wsm Added PRMAGT.DEF, AGTINF.DEF, GLOBAL.DEF
C                            for Finland.
C
C V 0.1	  DXG	  21/10/94
C
C This is the main subroutine that generates alarms. It calls different 
C subroutines to display alarms, display a history of alarms (stored in a 
C fixed length buffer). It supports command processing a la VISION.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2MON(KEY,NUM)

	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2MAINT.DEF'
C
	INCLUDE 'INCLIB:X2MON_NEW.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:VISCOM.DEF'
C
	INTEGER*4 KEY,NUM
C
	INTEGER*4 SAP,PORT,PORT_CNTR,TEMP_SVC,I,J,K
	INTEGER*4 THRESHOLD_SVC /20/
C
	INTEGER*4  MAX_CURR_STATE
	PARAMETER (MAX_CURR_STATE=3)
C
	INTEGER*4  BEG_BUFFER /1/
	INTEGER*4  END_BUFFER /0/
C
	INTEGER*4 CURR_PORT_STATE(MAX_CURR_STATE,X2X_SAP_PORTS,X2X_SAP)
	INTEGER*4 PRTIM(2)
C
	INTEGER*4   STATE,
     *		    CURR_SVC,
     *		    CURR_SAP
	PARAMETER   (STATE=1,
     *		     CURR_SVC=2,
     *		     CURR_SAP=3)
C
C========================================================
C
C COMMAND PROCESSING.
C FOLLOWING COMMANDS ARE PROCESSED HERE:
C HISTORY: ENABLES YOU TO VIEW A HISTORY OF ALARMS. MAXIMUM NUMBER IS DEFINED
C	   BY PARAMETER MAX_BUFFER. NOTE THAT INCOMING ALARMS ARE STILL PRO-
C	   CESSED. THEY DON'T SHOW UP HOWEVER ON THE SCREEN UNTIL YOU GO BACK
C	   TO LIVE MODE
C LIVE:    BRINGS YOU BACK TO 'LIVE' MODE: INCOMING ALARMS ARE DISPLAYED 
C	   IMMEDIATELY
C TOP:	   IN HISTORY MODE, BRINGS YOU TO THE TOP OF THE LIST
C BOTTOM:  IN HISTORY MODE, BRINGS YOU TO THE BOTTOM OF THE LIST
C DOWN #:  SCROLLS DOWN THE HISTORY LIST BY #
C UP #:	   SCROLLS UP THE HISTORY LIST BY #
C
C========================================================
C
	  IF (END_BUFFER.EQ.0) GOTO 5000
C		! NO ALARMS FOUND YET, DON'T PROCESS ANY COMMANDS
C
	  IF (KEY.EQ.4) THEN   ! PRINT HISTORY OF ALARMS
	    HISTORY = .TRUE.
	    J = BEG_BUFFER-1
	    DO I=1,MAX_BUFFER
		J = MOD(J,MAX_BUFFER)+1
		DO K=1,MAX_INFO
		   HISTORY_MESS(K,I) = MESSAGE(K,J)
		END DO
	    END DO
C
C SIMULATE DOWN KEY: WE HAVE TO REFRESH THE SCREEN (PRIMARILY TO CHANGE
C THE COMMANDS MESSAGE AT THE BOTTOM
C
	    KEY = 3
	  ENDIF
C
	  IF (KEY.EQ.5) THEN   ! BACK TO LIVE
	    HISTORY = .FALSE.
	    J = END_BUFFER-END_SCREEN-1
	    IF (J.LT.1) J = MAX_BUFFER + J
	    DO I=1,END_SCREEN+1
		J = MOD(J,MAX_BUFFER)+1
		DO K=1,MAX_INFO
		   HISTORY_MESS(K,I) = MESSAGE(K,J)
		END DO
	    END DO
	    CALL X2_PRINTBUFFER(1)
	    UPDATE_SCREEN = .TRUE.
	    CALL X2_PRINTSCREEN()
	    UPDATE_SCREEN = .FALSE.
	  ELSE IF (KEY.EQ.22) THEN	    ! THRESHOLD FOR SVC-INCREASE SET
	    THRESHOLD_SVC = NUM
	  ELSE IF (KEY.EQ.2.AND.HISTORY) THEN		! TOP
	    START_HISTORY = 1
	    CALL X2_PRINTBUFFER(START_HISTORY)
	    UPDATE_SCREEN = .TRUE.
	    CALL X2_PRINTSCREEN()
	    UPDATE_SCREEN = .FALSE.
	  ELSE IF (KEY.EQ.3.AND.HISTORY) THEN		! BOTTOM
	    IF (BEG_BUFFER.EQ.1) THEN
	         START_HISTORY = MAX0(END_BUFFER-END_SCREEN,1)
            ELSE
	         START_HISTORY = MAX0(MAX_BUFFER-END_SCREEN,1)
	    ENDIF
	    CALL X2_PRINTBUFFER(START_HISTORY)
	    UPDATE_SCREEN = .TRUE.
	    CALL X2_PRINTSCREEN()
	    UPDATE_SCREEN = .FALSE.
	  ELSE IF (KEY.EQ.23.AND.HISTORY) THEN		! DOWN
	    IF (NUM.EQ.0) NUM = 1
	    IF (BEG_BUFFER.EQ.1) THEN
	         START_HISTORY = MIN0(START_HISTORY + 
     *		  END_SCREEN*NUM,END_BUFFER-END_SCREEN-1)
            ELSE
	         START_HISTORY = MIN0(START_HISTORY + 
     *		  END_SCREEN*NUM,MAX_BUFFER-END_SCREEN-1)
	    ENDIF
	    CALL X2_PRINTBUFFER(START_HISTORY)
	    UPDATE_SCREEN = .TRUE.
	    CALL X2_PRINTSCREEN()
	    UPDATE_SCREEN = .FALSE.
	  ELSE IF (KEY.EQ.24.AND.HISTORY) THEN		! UP
	    IF (NUM.EQ.0) NUM = 1
	    START_HISTORY = MAX0(1,START_HISTORY - END_SCREEN*NUM)
	    CALL X2_PRINTBUFFER(START_HISTORY)
	    UPDATE_SCREEN = .TRUE.
	    CALL X2_PRINTSCREEN()
	    UPDATE_SCREEN = .FALSE.
	  ENDIF
5000	  CONTINUE
C========================================================
C   MAIN BLOCK GENERATING ALARMS
C   EACH ALARM SHOULD BE PUT IN A BUFFER, CONTAINING:
C       TYPE ALARM
C	SAP
C	PORT
C	PREVIOUS VALUE
C	NEW VALUE
C       TIME ALARM OCCURED
C========================================================
C
      	  DO 2000,SAP=1,X2X_SAP
	    PORT_CNTR = 0
            DO 3000,PORT=1,X2X_SAP_PORTS
		IF (X2XE_LOCAL_PORT_STATE(PORT,SAP).EQ.0) GOTO 3000
C
		PORT_CNTR = PORT_CNTR + 1

                CALL MOV2TOI4(TEMP_SVC,
     *              X2XE_LOCAL_PORT_MAINTENANCE(1,1,PORT_CNTR,SAP),
     *               X2MAINT_T1M_NO_CONN_VC - 1)
C
                IF (X2XE_LOCAL_PORT_STATE(PORT,SAP).NE.
     *		  CURR_PORT_STATE(STATE,PORT,SAP)) THEN
C		    CALL OPS('*** STATE CHANGED FOR SAP ',SAP,
C     *		        X2XE_LOCAL_PORT_STATE(PORT,SAP))
		    CALL ICLOCK(1,PRTIM)
		    END_BUFFER = MOD(END_BUFFER,MAX_BUFFER)+1
		    IF (END_BUFFER.LE.BEG_BUFFER.AND..NOT.BEGIN) 
     *		      BEG_BUFFER = MOD(BEG_BUFFER,MAX_BUFFER)+1
		    BEGIN = .FALSE.
		    CALL X2_UPDATE_BUFFER(END_BUFFER,STATE,SAP,PORT,
     *		      CURR_PORT_STATE(STATE,PORT,SAP),
     *		      X2XE_LOCAL_PORT_STATE(PORT,SAP),
     *		      PRTIM(1),PRTIM(2))
		    IF (HISTORY.EQ..FALSE.) THEN
		      CALL X2_PRINT_ALARM(MESSAGE(1,END_BUFFER))
		    ENDIF
		    UPDATE_SCREEN = .TRUE.
		ENDIF
C
		IF (ABS(CURR_PORT_STATE(CURR_SVC,PORT,SAP) - TEMP_SVC)
     *		    .GE. THRESHOLD_SVC) THEN
C		    CALL OPS('*** NUMBER OF SVC''S CHANGED FOR SAP ',SAP,
C     *		        TEMP_SVC)
		    CALL ICLOCK(1,PRTIM)
		    END_BUFFER = MOD(END_BUFFER,MAX_BUFFER)+1
		    IF (END_BUFFER.LE.BEG_BUFFER.AND..NOT.BEGIN) 
     *		      BEG_BUFFER = MOD(BEG_BUFFER,MAX_BUFFER)+1
		    BEGIN = .FALSE.
		    CALL X2_UPDATE_BUFFER(END_BUFFER,CURR_SVC,SAP,
     *		      PORT,
     *		      CURR_PORT_STATE(CURR_SVC,PORT,SAP),
     *		      TEMP_SVC,
     *		      PRTIM(1),PRTIM(2))
C
		    IF (HISTORY.EQ..FALSE.) THEN
		      CALL X2_PRINT_ALARM(MESSAGE(1,END_BUFFER))
		    ENDIF
C
		    UPDATE_SCREEN = .TRUE.
		ENDIF

		CURR_PORT_STATE(STATE,PORT,SAP) = 
     *		  X2XE_LOCAL_PORT_STATE(PORT,SAP)
		CURR_PORT_STATE(CURR_SVC,PORT,SAP) = TEMP_SVC

3000	    CONTINUE
2000	  CONTINUE
C
	CALL X2_PRINTSCREEN()
	UPDATE_SCREEN = .FALSE.
C
C
	RETURN
C
	END
C
C
C ********************* SUBROUTINE X2_PRINT_ALARM *******************
C GENERATES A STRING TO BE PRINTED ON THE SCREEN, BASED ON THE ELEMENTS
C PUT IN MESSAGE_EL. MESSAGE_EL IS AN ARRAY CONTAINING DATA ABOUT THE ALARM
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2_PRINT_ALARM(MESSAGE_EL)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:X2MON_NEW.DEF'
C
	INTEGER*4 MESSAGE_EL(MAX_INFO)
	INTEGER*4 PORT,SAP
	INTEGER*4 MESSAGE_TYPE,OLD_VALUE,NEW_VALUE
	CHARACTER*6 STATE_MESSAGE(3) /'Idle  ','Online','Down  '/
	CHARACTER*132 BUFFER
        INTEGER*4 PRTIM(2)
	INTEGER*4 NUMBER
        CHARACTER*1     BELL    /Z07/   ! BEEP !
C

C
	PORT = MESSAGE_EL(BUF_PORT)
	SAP = MESSAGE_EL(BUF_SAP)
	MESSAGE_TYPE = MESSAGE_EL(BUF_MESSAGE_TYPE)
	OLD_VALUE = MESSAGE_EL(BUF_OLD_VALUE)
	NEW_VALUE = MESSAGE_EL(BUF_NEW_VALUE)
	PRTIM(1) = MESSAGE_EL(BUF_TIME1)
	PRTIM(2) = MESSAGE_EL(BUF_TIME2)
	NUMBER = MESSAGE_EL(BUF_NUMBER)
C	TYPE *,PORT,SAP,MESSAGE_TYPE,OLD_VALUE,NEW_VALUE
C
	GOTO (100,200,300) MESSAGE_TYPE

C
C PORT STATE CHANGED
C
100	CONTINUE
	IF (OLD_VALUE.EQ.0) THEN
	    WRITE (BUFFER,9100) NUMBER, PRTIM,SAP,
     *	      PORT,
     *	      STATE_MESSAGE(NEW_VALUE)
9100	    FORMAT (1X,I4.4,'> ',2A4,': State for SAP ',I4,' port ',I2,
     *	      ' set to ',A)
	ELSE
	    WRITE (BUFFER,9110) NUMBER, PRTIM, SAP,PORT,
     *	      STATE_MESSAGE(OLD_VALUE),STATE_MESSAGE(NEW_VALUE),BELL
9110	    FORMAT (1X,I4.4,'> ',2A4,':State for SAP ',I3,' port ',I2,
     *	      ' changed from ',A,' to ',A,A1)
	ENDIF
	CALL X2_ADDTOSCREEN(BUFFER)
C
	RETURN
C
C
C CURRENT # OF SVC'S CHANGED SUDDENLY
C
200	CONTINUE
C	IF (OLD_VALUE.NE.0) THEN
	    WRITE (BUFFER,9210) NUMBER, PRTIM, SAP,PORT,OLD_VALUE,
     *	      NEW_VALUE,BELL
9210	    FORMAT (1X,I4.4,'> ',2A4,': Number of SVC''s for SAP ',I4,
     *	      ' port ',I2,
     *	      ' changed from ',I4,' to ',I4,A1)
C	ENDIF
	CALL X2_ADDTOSCREEN(BUFFER)
	RETURN
C
300	CONTINUE
	RETURN
C
	END
C
C
C ******************** SUBROUTINE X2_UPDATE_BUFFER ******************* 
C UPDATES THE BUFFER WITH THE VARIOUS ALARM-DATA ELEMENTS
C
	SUBROUTINE X2_UPDATE_BUFFER(ENTRY,VAL1,VAL2,VAL3,VAL4,VAL5,
     *	  VAL6,VAL7)
	IMPLICIT NONE
	INCLUDE 'INCLIB:X2MON_NEW.DEF'

	INTEGER*4 VAL1,VAL2,VAL3,VAL4,VAL5,VAL6,VAL7
C
	INTEGER*4 ENTRY
C
	NUM_ALARMS = NUM_ALARMS + 1
C
	MESSAGE(BUF_MESSAGE_TYPE,ENTRY) = VAL1
	MESSAGE(BUF_SAP,ENTRY) = VAL2
	MESSAGE(BUF_PORT,ENTRY) = VAL3
	MESSAGE(BUF_OLD_VALUE,ENTRY) = VAL4
	MESSAGE(BUF_NEW_VALUE,ENTRY) = VAL5
	MESSAGE(BUF_TIME1,ENTRY) = VAL6
	MESSAGE(BUF_TIME2,ENTRY) = VAL7
	MESSAGE(BUF_NUMBER,ENTRY) = NUM_ALARMS
C
	RETURN
C
	END
C
C
C ****************** SUBROUTINE X2_ADDTOSCREEN **********************
C ADDS AN ALARM-MESSAGE TO THE SCREEN BUFFER
C
C
	SUBROUTINE X2_ADDTOSCREEN(SCR_MESSAGE)
	IMPLICIT NONE

        INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2MON_NEW.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:VISCOM.DEF'

	CHARACTER*80 SCR_MESSAGE
C
	INTEGER*4 I
C

	SCREEN_LINE = SCREEN_LINE + 1
C
	IF (SCREEN_LINE.GT.END_SCREEN) THEN
	    DO I=1,END_SCREEN-1
		XNEW(I) = XNEW(I+1)
	    END DO
	    SCREEN_LINE = END_SCREEN
	ENDIF
C
	XNEW(SCREEN_LINE) = SCR_MESSAGE
C
	RETURN
C
	END
C
C
C ******************** SUBROUTINE X2_PRINTSCREEN ****************8
C PRINTS THE SCREEN BUFFER TO THE SCREEN. TO SPEED UP OPERATIONS, UPDATES
C ONLY SCREEN IF UPDATE_SCREEN IS SET
C
	SUBROUTINE X2_PRINTSCREEN()
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2MON_NEW.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:VISCOM.DEF'

	CHARACTER*3 YCOPY
C
	INTEGER*4 I,PRDAT(3)
        INTEGER*4 PRTIM(2)
	CHARACTER*10 LIVE_HIST
C
        DATA YCOPY(1:1)/Z1B/, YCOPY(2:3) /'[H'/
C
	WRITE (5,9000) YCOPY
C
        CALL ICLOCK(1,PRTIM)
        CALL XDAT(PRDAT)
C
	IF (HISTORY) THEN
	    LIVE_HIST = 'HISTORY'
	ELSE 
	    LIVE_HIST = 'LIVE'
	ENDIF
C
        WRITE(5,9055) LIVE_HIST,NUM_ALARMS,PRDAT(2),PRDAT(3),
     *	      PRDAT(1),PRTIM
C
	IF (UPDATE_SCREEN) THEN
	   DO I=1,END_SCREEN
	       WRITE (5,1000) XNEW(I)
	   END DO
C
	   IF (HISTORY) THEN 
		WRITE(5,9070)
	   ELSE
		WRITE(5,9060)
	   ENDIF
C
	ENDIF
C
1000	FORMAT (' ',A80)
C
	RETURN
9000	FORMAT('+',A3)
9055    FORMAT('+Monitor Program',15X,A10,8X,I4,' Alarms  ',
     *	      I2.2,'/',I2.2,'/',I2.2,3X,2A4)
C
9060	FORMAT(' Use STOP,INTERV #, THRESH #, HISTORY , LIVE       ')
9070	FORMAT(' Use STOP, HISTORY , LIVE, UP # , DOWN # ,TOP ,END ')
C
	END
C
C ********************** SUBROUTINE X2_PRINTBUFFER ******************
C THIS ROUTINE PRINTS ONE SCREEN OF THE HISTORY BUFFER. IT IS ALSO USED
C WHEN WE SWITCH BACK TO LIVE MODE, AND WE WANT TO DISPLAY THE LAST ENTERED
C ALARMS
C
	SUBROUTINE X2_PRINTBUFFER(BEG_PRINT)
	IMPLICIT NONE
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2MON_NEW.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:VISCOM.DEF'
C
	INTEGER*4 BEG_PRINT
	INTEGER*4 END_PRINT,I
C
	END_PRINT = BEG_PRINT+END_SCREEN
C
	SCREEN_LINE = 1
C
C CLEAR SCREEN
C

	DO I=1,END_SCREEN
	    XNEW(I) = ' '
	END DO
C
C	TYPE *,BEG_BUFFER,END_BUFFER,BEG_PRINT,END_PRINT
C
	DO I=BEG_PRINT,MIN0(END_PRINT,MAX_BUFFER)
	      CALL X2_PRINT_ALARM(HISTORY_MESS(1,I))
	END DO
C	
	RETURN
C
	END
