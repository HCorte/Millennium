C
C     FILE   : GSPOPAID.FOR
C     AUTHOR : J.H.R
C     VERSION: 01            DATE: 12 / 12 / 2002
C
C
C V02 13-DEC-2010 FRP Lotto2 Changes
C V01 JHR INITIAL RELEASE FOR PORTUGAL PROJECT
C
C GSALES PAYMENT ORDER PAID, THIS PROGRAM RUNS GSALES LOADER FOR PAYMENT ORDERS
C THAT HAVE BEEN PAID BY THE BANKS
C
C     **************************************************************************
C
C        THIS ITEM IS THE PROPERTY OF GTECH CORPORATION, POVIDENCE, RHODE
C     ISLAND, AND CONTAINS CONFIDENTIAL AND TRADE SECRET INFORMATION. IT MAY
C     NOT BE TRANSFERRED FROM THE CUSTODY OR CONTROL OF GTECH EXCEPT AS AUTO -
C     RIZED IN WRITING BY AN OFFICER OF GTECH. NEITHER THIS ITEM NOR THE
C     INFORMATION IT CONTAINS MAY BE USED, TRANSFERRED, REPRODUCED, PUBLISHED
C     OR DISCLOSED, IN WHOLE OR IN PART, AND DIRECTLY OR INDIRECTLY, EXCEPT AS
C     EXPRESSLY AUTHORIZED BY AN OFFICER OR GTECH, PURSUANT TO WRITTEN AGREEMENT
C
C     Copyright 2000 GTECH Corporation. All Rigth Reserved
C
C     **************************************************************************
C
C THIS PROGRAM RUNS GSALES LOADERS FOR ALL PAYMENT ORDERS PAID BY THE BANKS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      PROGRAM GSPOPAID
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO RUN GSALES PAYMENT ORDERS PAID BY THE BANKS
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
C
C CONSTANT PARAMETER DEFINITION TO RUN GSALES PAYMENT ORDERS PAID BY THE BANKS
C
      INTEGER * 4 VERSION           ! PAYMENT ORDERS VERSION
C
C INITIATE CONSTANT PARAMETER DEFINITION TO RUN PAYMENT ORDERS PAID BY THE BANKS
C
      PARAMETER(VERSION = 2)        ! PAYMENT ORDERS VERSION
C
C VARIABLES DEFINITION TO RUN PAYMENT ORDERS PAID BY THE BANKS
C
      CHARACTER * 26 FILENAME       ! GSALES FILE NAME LOADER
C
C DISPLAY USER INFORMATION ( RUNNING PAYMENT ORDER LOADER PAID BY THE BANKS )
C
      CALL COPYRITE
      TYPE *, IAM()
      TYPE *, IAM(), 'Running Gsales P. Order Paid By The Banks Loader'
      TYPE *, IAM()
C
C INITIATE VARIABLES TO RUN GSALES PAYMENT ORDERS PAID BY THE BANK LOADER
C
      FILRECCNT = 0
C
C SET PAYMENT ORDERS FILE NAME ( YYYYDDMM_PAIDPORD.FIL )
C
      WRITE(FILENAME, 100) GET_YYYYMMDD_CDC(DAYCDC)
C
C IF GSALES PAYMENT ORDERS PAID BY THE BANKS FILE EXIST, DELETE IT
C
      CALL DELETE_FILE_NAME(FILENAME)
C
C GET FREE IDENTIFICATION FILE NUMBER
C
      IDFIL = GET_FREE_IDFIL(0)
C
C OPEN YYYYDDMM_PAIDPORD.FIL ( ASCII FILE, ALTHOUGH IT'S EXTENSION IS '.FIL' )
C
      CALL OPEN_FILE_NAME(IDFIL, FILENAME)
C
C WRITE PAYMENT ORDERS PAID BY THE BANK HEADER
C
      CALL GSHEADER(VERSION)
C
C READ ALL PAYMENT ORDER PAID DATABASE ( OPS.FIL ) AND PRINT GSALES INFORMATION
C
      CALL READ_ALL_OPS_FILE
C
C WRITE PAYMENT ORDER PAID BY THE BANK FOOTER
C
      CALL GSFOOTER
C
C CLOSE YYYYDDMM_PAIDPORD.FIL GSALES LOADER FILE
C
      CALL USRCLOS1(IDFIL)
C
C DISPLAY MESSAGE TO USER
C
      TYPE *, IAM()
      TYPE *, IAM(), 'Generated P. Order Paid File: ', FILENAME
      TYPE *, IAM()
C
C CREATE GSALES END FILE ( TO GSALES MEANS END OF PROCEDURE )
C
      WRITE(FILENAME, 200) GET_YYYYMMDD_CDC(DAYCDC)
      CALL CREATE_GSALES_END_FILE(FILENAME)
C
C PAYMENT ORDERS LOADER ENDS OK
C
      CALL GSTOP(GEXIT_SUCCESS)
C
C FORMATS DEFINITION TO RUN GSALES LOADERS FOR PAYMENT ORDERS PAID BY THE BANKS
C
100   FORMAT('valx:', A8, '_paidpord.fil')
200   FORMAT('valx:', A8, '_paidpord.fin')
C
C THIS IS THE END TO RUN GSALES LOADER FOR PAYMENT ORDERS PAID BY THE BANKS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: READ_ALL_OPS_FILE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 12 / 2002
C
C ******************************************************************************
C
C FUNCTION TO READ ALL PAYMENT ORDER DATABASE AND PRINT GSALES LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE READ_ALL_OPS_FILE
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO READ ALL PAYMENT ORDER DATABASE AND PRINT LOADER
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C VARIABLES DEFINITION TO READ ALL PAYMENT ORDER DATABASE AND PRINT LOADER
C
      INTEGER * 4 FSTS             ! FUNCTION STATUS
C
C OPEN PAYMENT ORDER DATABASE
C
      CALL OPEN_OPS('SEQUENTIAL', FSTS)
C
C CHECK IF THERE IS ANY ERROR TO OPEN PAYMENT ORDER DATABASE
C
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM(), 'Error Opening File: FILE:OPS.FIL'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C READ ONE PAYMENT ORDER FROM OPS.FIL DATABASE
C
1000  CONTINUE
      READ(OPS_LUN, END = 2000, IOSTAT = FSTS) OPS_REC
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM(), 'Error Reading File: FILE:OPS.FIL'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C PRINT PAYMENT ORDER IN GSALES LOADER ( IF IS UPDATED TODAY )
C ( WE DON'T NEED PASS OPS_REC TO PRINT_PAID_ORDER BECAUSE OPS_REC IS A COMMON
C VARIABLE )
C
      IF(OPS_REC.PROC_PAID_CDC .EQ. DAYCDC) THEN
        CALL PRINT_PAID_ORDER
      ENDIF
C
C GO TO READ NEXT PAYMENT ORDER FROM OPS.FIL DATABASE
C
      GOTO 1000
C
C END TO READ ALL PAYMENT ORDER DATABASE ( CLOSE OPS.FIL FILE )
C
2000  CONTINUE
      CLOSE(OPS_LUN)
C
C THIS IS THE END TO READ ALL PAYMENT ORDER DATABASE AND PRINT GSALES LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_GAME_TYPE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 13 / 01 / 2003
C
C ******************************************************************************
C
C FUNCTION TO GET GAME TYPE USED BY GSALES LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      INTEGER * 4 FUNCTION GET_GAME_TYPE(GNUM)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET GAME TYPE USED BY GSALES LOADER
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
C
C PARAMETERS DEFINITION TO GET GAME TYPE USED BY GSALES LOADER
C
      INTEGER * 4 GNUM              ! GAME NUMBER
C
C INITIATE VARIABLES WITH DEFAULT VALUES
C
      GET_GAME_TYPE = 0
C
C IF GAME TYPE IS NOT AN ACTIVE GAME THEN RETURN
C
      IF(GNUM .LE. 0 .OR. GNUM .GT. MAXGAM) RETURN
C
C SET GAME TYPE USED BY GSALES LOADER
C
      GET_GAME_TYPE = 2
      IF(GNTTAB(GAMTYP, GNUM) .EQ. TPAS) GET_GAME_TYPE = 1
C
C THIS IS THE END TO GET GAME TYPE USED BY GSALES LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_PAID_ORDER
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 12 / 2002
C
C ******************************************************************************
C
C FUNCTION TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_PAID_ORDER
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C VARIABLES DEFINITION TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
      INTEGER * 4 CDC_PAID                ! CDC WHEN THE ORDER WAS PAID
      INTEGER * 4 GNUM                    ! GAME NUMBER
      INTEGER * 4 KGNUM                   ! JOKER GAME NUMBER
C
      CHARACTER * 15 JUL_SER_CHK          ! JULIAN - SERIAL - CHECK DIGITS
      CHARACTER * 04 EXT_YEAR             ! EXTERNAL YEAR DRAW NUMBER
      CHARACTER * 03 EXT_WEEK             ! EXTERNAL WEEK DRAW NUMBER
C
C FUNCTIONS DEFINITION TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
      INTEGER * 4 GET_GAME_TYPE           ! GET GAME TYPE
      INTEGER * 4 CTOI_LENGTH             ! COI LENGTH CONVERSION
C
      CHARACTER * 12 GET_GAME_WIN_AMT     ! TOTAL GAME WIN AMOUNT
      CHARACTER * 02 GET_JOKER_WIN_DIV    ! JOKERR WINNING DIVISION
      CHARACTER * 12 GET_JOKER_WIN_AMT    ! JOKER WINNING AMOUNT
C
C GET TICKET JULIAN, TICKET SERIAL AND TICKET NUMBER
C
      CALL GET_JUL_SER_CHKD(OPS_REC.BILHETE, OPS_REC.ONLINE_ORDER, JUL_SER_CHK)
C
C GET GAME NUMBER FROM OPS.FIL RECORD / GET JOKER GAME NUMBER
C
      KGNUM = 0
      GNUM = CTOI(OPS_REC.GAME, CTOI_LENGTH)
      IF(GNUM .GT. 0 .AND. GNUM .LE. MAXGAM) KGNUM = KGNTAB(GNUM)
C
C GET CDC WHEN IT WAS PAID THIS PAYMENT ORDER BY THE BANK
C
      CDC_PAID = OPS_REC.PAID_CDC
C
C SET EXTERNAL DRAW YEAR / EXTERAL DRAW WEEK
C
      EXT_YEAR = OPS_REC.YEARWEEK(1:4)
      EXT_WEEK = OPS_REC.YEARWEEK(5:7)
C
C WRITE INFORMATION IN FILE REGISTER 
C
      WRITE(FILREC, 100) 
     *
     *      JUL_SER_CHK,                    ! JULIAN - SERIAL - CHECK DIGITS
     *      GET_GAME_TYPE(GNUM),            ! GAME TYPE
     *      GNUM,                           ! GAME NUMBER
     *      OPS_REC.AGENT,                  ! AGENT NUMBER
     *      GET_YYYYMMDD_CDC(CDC_PAID),     ! DATE WHEN THE BANK PAID ORDER
     *      GET_GAME_WIN_AMT(),             ! TOTAL WINNING AMOUNT GAME
     *      EXT_WEEK,                       ! EXTERNAL DRAW WEEK NUMBER
     *      EXT_YEAR,                       ! EXTERNAL DRAW YEAR NUMBER
     *      GET_GAME_TYPE(KGNUM),           ! JOKER GAME TYPE
     *      KGNUM,                          ! JOKER GAME NUMBER
     *      GET_JOKER_WIN_DIV(),            ! JOKER WINNING DIVISION
     *      GET_JOKER_WIN_AMT()             ! JOKER WINNING AMOUNT  
C
      FILRECLNG = 3 + 9 + 3 + 1 + 2 + 7 + 8 + 12 + 3 + 4 + 1 + 2 + 2 + 12
C
C SET WINNING DIVISIONS AND NUMBER OF WINNING DIVISIONS
C
      CALL GET_GAME_WIN_DIV
C
C WRITE INFORMATION IN GSALES FILE AND INCREASE NUMBER OF FILE RECORDS WRITEN
C
      WRITE(IDFIL, 200) FILREC(1:FILRECLNG)
      FILRECCNT = FILRECCNT + 1
C
C FORMATS DEFINITION TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
100   FORMAT(A15, I1.1, I2.2, A7, A8, A12, A3, A4, I1.1, I2.2, A2, A12)
200   FORMAT(A)
300   FORMAT(I2.2)
C
C THIS IS THE END TO PRINT PAID PAYMENT ORDER IN GSALES LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_GAME_WIN_DIV
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 13 / 01 / 2003
C
C ******************************************************************************
C
C FUNCTION TO GET GAME WINNING DIVISIONS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GET_GAME_WIN_DIV
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET GAME WINNING DIVISIONS
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C VARIABLES DEFINITION TO GET GAME WINNING DIVISIONS
C
      INTEGER * 4 WINDIVS     ! NUMBER OF WINNING DIVISIONS
      INTEGER * 4 DIV         ! DIVISION COUNTER
      INTEGER * 4 POS         ! WRITE POSITION
C
C INITIATE VARIABLES WITH DEFAULT VALUES
C
      WINDIVS = 0
C
C LOOP TO CALCULATE NUMBER OF WINNING DIVISIONS
C
      DO DIV = 1, 6
        IF(OPS_REC.WINS(DIV) .GT. 0) WINDIVS = WINDIVS + 1
      ENDDO
C
C SET TOTAL NUMBER OF WINNING DIVISIONS
C
      POS = FILRECLNG + 1
      WRITE(FILREC(POS:POS + 1), 100) WINDIVS
      FILRECLNG = FILRECLNG + 2
C
C IF NUMBER OF WINNING DIVISION IS ZERO RETURN
C
      IF(WINDIVS .LE. 0) RETURN
C
C SET ALL WINNING DIVISION 
C
      DO DIV = 1, 6
        IF(OPS_REC.WINS(DIV) .GT. 0) THEN
          POS = FILRECLNG + 1
          WRITE(FILREC(POS:POS + 4), 200) DIV, OPS_REC.WINS(DIV)
          FILRECLNG = FILRECLNG + 2 + 3
        ENDIF
      ENDDO
C
C FORMATS DEFINTION TO GET GAME WINNING DIVISIONS
C
100   FORMAT(I2.2)
200   FORMAT(I2.2, I3.3)
C
C THIS IS THE END TO GET GAME WINNING DIVISIONS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_JOKER_WIN_AMT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 13 / 01 / 2003
C
C ******************************************************************************
C
C FUNCTION TO GET JOKER WINNING AMOUNT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      CHARACTER * 12 FUNCTION GET_JOKER_WIN_AMT
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET JOKER WINNING AMOUNT
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C INITIATE VARIABLES WITH DEFAULT VALUES
C
       WRITE(GET_JOKER_WIN_AMT, 100)
C
C IF PAYMENT ORDER HAS NOT JOKER AS A WINNING THEN RETURN
C
      IF(OPS_REC.JOKER_DIV .LE. 0) RETURN
C
C  SET TOTAL WIN AMOUNT FOR JOKER GAME
C
      GET_JOKER_WIN_AMT = PRNT_AMT(OPS_REC.TOTAL_JOKER, 2)
C
C FORMATS DEFINITION TO GET JOKER WINNING AMOUNT
C
100   FORMAT(12(' '))
C
C THIS IS THE END TO GET JOKER WINNING AMOUNT
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_JOKER_WIN_DIV
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 13 / 01 / 2003
C
C ******************************************************************************
C
C FUNCTION TO GET JOKER WINNING DIVISION
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      CHARACTER * 02 FUNCTION GET_JOKER_WIN_DIV
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET JOKER WINNING DIVISION
C
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C INITIATE VARIABLES WITH DEFAULT VALUE
C
      WRITE(GET_JOKER_WIN_DIV, 100)
C
C IF PAYMENT ORDER HAS NOT JOKER AS A WINNING THEN RETURN
C
      IF(OPS_REC.JOKER_DIV .LE. 0) RETURN
C
C SET JOKER WINNING DIVISION
C
      WRITE(GET_JOKER_WIN_DIV, 200) OPS_REC.JOKER_DIV
C
C FORMATS DEFINITION TO GET JOKER WINNING DIVISION
C
100   FORMAT(2(' '))
200   FORMAT(I2.2)
C
C THIS IS THE END TO GET JOKER WINNING DIVISION
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_GAME_WIN_AMT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 13 / 01 / 2003
C
C ******************************************************************************
C
C FUNCTION TO GET TOTAL WIN AMOUNT FOR REGULAR GAME
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      CHARACTER * 12 FUNCTION GET_GAME_WIN_AMT
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET TOTAL WIN AMOUNT FOR REGULAR GAME
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C VARIABLES DEFINITION TO GET TOTAL WIN AMOUNT FOR REGULAR GAME
C
      INTEGER * 4 DIV                ! DIVISION COUNTER
C
      LOGICAL IT_WINS                ! PAYMEMT ORDER WINS ON REGULAR GAME
C
C INITIATE VARIABLES WITH DEFAULT VALUES
C
      IT_WINS = .FALSE.
      WRITE(GET_GAME_WIN_AMT, 100)
C
C INITIATE VARIALBES WITH DEFAULT VALUES
C
      DO DIV = 1, 6
        IF(OPS_REC.WINS(DIV) .GT. 0) IT_WINS = .TRUE.
      ENDDO
C
C IF PAYMEMT OREDER DOES NOT WIN ON REGULAR GAME THE EXIT
C
      IF(IT_WINS .EQ. .FALSE.) RETURN
C
C  SET TOTAL WIN AMOUNT FOR REGULAR GAME
C
      GET_GAME_WIN_AMT = PRNT_AMT(OPS_REC.TOTAL_GAME, 2)
C
C FORMATS DEFINITION TO GET TOTAL WIN AMOUNT FOR REGULAR GAME
C
100   FORMAT(12(' '))
C
C THIS IS THE END TO GET TOTAL WIN AMOUNT FOR REGULAR GAME
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_JUL_SER_CHK
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 12 / 2002
C
C ******************************************************************************
C
C FUNCTION TO GET JULIAN, SERIAL NUMBER AND CHECK DIGITS FROM PAYMENT ORDER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GET_JUL_SER_CHKD(OPS_REC_JUL_SER, OP_ONLINE, GSAL_JUL_SER)
      IMPLICIT NONE
C
C VARIABLES DEFINITION TO GET JULIAN, SERIAL NUMBER AND CHECK DIGITS
C
      LOGICAL OP_ONLINE                ! PAYMENT ORDER ON LINE ( YES / NO )
C
      CHARACTER * 14 OPS_REC_JUL_SER   ! OPS RECORD JULIAN - SERIAL - CHECK 
      CHARACTER * 15 GSAL_JUL_SER      ! GSALES RECORD JULIAN - SERIAL - CHECK
C
C INITATE VARIABLES WITH DEFAULT VALUE
C
      WRITE(GSAL_JUL_SER, 100)
C
C IF IS AN OFF LINE ORDER WE DON'T NEED TO DO ANYTHING MORE
C
      IF(OP_ONLINE .EQ. .FALSE.) RETURN
C
C SET GSALES JULIAN - SERIAL - CHECK FROM OPS FILE RECORD
C ( IN THIS RECORD SEIAL HAS ONE DIGIT LESS THAN IN GSALES RECORD, THAT'S WHY
C WE NEED TO MAKE THIS CONVERSION -->> ADD ONE ZERO TO SERIAL NUMBER <<-- )
C
      WRITE(GSAL_JUL_SER, 200)
     *
     *      OPS_REC_JUL_SER(01:03),          ! JULIAN
     *      OPS_REC_JUL_SER(04:11),          ! SERIAL NUMBER
     *      OPS_REC_JUL_SER(12:14)           ! CHECK DIGITS 
C
C FORMATS DEFINITION TO GET JULIAN, SERIAL NUMBER AND CHECK DIGITS
C
100   FORMAT(15(' '))
200   FORMAT(A3, '0', A8, A3)
C
C THIS IS THE END TO GET JULIAN, SERIAL NUMBER AND CHECK DIGITS
C
      END
