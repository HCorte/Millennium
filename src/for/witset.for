C SUBROUTINE WITSET
C
C V15 24-MAY-1999 UXN Minimum stake added.
C V14 27-JUL-1998 RXK fix in calculation of REV1  
C V13 05-JUN-1997 UXN Calculation of REV3 changed.
C V12 14-APR-1996 HXK Putting RXK's (Rita's) changes into archive
C V11 03-APR-1996 RXK Calculation of control revision byte changed 
C V10 22-FEB-1996 HXK Fix for blank lines in description
C V09 21-FEB-1996 HXK Fixes for blank descriptions
C V08 19-FEB-1996 HXK Fix for updating game control counter
C V07 09-JUL-1993 GXA Changed description lines from 3 lines * 40 char to 4 
C                     lines * 330 char.
C V06 07-JUL-1993 GXA Swaped order of Control Rev and Draw rev bytes in 
C                     game revision field.
C V05 01-JUL-1993 GXA Released for Finland Dec Conversion / Oddset.
C V04 21-JAN-1993 DAB Initial Release
C                     Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                     DEC Baseline
C V03 09-JUL-1992 GCAN CORRECTED USAGE OF DRAW DATE.
C V02 09-APR-1992 HdB  CLEANED UP PROMPTS, SHOWS DEFAULT
C V01 01-AUG-1990 XXX  RELEASED FOR VAX
C
C WINNERS TIP GAME SETUP
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE WITSET(GIND)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:RECSCF.DEF'
	INCLUDE 'INCLIB:DWIREC.DEF'
	INCLUDE 'INCLIB:RECDAF.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
C
	COMMON SCFREC
	INTEGER*4    DFDB(7),FDB(7),VFDB(7),INPFDB(7),BYTTAB(200)
	INTEGER*2    BDATE(LDATE_LEN),EDATE(LDATE_LEN),DATE(LDATE_LEN)
        INTEGER*2    DDATE(LDATE_LEN)
	INTEGER*4    GNUM,GIND,ST,I,DRW,EXT,LSTAT,WEK,J,YEAR
	INTEGER*4    K,BROW,EROW,CDC,ROW,BUFIND,REV1,REV2,REV3,REV4
	INTEGER*4    PREV3,VERR,SALPER,PRICE
	INTEGER*4    CLEARED
	INTEGER*4    DESCRIPT_LINES
	INTEGER*4    DSCIND
	CHARACTER*6  PASS,OKPASS
	CHARACTER*8  WINT_NAME
	CHARACTER*20 PWORD,CDWIPFN
	EQUIVALENCE  (PASS,PWORD)
	CHARACTER*2  FUN
	INTEGER*4    NAME(WENM_LEN/4),ENAME(WENM_LEN/4)
	INTEGER*4    DNAME(WDES_LEN/4)
	CHARACTER    INPFIL,ANS
	CHARACTER    CENAME(WENM_LEN),CNAME(WENM_LEN),CDNAME(WDES_LEN)
	BYTE         BENAME(WENM_LEN),BNAME(WENM_LEN),BDNAME(WDES_LEN)
	INTEGER*4    TEMP		!used to restore to old values
	EQUIVALENCE  (DWIPFN,CDWIPFN)
	EQUIVALENCE  (NAME,CNAME,BNAME)
	EQUIVALENCE  (DNAME,CDNAME,BDNAME)
	EQUIVALENCE  (ENAME,CENAME,BENAME)
	CHARACTER*12 GSTAT(11)
	DATA GSTAT   /'Not set     ','Game closed ',
     *	              'Info entered','Game open   ',
     *	            3*'End of game ',
     *	              'Drawing done','Game final  ',
     *	              'Cancelled   ','Refund      '/
	CHARACTER*14 CDAY
	INTEGER*2    DAY(7)
	LOGICAL	     TSTFLG
	DATA	     CDAY/'---not set--- '/
	DATA	     OKPASS/'PERKIN'/
	EQUIVALENCE  (CDAY,DAY)
C
        INTEGER*4 M251
        PARAMETER(M251=251)
C
C INITIALIZE / SET VARIABLES 
C
	WRITE(WINT_NAME,990) GTNAMES(TWIT)
	DESCRIPT_LINES = WDES_LEN/30		!30 Bytes / line
C
C CHECK IF WINNERS TIP GAME IS ACTIVE
C
	GNUM=SCFGTN(TWIT,GIND)
	IF(GNUM.LT.1) THEN
	   WRITE(5,991) IAM(),GTNAMES(TWIT),GIND
	   CALL XWAIT(2,2,ST)
	   RETURN
	ENDIF
C
C
	CALL OPENW(1,SCFSFN(1,DAF),4,0,0,ST)
	CALL IOINIT(DFDB,1,DAFSEC*256)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),1,ST,0)
	  RETURN
	ENDIF
C
C
	CALL OPENW(2,SCFGFN(1,GNUM),4,0,0,ST)
	CALL IOINIT(FDB,2,DWISEC*256)
	IF(ST.NE.0)THEN
	  CALL FILERR(SCFGFN(1,GNUM),1,ST,0)
	  CALL CLOSEFIL(DFDB)
	  RETURN
	ENDIF
C
C
	CALL OPENW(3,SCFGVN(1,GNUM),4,0,0,ST)
	CALL IOINIT(VFDB,3,DWISEC*256)
	IF (ST.NE.0) THEN
	   CALL FILERR(SCFGVN(1,GNUM),1,ST,0)
	   CALL CLOSEFIL(DFDB)
	   CALL CLOSEFIL(FDB)
	   RETURN
	ENDIF
C
C
10	CONTINUE
	TSTFLG = .FALSE.
	CALL CLRSCR(5)
	WRITE(5,900)
	CALL WIMG(5,'Enter function: ')
	READ(5,901) FUN
C
C
	IF(FUN.EQ.'EX') THEN
	  CALL CLOSEFIL(DFDB)
	  CALL CLOSEFIL(FDB)
	  CALL CLOSEFIL(VFDB)
	  RETURN
	ENDIF
C
C
	IF(FUN.NE.'LI'.AND.FUN.NE.'MO'.AND.
     *	   FUN.NE.'VE'.AND.FUN.NE.'UN'.AND.
     *	   FUN.NE.'CH')THEN
	  CALL CLRSCR(5)
	  TYPE*,'Invalid input '
	  CALL XWAIT(1,2,ST)
	  GOTO 10
	ENDIF
C
C
	CALL FASTMOV(FDB,INPFDB,7)
	IF(FUN.EQ.'LI'.OR.FUN.EQ.'MO') THEN
15	 CONTINUE
         CALL WIMG(5,'Use (P)rimary or (V)erification file as input?')
	   READ(5,912)INPFIL
	   IF(INPFIL.EQ.'E') GOTO 10
	   IF(INPFIL.EQ.'V') THEN
	     CALL FASTMOV(VFDB,INPFDB,7)
	   ELSE
	     IF(INPFIL.NE.'P')THEN
	       TYPE*,'OPTIONS ARE P, V, AND E ONLY...RETRY.'
	       GOTO 15
	     ENDIF
	   ENDIF
	ENDIF
C
C
20	CONTINUE
	IF(FUN.NE.'LI') CALL CLRSCR(5)
	CALL INPNUM('Enter event number(E-exit) ',DRW,-9999,9999,EXT)
	IF(EXT.LT.0.OR.DRW.EQ.0)GOTO 10
	IF(DRW.LT.1) TSTFLG = .TRUE.
	DRW = ABS(DRW)
	
C
C	Read the previous text checksum
C
	PREV3 = 0
	IF(DRW.GT.1) THEN
	  CALL READW(INPFDB,DRW-1,DWIREC,ST)
	  IF(ST.NE.0) THEN
	    CALL CLRSCR(5)
	    IF(INPFIL.EQ.'V')THEN
	      CALL FILERR(SCFGVN(1,GNUM),2,ST,DRW-1)
	    ELSE
	      CALL FILERR(SCFGFN(1,GNUM),2,ST,DRW-1)
	    ENDIF
	    CALL XWAIT(2,2,ST)
	    GOTO 20
	  ENDIF
	  CALL ILBYTE(PREV3,DWIREV,2)          !GET PREVIOUS TEXT REV #
	ENDIF

C
C
	CALL CLRSCR(5)
	CALL READW(INPFDB,DRW,DWIREC,ST)
	IF(ST.NE.0) THEN
	  CALL CLRSCR(5)
	  IF(INPFIL.EQ.'V')THEN
	    CALL FILERR(SCFGVN(1,GNUM),2,ST,DRW)
	  ELSE
	    CALL FILERR(SCFGFN(1,GNUM),2,ST,DRW)
	  ENDIF
	  CALL XWAIT(2,2,ST)
	  GOTO 20
	ENDIF
C
C
	LSTAT=DWISTS+1
	DO 30 I=1,7
	BDATE(I+6)=DAY(I)
	EDATE(I+6)=DAY(I)
	DDATE(I+6)=DAY(I)
30	CONTINUE
	BDATE(5)=DWIBSD
	IF(BDATE(5).NE.0)CALL LCDATE(BDATE)
	EDATE(5)=DWIESD
	IF(EDATE(5).NE.0)CALL LCDATE(EDATE)
	DDATE(5)=DWIDAT
	IF(DDATE(5).NE.0) CALL LCDATE(DDATE)
	WEK=DWIWEK
	SALPER=DWISPR
	PRICE=DWIPRC
C
C
	IF(FUN.EQ.'MO'.AND.DWISTS.GE.GAMOPN) THEN
	   CALL CLRSCR(5)
	   WRITE(5,992) IAM(),GTNAMES(TWIT),GIND,DRW,IAM()
	   CALL WIMG(5,'Hit return to continue')
	   READ(5,901) ANS
	   GOTO 10
	ENDIF
C
C
	DO 80 J=1,MAXWRW
	  DO 70 K=1,WNMS_LEN/4
	    IF(DWINMS(K,J).EQ.0) DWINMS(K,J)='    '
70	  CONTINUE
80	CONTINUE
C
C
	DO 90 I=1,WENM_LEN/4
	  IF(DWIENM(I).EQ.0) DWIENM(I)='    '
90	CONTINUE
C
C
	IF(FUN.EQ.'MO') GOTO 120
	IF(FUN.EQ.'VE') GOTO 1000
	IF(FUN.EQ.'UN') GOTO 2000
	IF(FUN.EQ.'CH') GOTO 3000
C
C
C DISPLAY GAME DATA
C
	BROW=1
	EROW=19 - DESCRIPT_LINES
105	CONTINUE
	CALL CLRSCR(5)
	WRITE(5,903) GTNAMES(TWIT),GIND,DRW,WEK,GSTAT(LSTAT),
     *		     (DWIENM(K),K=1,WENM_LEN/4)
	DSCIND = 0
	CALL FASTMOV(DWIDES,DNAME,WDES_LEN/4)
	DO I = 1,DESCRIPT_LINES
	   WRITE(5,914) (CDNAME(K),K=DSCIND+1,DSCIND+30)
	   DSCIND = DSCIND + 30
	END DO
        WRITE(5,904) 
     *	(BDATE(I),I=7,13),BDATE(5),(EDATE(I),I=7,13),EDATE(5)
	WRITE(5,905) DISTIM(DWITIM),(DDATE(K),K=7,13),DDATE(5)
        WRITE(5,945) CMONY(DWIPRC,10,BETUNIT)
	WRITE(5,910) (DWIPFN(K),K=1,5), (DWITVC(K),K=1,WTVC_LEN/4)
	DO 110 I=BROW,EROW
	  WRITE(5,906) I,(DWINMS(J,I),J=1,WNMS_LEN/4)
110	CONTINUE
	IF(EROW.NE.MAXWRW) THEN
	   CALL WIMG(5,'Hit return to see remaining rows')
	   READ(5,901) ANS
	   BROW=EROW+1
	   EROW=EROW+19-DESCRIPT_LINES    
	   IF(EROW.GT.MAXWRW) EROW = MAXWRW
	   GOTO 105
	ENDIF
	IF(TSTFLG) THEN
	  WRITE(5,99999) IAM(),'REVISION:   ',DWIREV
	  WRITE(5,99998) IAM(),'DESCRIPT:   ',(DWIDES(K),K=1,WDES_LEN/4)
	ENDIF
	GOTO 20
C
C
C MODIFY GAME DATE
C
C
120	CONTINUE
	WRITE(5,917) IAM()
	WRITE(5,918) IAM(),(BDATE(I),I=7,13) 
	CALL INPDAT(CDC,EXT)
	IF(EXT.NE.0) CDC = DWIBSD
	BDATE(5)=CDC
	CALL LCDATE(BDATE)
C
C
	WRITE(5,919) IAM()
	WRITE(5,918) IAM(),(EDATE(I),I=7,13) 
	CALL INPDAT(CDC,EXT)
	IF(EXT.NE.0) CDC = DWIESD
	EDATE(5)=CDC
	CALL LCDATE(EDATE)
	CALL FIGWEK(CDC-WEEK_OFFSET,WEK,YEAR)
C
C
	WRITE(5,923) IAM()
	WRITE(5,924) IAM(),(DDATE(I),I=7,13)
	CALL INPDAT(CDC,EXT)
	IF(EXT.NE.0) CDC = DWIDAT
	DDATE(5)=CDC
	CALL LCDATE(DDATE)
C
	WRITE(5,921) IAM()
	WRITE(5,922) IAM(),DISTIM(DWITIM)
	TEMP = DWITIM
	CALL INPTIM('Enter time HH:MM:SS....................',DWITIM,EXT)
	IF(EXT.NE.0) DWITIM = TEMP 
C
        WRITE(5,944) IAM(), CMONY(PRICE,10,BETUNIT)
        CALL INPMONY('Enter minimum stake.........',PRICE,BETUNIT,EXT)
        IF(EXT.NE.0) DWIPRC=PRICE
C
C***	WRITE(5,927) IAM()
C***	WRITE(5,928) IAM(),DISPER(DWISPR)
C***	CALL INPPER('Enter pool percentage (E-no change)',SALPER,EXT)
C***	IF(EXT.NE.0) SALPER=DWISPR
C
C
	WRITE(5,929) IAM()
	WRITE(5,930) IAM(),DWIPFN(1)
	WRITE (CDWIPFN,911) GIND,DRW
	CALL WIMG(5,'Enter pool file volume name............')
	READ(5,907) NAME(1)
	IF(NAME(1).NE.'    ') DWIPFN(1)=NAME(1)
C
C
	WRITE(5,931) IAM()
	WRITE(5,932) IAM(),(DWIENM(K),K=1,WENM_LEN/4)
	CALL WIMG(5,'Enter event name.......................')
	CLEARED = 0
	READ(5,933) ENAME
C
C DID HE HIT RETURN?
C
	DO I = 1,WENM_LEN/4
	   IF(ENAME(I).EQ.'    ') CLEARED = CLEARED + 1
	END DO
	IF(CLEARED.EQ.WENM_LEN/4) GOTO 140
C
C DOES HE WANT USS TO CLEAR IT?
C
	IF(CENAME(1).EQ.'+') THEN
	   DO I = 1,WENM_LEN/4
	      ENAME(I) = '    '
	   END DO
	ENDIF
C
C REPLACE NULLS WITH SPACES
C
        DO I = 1,WENM_LEN
           IF(BENAME(I) .EQ. 0) BENAME(I) = ' '
        ENDDO
C
C MOVE THE INPUT OVER.
C
	DO I=1,WENM_LEN/4
	    DWIENM(I) = ENAME(I)
	END DO
C
140	CONTINUE
	WRITE(5,934) IAM()
	DSCIND = 0
	CALL FASTMOV(DWIDES,DNAME,WDES_LEN/4)
	DO I = 1,DESCRIPT_LINES
	   WRITE(5,935) IAM(),I,(CDNAME(K),K=DSCIND+1,DSCIND+30)
	   DSCIND = DSCIND + 30
	END DO
	TYPE*,IAM()
	DSCIND = 0
	CALL WIMG(5,'Description Length<                             ')
	DO I = 1,DESCRIPT_LINES
	   CALL WIMG(5,'Enter description')
	   READ(5,936) (CDNAME(K),K=DSCIND+1,DSCIND+30)
	   DSCIND = DSCIND + 30
	END DO
C
C DID HE HIT RETURN?
C
	CLEARED = 0
	DO I =1,WDES_LEN/4
	   IF(DNAME(I).EQ.'    ') CLEARED = CLEARED + 1
	END DO
        IF (CLEARED .EQ. WDES_LEN/4) THEN
           CLEARED = 0
           DO I = 1,WDES_LEN/4
              IF (DWIDES(I) .EQ. 0) CLEARED = CLEARED + 1
           END DO
           IF (CLEARED .EQ. WDES_LEN/4) THEN
              DO I = 1,WDES_LEN/4
                 DWIDES(I) = '    '
              ENDDO
           ENDIF
           GOTO 165
        ENDIF
C
C DOES HE WANT USS TO CLEAR IT?
C
	IF(CDNAME(1).EQ.'+') THEN
	   DO I = 1,WDES_LEN/4
	      DNAME(I) = '    '
	   END DO
	ENDIF
C
C REPLACE NULLS WITH SPACES
C
        DO I = 1,WDES_LEN
           IF(BDNAME(I) .EQ. 0) BDNAME(I) = ' '
        ENDDO
C
C MOVE THE DESCRIPTION OVER.
C
	DO I = 1,WDES_LEN/4
	   DWIDES(I) = DNAME(I)
	END DO
C
C
165	CONTINUE
	WRITE(5,937) IAM()
	WRITE(5,938) IAM(),(DWITVC(K),K=1,WTVC_LEN/4)
	CALL WIMG(5,'Enter TV-Chanel Name...................')
	READ(5,939) (NAME(K),K=1,WTVC_LEN/4) 
C
C DID HE HOT RETURN?
C
	CLEARED = 0
	DO I = 1,WTVC_LEN/4
	   IF(NAME(I).EQ.'    ') CLEARED = CLEARED + 1
	END DO
	IF(CLEARED.EQ.WTVC_LEN/4) GOTO 300
C
C DOES HE WANT USS TO CLEAR IT?
C
	IF(CNAME(1).EQ.'+') THEN
	   DO I = 1,WTVC_LEN/4
	      NAME(I) = '    '
	   END DO
	ENDIF
C
C MOVE THE NAME OVER.
C
	DO I = 1,WTVC_LEN/4
	   DWITVC(I) = NAME(I)
	END DO
C
C
300	CONTINUE
	TYPE*,IAM()
	CALL INPNUM('Enter row number to be modified (E-Exit)',
     *	      ROW,1,MAXWRW,EXT)
	IF(EXT.LT.0) GOTO 500
C
	
	WRITE(5,940) IAM()
	WRITE(5,941) IAM(),(DWINMS(K,ROW),K=1,WNMS_LEN/4)
	CALL WIMG(5,'Enter Team Name........................')
	READ(5,942) (NAME(K),K=1,WNMS_LEN/4)
C
C DID HE HIT RETURN?
C
	CLEARED = 0
	DO I = 1,WNMS_LEN/4
	   IF(NAME(I).EQ.'    ') CLEARED = CLEARED + 1
	END DO
	IF(CLEARED.EQ.WNMS_LEN/4) GOTO 210
C
C DOES HE WANT USS TO CLEAR IT?
C
	IF(CNAME(1).EQ.'+') THEN
	   DO I = 1,WNMS_LEN/4
	      NAME(I) = '    '
	   END DO
	ENDIF
C
C REPLACE NULLS WITH SPACES
C
        DO I = 1,WNMS_LEN
           IF(BNAME(I) .EQ. 0) BNAME(I) = ' '
        ENDDO
C
C MOVE THE NAME OVER.
C
	DO I = 1,WNMS_LEN/4
	   DWINMS(I,ROW) = NAME(I)
	END DO
210	CONTINUE
	GOTO 300
C
C
500	CONTINUE
	DWIBSD=BDATE(5)
	DWIESD=EDATE(5)
	DWIDAT=DDATE(5)
	DWIWEK=WEK
	DWISTS=GAMINF
	DWIDRW=DRW
	DWISPR=SALPER
	DWIPRC=PRICE
	DO 510 I=1,MAXWRW
	  DWISTA(I)=0
	  IF(DWINMS(1,I).NE.'    ') DWISTA(I)=GAMINF
510	CONTINUE
C
C CREATE TABLE OF TEXT MESSAGE TO CHECKSUM FOR REV
C
	BUFIND=1
C
C LOAD UP EVENT NAME AND EVENT DESCRIPTIONS
C
	CALL MOVBYT(DWIENM(1),1,BYTTAB,BUFIND,WENM_LEN)
	BUFIND = BUFIND + WENM_LEN
	CALL MOVBYT(DWIDES(1),1,BYTTAB,BUFIND,WDES_LEN)
	BUFIND = BUFIND + WDES_LEN
C
C LOAD UP PLAYER NAMES
C
	DO I = 1,MAXWRW                     !FOR ALL ROWS
	   IF(DWINMS(1,I).NE.'    ') THEN
	      CALL MOVBYT(DWINMS(1,I),1,BYTTAB,BUFIND,WNMS_LEN-2)
	      BUFIND = BUFIND + (WNMS_LEN-2)
	   ENDIF
	END DO
	BUFIND = BUFIND - 1
C
	CALL CHECKSUM(BYTTAB,1,BUFIND,REV4)
	CALL ILBYTE(REV1,DWIREV,0)	    
        IF(DWIDRW.EQ.M251-1) THEN
           REV1 = MOD(REV1+DWIDRW,(M251-10))+ 1
        ELSE
           REV1 = MOD(REV1+DWIDRW,M251)+ 1
        ENDIF
	REV2 = MOD(DWIDRW,255)
	CALL ILBYTE(REV3,DWIREV,2)          !GET PREVIOUS TEXT REV #
	REV3 = MOD(PREV3 + REV3,255) + 1
	CALL ISBYTE(REV1,DWIREV,0)          !CONTROL REV BYTE (SEQUENCE#)
	CALL ISBYTE(REV2,DWIREV,1)          !DRAW REV BYTE
	CALL ISBYTE(REV3,DWIREV,2)          !TEXT REV # BYTE  (SEQUENCE#)
	CALL ISBYTE(REV4,DWIREV,3)          !TEXT CHECKSUM BYTE
	CALL WRITEW(INPFDB,DRW,DWIREC,ST)
	IF(ST.NE.0)THEN
	   CALL CLRSCR(5)
	   IF (INPFIL.EQ.'V')THEN
	      CALL FILERR(SCFGVN(1,GNUM),3,ST,DRW)
	   ELSE
	      CALL FILERR(SCFGFN(1,GNUM),3,ST,DRW)
	   ENDIF
	   GOTO 10
	ENDIF
	GOTO 20
C
C
C VERIFICATION
C
1000	CONTINUE
	CALL CLRSCR(5)
	CALL PASSWORD(5,PWORD)
	IF(PASS.NE.OKPASS) THEN
	  TYPE*,'Invalid password entered'
	  CALL XWAIT(2,2,ST)
	  GOTO 10
	ENDIF
	VERR=0
C
C
	IF(DWISTS.EQ.GAMOPN) THEN
	  TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,' already verified'
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	IF(DWISTS.NE.GAMINF) THEN
	  TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,' invalid status ',
     *          DWISTS
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	IF(DWIBSD.GT.DWIESD) THEN
	  TYPE*,IAM(),'Begining sales date greater then ending sales date'
	  VERR=VERR+1
	ENDIF
C
C
	IF(DWIBSD.EQ.0) THEN
	  TYPE*,IAM(),'Begining sales date not set '
	  VERR=VERR+1
	ENDIF
C
C
	IF(DWIDAT.LT.DWIESD) THEN
	  TYPE*,IAM(),'Event date is before last sales date'
	  VERR=VERR+1
	ENDIF
C
C
	IF(DWIESD.EQ.0) THEN
	  TYPE*,IAM(),'Ending sales date not set'
	  VERR=VERR+1
	ENDIF
C
C
	IF(DWIPRC.EQ.0) THEN
	  TYPE*,IAM(),'Base price not set'
	  VERR=VERR+1
	ENDIF
C
C
	IF(DWISPR.EQ.0) THEN
	  TYPE*,IAM(),'Pool percentage not set'
	  VERR=VERR+1
	ENDIF
C
C
	IF(VERR.NE.0) THEN
        TYPE*,IAM(),VERR,' data entry errors for ',WINT_NAME,
     *        GIND,' event ',DRW
	  TYPE*,IAM(),'Event has not been verified'
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	DO 1020 I=DWIBSD,DWIESD
	DATE(5)=I
	CALL LCDATE(DATE)
	CALL READW(DFDB,I,DAFREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),2,ST,I)
	  GOTO 10
	ENDIF
C
C
	IF(DAFSTS.GT.DSOPEN) THEN
	  WRITE(5,908) (DATE(K),K=7,13)
	  VERR=VERR+1
	ENDIF
C
C
	IF(DAFDRW(GNUM).NE.0.AND.DAFDRW(GNUM).NE.DRW) THEN
	  WRITE(5,909) (DATE(K),K=7,13),GIND,DAFDRW(GNUM)
	  VERR=VERR+1
	ENDIF
1020	CONTINUE
C
C
	IF(VERR.NE.0) THEN
	  TYPE*,IAM(),VERR,' game date errors for ',WINT_NAME,
     *          GIND,' event ',DRW
	  TYPE*,IAM(),'Event has not been verified'
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	DWISTS=GAMOPN
	DO 1030 I=1,MAXWRW
	IF(DWISTA(I).EQ.GAMINF) DWISTA(I)=GAMOPN
1030	CONTINUE
C
C
	DO 1040 I=DWIBSD,DWIESD
	CALL READW(DFDB,I,DAFREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),2,ST,I)
	  GOTO 10
	ENDIF
	DAFDRW(GNUM)=DRW
	CALL WRITEW(DFDB,I,DAFREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),3,ST,I)
	  GOTO 10
	ENDIF
1040	CONTINUE
C
C
	 CALL WRITEW(FDB,DRW,DWIREC,ST)
	 IF(ST.NE.0) THEN
	   CALL FILERR(SCFGFN(1,GNUM),3,ST,DRW)
	   GOTO 10
	 ENDIF
	 TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,' verify complete'
	 CALL WIMG(5,'Hit return to continue')
	 READ(5,901) ANS
	 GOTO 10
C
C
2000	CONTINUE
	CALL CLRSCR(5)
	CALL PASSWORD(5,PWORD)
	IF(PASS.NE.OKPASS) THEN
	  TYPE*,IAM(),'Invalid password entered'
	  CALL XWAIT(2,2,ST)
	  GOTO 10
	ENDIF
C
C
	IF(DWISTS.LE.GAMINF) THEN
	  TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,' has not been verified '
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	IF(DWISTS.GT.GAMOPN) THEN
	  TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,' has already ended'
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
C
	DO 2010 I=DWIBSD,DWIESD
	CALL READW(DFDB,I,DAFREC,ST)
	IF(DAFSTS.GT.GAMOPN) THEN
	  TYPE*,IAM(),WINT_NAME,GIND,' currently active, cannot be changed'
	  CALL WIMG(5,'Hit return to continue')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
2010	CONTINUE
C
C
	DWISTS=GAMINF
	DO 2020 I=1,MAXWRW
	IF(DWISTA(I).EQ.GAMOPN) DWISTA(I)=GAMINF
2020	CONTINUE
C
C
	DO 2030 I=DWIBSD,DWIESD
	CALL READW(DFDB,I,DAFREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),2,ST,I)
	  GOTO 10
	ENDIF
	DAFDRW(GNUM)=0
	CALL WRITEW(DFDB,I,DAFREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFSFN(1,DAF),3,ST,I)
	ENDIF
2030	CONTINUE
C
C
	CALL WRITEW(FDB,DRW,DWIREC,ST)
	IF(ST.NE.0) THEN
	  CALL FILERR(SCFGFN(1,GNUM),3,ST,DRW)
	  GOTO 10
	ENDIF
	TYPE*,IAM(),WINT_NAME,GIND,' event ',DRW,
     *	 'is un-verified and can be modified'
	CALL WIMG(5,'Hit return to continue')
	READ(5,901) ANS
	GOTO 10
C
C  Check and validate data file.
C
3000	CONTINUE
	IF((FUN.EQ.'CH').AND.(DWISTS.GE.GAMOPN))THEN
	  CALL CLRSCR(5)
        TYPE*,IAM(),WINT_NAME,GIND,' EVENT ',DRW,
     *        ' DATA HAS BEEN VERIFIED.'
	  TYPE*,IAM(),' CHANGES CANNOT BE MADE UNLESS EVENT IS UNVERIFIED.'
	  CALL WIMG(5,'HIT RETURN TO CONTINUE.')
	  READ(5,901) ANS
	  GOTO 10
	ENDIF
C
	CALL WICOMP(FDB,VFDB,GIND,DRW,GNUM,ST)
C
	IF (ST.NE.0)TYPE*,IAM(),' ERROR IN WICOMP, ST IS: ',ST
	GOTO 20
C
C  Format statements.
C
900	FORMAT(' LI - List event data',/,
     *	       ' MO - Modify event data',/,
     *	       ' VE - Verify event data',/,
     *	       ' UN - Unverify event data',/,
     *	       ' CH - Check event data',/,
     *	       ' EX - Return to main menu',/)
901	FORMAT(A2)
902	FORMAT(3A4)
903	FORMAT(1X,A8,I1,1X,'Draw ',I4.4,1X,'Week ',I2.2,
     *	       1X,'*',A14,'*',' Name ',<WENM_LEN/4>A4)
904	FORMAT(' Sales dates  ',7A2,'  Cdc - ',I4,
     *	               '  < to >  ',7A2,'  Cdc - ',I4)
905	FORMAT(' Row      Name',12X,'Time ',A8,1X,
     *	 ' Event date ',7A2,'  Cdc - ',I4)
906	FORMAT(1X,I2.2,1X,<WNMS_LEN/4>A4)
907	FORMAT(A4)
908	FORMAT(1X,7A2,' has an invalid day status ')
909	FORMAT(1X,7A2,' is already active for Winners Tip ',I1,' event ',I4)
910	FORMAT(1X,'Pool file name ',5A4,' TV-Chanel Name: ',<WTVC_LEN/4>A4)
911	FORMAT(4X,':W',I1,'P',I4.4,'.FIL    ')
912	FORMAT(A)
913	FORMAT(5A4)
914	FORMAT(1X,'( ',30A1' )')
915     FORMAT(1X,'Base price ',A10)
916     FORMAT(1X,'Pool percentage ',F8.3)

917	FORMAT(1X,A,'Begining sales date')
918	FORMAT(1X,A,'Current is, (E-no change)...............',7A2)
C
919	FORMAT(1X,A,'Ending sales date')
C
921	FORMAT(1X,A,'Close time')
922	FORMAT(1X,A,'Current is, (E-no change)...............',A8)

923	FORMAT(1X,A,'Event date')
924	FORMAT(1X,A,'Current is, (E-no change)...............',7A2)

925	FORMAT(1X,A,'Base price')
926	FORMAT(1X,A,'Current: ',A10,' (E-no change)')

927	FORMAT(1X,A,'Pool percentage')
928	FORMAT(1X,A,'Current: ',F8.3,' (E-no change)')

929	FORMAT(1X,A,'Pool file volume name')
930	FORMAT(1X,A,'Current is, (RETURN for System Volume)..',3A4)

931	FORMAT(1X,A,'Event name')
932	FORMAT(1X,A,'(RETURN no change /+ clear)',<WENM_LEN/4>A4)
933	FORMAT(<WENM_LEN>A4)

934	FORMAT(1X,A,'Discription lines (RETURN no change /+ clear)')
935	FORMAT(1X,A,'Description Line<',I1,'>',30A1)
936	FORMAT(30A1)

937	FORMAT(1X,A,'TV-Chanel Name')
938	FORMAT(1X,A,'Current is, (RETURN no change /+ clear)',
     *         <WTVC_LEN/4>A4)
939	FORMAT(<WTVC_LEN/4>A4)

940	FORMAT(1X,A,'Team name')
941	FORMAT(1X,A,'Current is, (RETURN no change /+ clear)',
     *         <WNMS_LEN/4>A4)
942	FORMAT(<WNMS_LEN/4>A4)
C
990	FORMAT(A8)
991	FORMAT(1X,A,'Sorry, ',A8,1X,I1,' game not active')
992	FORMAT(1X,A,A8,1X,I1,' draw ',I4,' has been verified',/,
     *         1X,A,A8,'Changes can not be made unless event ',
     *                 'is UNverified')
944     FORMAT(1X,A,'Current stake .....................',A10)
945     FORMAT(1X,'Minimum stake   ',A10)
99998   FORMAT(1X,A,<WDES_LEN/4>A4)
99999	FORMAT(1X,A,A12,Z8)	
	END
