C
C PROGRAM W4CLRSTA
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2CLRSTA.FOV                                 $
C  $Date::   17 Apr 1996 16:14:02                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
c v02 05-SEP-95 DAS ADDED PVCS HEADER TO LEIPZIG CODE
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM W4CLRSTA
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
C
	INTEGER*4 ST, OFF, OPTION
	INTEGER*4 SUBNETWORK/-2/
	INTEGER*4 TOTAL_RESET	
	INTEGER*4 TOTAL_ERR
	INTEGER*4 TOTAL_DISC	
	INTEGER*4 TOTAL_ACK
	INTEGER*4 TOTAL_CNT_ACTIVE
	INTEGER*4 TOTAL_RESET_TERMS	
	INTEGER*4 TOTAL_ERR_TERMS	
	INTEGER*4 TOTAL_DISC_TERMS		
	INTEGER*4 TOTAL_ACK_TERMS	
	INTEGER*4 TOTAL_CNT_ACTIVE_TERMS
	INTEGER*4 STN_SUBNETWORK, CLASS
	INTEGER*4 TOTAL_TERMINALS

C
100	CONTINUE
	TYPE *
	TYPE *,' << X2CLRSTA  Program to Clear/Display Statistics V01 >>'
	TYPE *
	TYPE *,'  1. Reset Count'
	TYPE *,'  2. Disconnect Count'
	TYPE *,'  3. Ack Count '
	TYPE *,'  4. Error Count'
	TYPE *,'  5. Network Delay'
	TYPE *,'  6. Active Count'
	TYPE *,'  7. All Tables '
	TYPE *,'  8. Display total number for these stats'
	TYPE *,'  9. Set subnetwork number ',SUBNETWORK
	TYPE *,' 10. Clear all download stats '
	TYPE *,'  E. Exit '
C
	CALL INPNUM('Enter desired option: ',OPTION,1,10,ST)
	IF(ST.NE.0) STOP 'bye bye boys'

C
	GOTO (1000,2000,3000,4000,5000,6000,7000,8000,9000,10000) OPTION
 
1000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 1101, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XS_RESET_CNT(OFF)=0
1101	CONTINUE
	GOTO 100
C
2000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 2102, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XS_DISC_CNT(OFF)=0
2102	CONTINUE
	GOTO 100
C
3000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 3103, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XS_ACK_CNT(OFF)=0
3103	CONTINUE
	GOTO 100
C
4000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 4104, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XS_ERR_CNT(OFF)=0
4104	CONTINUE
	GOTO 100
C
5000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 5105, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XS_CNT_ACTIVE(OFF)=0
5105	CONTINUE
	GOTO 100
C
6000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 6106, OFF=1,X2X_TERMS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XT_NETWORK_DELAY(OFF)=0
6106	CONTINUE
C****	CALL FASTSET(0,X2XA_X25DELAY,X2X_MAXDELAY+1)
	GOTO 100
C
7000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	DO 7107, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) THEN
		X2XS_RESET_CNT(OFF)=0
		X2XS_DISC_CNT(OFF)=0
		X2XS_ACK_CNT(OFF)=0
		X2XS_ERR_CNT(OFF)=0
		X2XS_CNT_ACTIVE(OFF)=0
	   ENDIF
7107	CONTINUE
	DO 7108, OFF=1,X2X_TERMS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) 
     *	   X2XT_NETWORK_DELAY(OFF)=0
7108	CONTINUE
C****	CALL FASTSET(0,X2XA_X25DELAY,X2X_MAXDELAY+1)    !!!!!!!
	GOTO 100
C
8000	CONTINUE
	IF (SUBNETWORK.LT.-1) THEN
	    TYPE *,'Invalid subnetwork '
	    GOTO 100
	ENDIF
	TOTAL_RESET=0
	TOTAL_ERR=0
	TOTAL_DISC=0
	TOTAL_ACK=0
	TOTAL_CNT_ACTIVE=0
	
	TOTAL_RESET_TERMS=0
	TOTAL_ERR_TERMS=0
	TOTAL_DISC_TERMS=0
	TOTAL_ACK_TERMS=0
	TOTAL_CNT_ACTIVE_TERMS=0
	TOTAL_TERMINALS=0

	DO 8180, OFF=1,X2X_STATIONS
	   STN_SUBNETWORK=-2
	   CLASS=X2XS_STNCLS(OFF)
	   IF (CLASS.NE.0) STN_SUBNETWORK=X2XC_SUBNETWORK(CLASS)
	   IF (STN_SUBNETWORK.EQ.SUBNETWORK .OR.
     *	       SUBNETWORK.EQ.-1) THEN
		TOTAL_RESET=TOTAL_RESET+X2XS_RESET_CNT(OFF)
		TOTAL_ERR=TOTAL_ERR+X2XS_ERR_CNT(OFF)
		TOTAL_DISC=TOTAL_DISC+X2XS_DISC_CNT(OFF)
		TOTAL_ACK=TOTAL_ACK+X2XS_ACK_CNT(OFF)
		TOTAL_CNT_ACTIVE=TOTAL_CNT_ACTIVE+X2XS_CNT_ACTIVE(OFF)

		IF (X2XS_RESET_CNT(OFF).NE.0) 
     *		      TOTAL_RESET_TERMS=TOTAL_RESET_TERMS+1
		IF (X2XS_ERR_CNT(OFF).NE.0)
     *		TOTAL_ERR_TERMS=TOTAL_ERR_TERMS+1
		IF (X2XS_DISC_CNT(OFF).NE.0)
     *		TOTAL_DISC_TERMS=TOTAL_DISC_TERMS+1
		IF (X2XS_ACK_CNT(OFF).NE.0)
     *		TOTAL_ACK_TERMS=TOTAL_ACK_TERMS+1
		IF (BX2XS_STATE(OFF).EQ.X2XS_INIT)
     *		TOTAL_CNT_ACTIVE_TERMS=TOTAL_CNT_ACTIVE_TERMS+1
		TOTAL_TERMINALS=TOTAL_TERMINALS+1
	    ENDIF
8180	CONTINUE
	TYPE*
	TYPE 8900,TOTAL_ERR,  ' errors',TOTAL_ERR_TERMS
	TYPE 8900,TOTAL_RESET,' Resets ',TOTAL_RESET_TERMS
	TYPE 8900,TOTAL_DISC, ' disconnects ',TOTAL_DISC_TERMS
	TYPE 8900,TOTAL_ACK,  ' acks ',TOTAL_ACK_TERMS
	TYPE 8900,TOTAL_CNT_ACTIVE_TERMS,' active ',TOTAL_TERMINALS
8900	FORMAT(1X,I7,A,T30,'+++ no of terminals =',I7)
	GOTO 100
C
9000	CONTINUE
	CALL INPNUM('Enter subnetwork no (-1 all) ',SUBNETWORK,-1,254,ST)
	GOTO 100
10000	  CONTINUE
	  CALL FASTSET(0,DLLREQ_LAST,3*NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_HIGH,3*NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_TIME,NUMAGT)
	  CALL FASTSET(0,DLLREQ_BAD_ORDER,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_BAD_SAME,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_BAD_SAME_MCP,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_TOTAL,NUMAGT/2)
	  CALL FASTSET(0,RE_LOADS_PER_INTERVAL,
     *				  2*MAXLOADS*MAXAPP*(RE_MAX_SUBNET+1))
	  CALL FASTSET(0,RE_LOADS_TOTAL,
     *				  MAXLOADS*MAXAPP*(RE_MAX_SUBNET+1))
	  CALL FASTSET(0,RE_TERMINALS_PER_INTERVAL,
     *				  2*MAXLOADS*MAXAPP*(RE_MAX_SUBNET+1))
	  CALL FASTSET(0,RE_STATIONS_PER_INTERVAL,
     *				  2*MAXLOADS*MAXAPP*(RE_MAX_SUBNET+1))
	  CALL FASTSET(0,RE_LAST_REFRESH_TIME,RE_MAX_SUBNET+1)
C							      INTERVAL
	  CALL FASTSET(0,RE_TOTAL_REQUESTS_GRAPH,(RE_MAX_TOT_GRAPH+1)*
     *					(RE_MAX_SUBNET+1))!
	  CALL FASTSET(0,RE_TOTAL_REQUESTS,RE_MAX_SUBNET+1)
	  CALL FASTSET(0,RE_SEG0_TOTAL,
     *				  MAXLOADS*MAXAPP*(RE_MAX_SUBNET+1))
	  CALL FASTSET(0,DLLREQ_TOTAL,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_LAST,NUMAGT)
	  CALL FASTSET(0,DLLREQ_HIGH,NUMAGT)
	  CALL FASTSET(0,DLLREQ_TIME,NUMAGT)
	  CALL FASTSET(0,DLLREQ_TIME_STATION,NUMAGT)
	  CALL FASTSET(0,DLLREQ_BAD_ORDER,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_BAD_SAME,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_TOTAL,NUMAGT/2)
	  CALL FASTSET(0,DLLREQ_TIME,NUMAGT)
	  CALL FASTSET(0,X2XS_LAST_ERR_CODE,X2X_STATIONS)
	  GOTO 100
C
	END
