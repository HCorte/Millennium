C
C PARAMETERS DEFINITION TO PRINT OVERFLOW WARNING
C
C
C     FILE   : BSAGTCTL_OLD.FOR
C     AUTHOR : J.H.R
C     VERSION: 01            DATE: 23 / 07 / 2001
C
C
C V03 JHR/FRP COMMENT FOR TOTOGOLO (NOT PLAYED ANYMORE FOR BATCH2 TOTOBOLA CHANGES)
C V02 JHR ADDED BETSLEEP SUMMARY / LABELS ( MAPA RESUMO DAS MATRIZES ) REPORT
C V01 JHR INITIAL RELEASE FOR PORTUGAL PROJECT
C
C BETSLEEP AGENT CONTROL ( CONTROLO DO MIVIMENTO DOS AGENTES ) REPORT
C
C THIS PROGRAM CALCULATES HOW MANY BETSLEEPS ( MATRICES ) ARE SPEND BY EVERY
C AGENT, AND GENERATES ONE REPORT TO SEND IT TO EACH AGENT.
C
C 
C NOTE:
C
C     IF WE CHANGE SOMETHIN IN THE SOFTWARE AND WE WANT TO PUT NEW SOFTWARE
C   IN LIVE SYSTEMS, THIS CAN BE DONE ONLY ON SATURDAYS WHEN STOPSYS IS
C   FINISHED ( BECAUSE ON SUNDAY WE CREATE A NEW MATRIX FILE )
C
C     **************************************************************************
C
C        THIS ITEM IS THE PROPERTY OF GTECH CORPORATION, POVIDENCE, RHODE
C     ISLAND, AND CONTAINS CONFIDENTIAL AND TRADE SECRET INFORMATION. IT MAY
C     NOT BE TRANSFERRED FROM THE CUSTODY OR CONTROL OF GTECH EXCEPT AS AUTO -
C     RIZED IN WRITING BY AN OFFICER OF GTECH. NEITHER THIS ITEM NOR THE
C     INFORMATION IT CONTAINS MAY BE USED, TRANSFERRED, REPRODUCED, PUBLISHED
C     OR DISCLOSED, IN WHOLE OR IN PART, AND DIRECTLY OR INDIRECTLY, EXCEPT AS
C     EXPRESSLY AUTHORIZED BY AN OFFICER OR GTECH, PURSUANT TO WRITTEN AGREEMENT
C
C     Copyright 2000 GTECH Corporation. All Rigth Reserved
C
C     **************************************************************************
C
C THIS PROGRAM GENERATES "CONTROLO DO MOVIMENTO DOS AGENTES" REPORT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      PROGRAM BSAGTCTL_OLD
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GENERATE "CONTROLO DO MOVIMENTO" REPORT
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C DISPLAY TASK PRESENTATION TO USER, ONLY IF IT IS A SUBPROCEDURE
C
      IF(ISSUBPROC() .EQ. .TRUE.) CALL DSP_TASK_PRESENTATION
C
C CHECK IF IS AN AUTHOMATIC PROCEDURE OR IF TASK IS RUNNING BY AN USER
C
      CALL SET_DEFAULT_USER_OPTIONS
      IF(ISSUBPROC() .EQ. .FALSE.) CALL GET_USER_OPTIONS
C
C INITIATE PROGRAM VARIABLES VALUES DEPENDING OF USER SELECTION
C
      CALL INIT_BSAGTCTL_PROGRAM_VARS      
C
C IF USER SELECTED CREATE NEW MATRIX AGENT FILE, CREATE THE FILE
C
      IF(USRGENFIL .EQ. .TRUE.) CALL GENERATE_MATRIX_AGENT_FILE
C
C OPEN SYSTEM FILE NAMES ( MTMF01.FIL, ASF.FIL, MTXAGTCTLxxxx.FIL )
C
      CALL OPEN_ALL_SYSTEM_FILES
C
C IF USER SELECTED UPDATE WITH ON LINE INFORMATION, UPDATE WITH ON LINE INFO
C
      IF(USRUPDONL .EQ. .TRUE.) CALL UPDATE_WITH_ON_LINE_INFO
C
C IF USER SELECTED UPDATE WITH OFF LINE INFORMATION, UPDATE WITH OFF LINE INFO
C
C     IF(USRUPDOFF .EQ. .TRUE.) CALL UPDATE_WITH_OFF_LINE_INFO
C
C UPDATE MATRIX FILE WIT MEMORY VALUES ( ONLY IF UPDATES )
C
      IF(USRUPDONL .OR. USRUPDOFF) CALL UPDATE_MATRIX_FILE_WITH_MEMORY
C
C IF USER SELECTED GENERATE MATRIX REPORT, GENERATE MATRIX REPORT
C
      IF(USRGENRPT .EQ. .TRUE.) CALL GENERATE_MATRIX_REPORT
C
C CLOSE ALL SYSTEM FILES ( MTMF01.FIL, ASF.FIL, MTXAGTCTLxxxx.FIL )
C
       CALL CLOSE_ALL_SYSTEM_FILES
C
C ALL PROCEDURES SELECTED BY USER ARE FINISHED OK
C
      CALL GSTOP(GEXIT_SUCCESS)
C
C THIS IS THE END TO GENERATE "CONTROLO DO MOVIMENTO" REPORT
C
      END


C ******************************************************************************
C
C     SUBROUTINE: SEAR_WAGER_INDEX_POSITION
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION THAT SCAN MTM01.FIL FILE AND UPDATE MATRIX TOTAL IN MEMORY
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE UPDATE_WITH_ON_LINE_INFO
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO UPDATE MATRIX ON LINE INFORMATION
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:PRMLOG.DEF'
C
C VARIABLES DEFINITION TO UPDATE MATRIX ON LINE INFORMATION
C
      INTEGER * 4 MTMSERNUM           ! MTMF TRANSACTION SERIAL NUMBER
      INTEGER * 4 LOGREC(LREC * 3)    ! LOGGER REGISTER
C
      LOGICAL EOF                     ! END OF FILE
C
C INITIATE VARIABLES TO TO UPDATE MATRIX ON LINE INFORMATION
C
      MTMSERNUM = 1
C
C DISPLAY USER INFORMATION ( PROGRAM IS UPDATING ON LINE INFORMATION )
C
      TYPE *, IAM()
      TYPE *, IAM(), 'Reading Transaction Master File ...'
      TYPE *, IAM()
C
C READ TRANSACTION FROM MASTER FILE
C
2000  CONTINUE
      EOF = .FALSE.
      CALL READTMF(LOGREC, MTMSERNUM, EOF)
      IF(EOF) GOTO 1000
C
C CHECK IF TRANSACTION SHOULD BE PRINTED, IF NOT, GO TO READ NEXT TRANSACTION
C
      CALL LOGTRA(TRABUF, LOGREC)
      IF(TRABUF(TTER) .LE. 0) GOTO 2000
      IF(TRABUF(TTIM) .LT. 0) GOTO 2000
      IF(TRABUF(TSER) .LT. 1) GOTO 2000
      IF(TRABUF(TERR) .NE. NOER) GOTO 2000
C
C CHECK IF TRANSACTION SHOULD BE UPDATED OR NOT ( ONLY UPDATE WAGERS )
C
      IF(TRABUF(TTYP) .NE. TWAG) GOTO 2000
C
C CHECK IF TRANSACTION SHOULD BE UPDATED OR NOT ( GOOD STAT / GOOD TRANSACTION )
C
      IF(TRABUF(TSTAT) .NE. GOOD) GOTO 2000
C
C CHECK GAME NUMBER ( ONLY TOTOBOLA, TOTOGOLO, LOTO, LOTO2 AND JOKER )
C
      IF(TRABUF(TGAM) .NE. 1 .AND.      ! TOTOBOLA
     *   TRABUF(TGAM) .NE. 2 .AND.      ! TOTOLOTO
     *   TRABUF(TGAM) .NE. 4 .AND.      ! LOTTO 2
     *   TRABUF(TGAM) .NE. 5 .AND.      ! JOKER
     *   TRABUF(TGAM) .NE. 6)           ! TOTOGOLO
     * THEN
         GOTO 2000
       ENDIF
C
C UPDATE MAXTRIX WITH ON LINE INFORMATION
C
      CALL UPDATE_MATIX_WITH_ON_LINE(TRABUF)
C
C GO TO READ NEXT TRANSACTION TO MTMF01.FIL FILE
C
      GOTO 2000
C
C END FOR READ TRANSACTION MASTER FILE ( MTMF01.FIL )
C
1000  CONTINUE
C
C END OF READ TRANSACTION MASTER FILE
C
      RETURN
C
C THIS IS THE END TO UPDATE MATRIX ON LINE INFORMATION 
C
      END


C ******************************************************************************
C
C     SUBROUTINE: UPDATE_MATIX_WITH_ON_LINE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 12 / 02 / 2001
C
C ******************************************************************************
C
C FUNCTION TO UPDATE MATRIX TABLE WITH ON LINE INFORMATION
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE UPDATE_MATIX_WITH_ON_LINE(TRABUF)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO UPDATE MATRIX TABLE WITH ON LINE INFORMATION
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
C
C VARIABLES DEFINITION TO UPDATE MATRIX TABLE WITH ON LINE INFORMATION
C
      INTEGER * 4 TPWAG      ! TYPE OF WAQGER POSITION ( SIMPLE / MULTIPLE )
      INTEGER * 4 NWEEK      ! NUMBER OF WEEK POSITION
      INTEGER * 4 GNUM       ! GAME NUNBER POSITION
      INTEGER * 4 IDXWAG     ! INDEX NUMBER OF WAGERS POSITION
      INTEGER * 4 TOTMTX     ! TOTAL MATRIX VALUE
      INTEGER * 4 NUMWAGERS  ! NUMBER OF WAGERS
      INTEGER * 4 TERM       ! TERMINAL NUMBER
C
C SET TYPE OF WAGER, SIMPLE OR MULTIPLE
C
      TPWAG = SMPWAG
      IF(TRABUF(TWSYST) .GT. 0) TPWAG = MLTWAG
C
C SET DURATION, NUMBER OF WEEKS
C
      NWEEK = WEEK1
      IF(TRABUF(TWDUR) .NE. 1) NWEEK = WEEK5
C
C SET GAME NUMBER
C
      IF(TRABUF(TGAM) .EQ. 1) GNUM = TBLGAM
      IF(TRABUF(TGAM) .EQ. 2) GNUM = LOTGAM 
      IF(TRABUF(TGAM) .EQ. 4) GNUM = LO2GAM
      IF(TRABUF(TGAM) .EQ. 6) GNUM = TGLGAM
C
C SET INDEX NUMBER OF WAGERS IN ARRAY POSITION
C
      NUMWAGERS = TRABUF(TWSIMP)
      CALL SEARCH_WAGER_INDEX_POSITION(NUMWAGERS, IDXWAG)
C
C SET TERMINAL NUMBER 
C
      TERM = TRABUF(TTER)
C
C SET THAT THIS AGENT HAS BEEN UPDATED IN MEMORY
C
      AGTUPD(TERM) = TRABUF(TAGT)
C
C UPDATE MATRIX TABLE WITH ON LINE INFORMATION ( COUNTER )
C
      TOTMTX = UPDMTX(TOTCNT, TPWAG, NWEEK, GNUM, IDXWAG, TERM)
      TOTMTX = TOTMTX + 1
      UPDMTX(TOTCNT, TPWAG, NWEEK, GNUM, IDXWAG, TERM) = TOTMTX
C
C UPDATE MATRIX TABLE WITH ON LINE INFORMATION ( WAGERS )
C
      TOTMTX = UPDMTX(TOTWAG, TPWAG, NWEEK, GNUM, IDXWAG, TERM)
      TOTMTX = TOTMTX + NUMWAGERS
      UPDMTX(TOTWAG, TPWAG, NWEEK, GNUM, IDXWAG, TERM) = TOTMTX
C
C IF WAGER DOES NOT PLAY JOKER WE DO NOT HAVE TO DO ANYTHING
C
      IF(TRABUF(TWKFLG) .EQ. 0 .AND. TRABUF(TWKFLG2) .EQ. 0) RETURN
C
C UPDATE MATRIX TABLE WITH ON LINE INFORMATION FOR JOKER ( COUNTER )
C
      TOTMTX = UPDMTX(TOTJOK, TPWAG, NWEEK, GNUM, IDXWAG, TERM)
      TOTMTX = TOTMTX + 1
      UPDMTX(TOTJOK, TPWAG, NWEEK, GNUM, IDXWAG, TERM) = TOTMTX
C
C THIS IS THE END TO UPDATE MATRIX TABLE WITH ON LINE INFORMATION
C
      END


C ******************************************************************************
C
C     SUBROUTINE: UPDATE_MATRIX_FILE_WITH_MEMORY
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION THAT WRITE MEMORY VALUES IN MATRIX AGENT FILE
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE UPDATE_MATRIX_FILE_WITH_MEMORY
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO WRITE MEMORY VALUES IN MATRIX AGENT FILE
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C VARIABLES DEFINITION TO WRITE MEMORY VALUES IN MATRIX AGENT FILE
C
      INTEGER * 4 FSTS          ! FUNCTION STATUS
      INTEGER * 4 TERM          ! TERMINAL COUNTER
      INTEGER * 4 TOTPOS        ! TOTAL POSITION COUNTER
      INTEGER * 4 WEEK          ! WEEK POSITION COUNTER
      INTEGER * 4 GNUM          ! GAME POSITION COUNTER
      INTEGER * 4 WAG           ! WAGER POSITION COUNTER
      INTEGER * 4 MTXVAL        ! MATRIX UPDATE VALUE ( TEMPORAL VARIABLE )
C
C INTITIATE VARIABLES TO WRITE MEMORY VALUES IN MATRIX AGENT FILE
C
      TERM = 1
C
C DISPLAY MESSAGE TO USER ( UPDATING MATRIX FILE )
C
      TYPE *, IAM()
      TYPE *, IAM(), 'Updating Matrix Agent File Information ...'
      TYPE *, IAM()
C
C IF WE DO HAVEN'T GOT UPDATE IN MEMORY DO NOT UPDATE IN MATRIX FILE
C
2000  CONTINUE
      IF(AGTUPD(TERM) .EQ. 0) GOTO 1000
C
C READ AGENT MATRIX FILE
C
      CALL READ_MATRIX_FILE(TERM, MFCREC)
C
C SET AGENT NUMBER IN RECORD FILE ( MEANS THAT AGENT HAVE ACTIVITY )
C
      MFCAGT = AGTUPD(TERM)
C
C UPDATE AGENT MATRIX FILE WITH MEMORY VALUES ( SIMPLE / MULTIPLE WAGERS )
C
      DO TOTPOS = 1, MAXTOT
        DO WEEK = 1, MAXWEK
          DO GNUM = 1, RPTMAXGAM
            DO WAG = 1, MAXWAG
C 
              ! UPDATE FILE WITH SIMPLE WAGERS
              MTXVAL = MFCWSB(TOTPOS, WEEK, GNUM, WAG)
              MTXVAL = MTXVAL + UPDMTX(TOTPOS,  SMPWAG, WEEK, GNUM, WAG, TERM)
              MFCWSB(TOTPOS, WEEK, GNUM, WAG) = MTXVAL
C
              ! UPDATE FILE WITH MULTIPLE WAGERS
              MTXVAL = MFCWMB(TOTPOS, WEEK, GNUM, WAG)
              MTXVAL = MTXVAL + UPDMTX(TOTPOS,  MLTWAG, WEEK, GNUM, WAG, TERM)
              MFCWMB(TOTPOS, WEEK, GNUM, WAG) = MTXVAL
C
            ENDDO
          ENDDO
        ENDDO
      ENDDO
C
C WRITE UPDATED RECORD IN AGENT MATRIX FILE
C
      CALL WRITEW(MFCFDB, TERM, MFCREC, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Writing Matrix Agent File ...'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C GO TO UPDATE NEXT AGENT 
C
1000  CONTINUE
      TERM = TERM + 1
      IF(TERM .GT. NUMAGT) RETURN
      GOTO 2000
C
C THIS IS THE END TO WRITE MEMORY VALUES IN MATRIX AGENT FILE
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_HEADER_REPORT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 26 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT HEADER REPORT FOR ONE AGENT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_HEADER_REPORT(AGT, AGTLD, AGTCR)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT HEADER REPORT FOR ONE AGENT
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO PRINT HEADER REPORT FOR ONE AGENT
C
      INTEGER * 4 AGT          ! AGENT NUMBER
      INTEGER * 4 AGTLD        ! AGENT DISTRIBUTION LINE
      INTEGER * 4 AGTCR        ! AGENT RECEPTION CENTER
C
C VARIABLES DEFINITION TO PRINT HEADER REPORT FOR ONE AGENT
C
      INTEGER * 4 DRWWEEK      ! DRAW WEEK
      INTEGER * 4 DRWDAY       ! DRAW DAY
      INTEGER * 4 DRWMONTH     ! DRAW MONTH
      INTEGER * 4 DRWYEAR      ! DRAW YEAR
      INTEGER * 4 NXTSATCDC    ! NEXT SATURDAY CDC
C
C FUNCTIONS DEFINITION TO PRINT HEADER REPORT FOR ONE AGENT
C
      CHARACTER * 8 IAGT_NO    ! FUNCTION TO FORMAT AGENT NUMBER
C
C GET DRAWING WEEK
C
      NXTSATCDC = GET_NEXT_SATURDAY_CDC(REPCDC)
      CALL FIGWEK(NXTSATCDC, DRWWEEK, DRWYEAR)
C
C GET DRAWING INFORMATION ( DRAW DAY, DRAW MONTH, DRAW YEAR )
C
      CALL GET_DATE_FROM_CDC(NXTSATCDC, DRWDAY, DRWMONTH, DRWYEAR)
C
C PRINT CARRY RETURN ( PRINTER SHOULD GO TO NEXT PAGE )
C
      WRITE(REPIDFIL, 100)
C
C PRINT TITLES FOR AGENT REPORT
C
      WRITE(REPIDFIL, 101)
      WRITE(REPIDFIL, 102)
      WRITE(REPIDFIL, 103)
      WRITE(REPIDFIL, 102)
      WRITE(REPIDFIL, 102)
C
C PRINT DRAW INFORMATION
C
      WRITE(REPIDFIL, 104) DRWWEEK, DRWDAY, DRWMONTH, DRWYEAR
C
C PRINT GAME NAMES INFORMATION
C
      WRITE(REPIDFIL, 105) AGTLD, AGTCR
      WRITE(REPIDFIL, 106)
      WRITE(REPIDFIL, 107) IAGT_NO(AGT)
C
C FORMATS DEFINITION TO PRINT HEADER REPORT FOR ONE AGENT
C
100   FORMAT('1')
101   FORMAT(X, 23X, 'CONTROLO DO MOVIMENTO DOS MEDIADORES')
102   FORMAT(X)
103   FORMAT(X, 26X, 'MOVIMENTO DE MATRIZES E APOSTAS')
104   FORMAT(01X, 'LD', 6X, 'CR', 
     *       50X, 'CONC.', 
     *       01X, I2.2, 2X, I2.2, '/', I2.2, '/', I4.4)
105   FORMAT(X , I2.2, X, I7.7,
     *           03X, 'TOTOBOLA', 
     *           03X, 'TOTOGOLO', 
     *           06X, 'LOTO SABADO', 
     *           13X, 'LOTO 2.FEIRA')
106   FORMAT(X, 'MEDIADOR', 
     *           1X, 'TIP',
     *           1X, 'MAT ', 1X, 'APOS',
     *           1X, 'MATR', 1X, 'APOS'
     *           2X, 'MATR', 2X, 'APOS'
     *           2X, 'MATR', 1X, 'APOS'
     *           3X, 'MATR', 2X, 'APOS'
     *           2X, 'MATR', 2X, 'APOS') 
107   FORMAT(X, A8, X, 24('-'), 
     *          3('-'), '1 SEM', 8('-'), '5 SEM', '-',
     *          5('-'), '1 SEM', 7('-'), '5 SEM', 3('-'))
C
C THIS IS THE END TO PRINT HEADER REPORT FOR ONE AGENT
C
      END



C ******************************************************************************
C
C     SUBROUTINE: PRINT_SIMPLE_WAGERS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 26 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT SIMPLE WAGERS CONUNTER / WAGERS IN THE REPORT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_SIMPLE_WAGERS(MTXREC, TOTSIMWAG)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT SIMPLE WAGERS
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITIONS TO PRINT SIMPLE WAGERS
C
      INTEGER * 4 MTXREC(*)                             ! MATRIX REGISTER
      INTEGER * 4 TOTSIMWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL SIMPLE WAGERS
C
C VARIABES DEFINITION TO PRINT SIMPLE WAGERS
C
      INTEGER * 4 CNTWAG        ! WAGERS COUNTER
      INTEGER * 4 IDXPOS        ! INDEX POSITION IN WAGERS TABLE
C
C INITIATE VARIABLES TO PRINT PRINT SIMPLE WAGERS
C
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
      CALL FASTSET(0, TOTSIMWAG, MAXTOT * RPTMAXGAM * MAXWEK)
C
C LOOP TO PRINT TOTAL CONUNTER / TOTAL WAGERS FOR EACH GAME
C
      DO CNTWAG = 2, 10, 2
C
C SEAR WAGER IN TABLE POSITION TO KNOW INDEX IN SINPLE WAGERS REGISTER
C
        CALL SEARCH_WAGER_INDEX_POSITION(CNTWAG, IDXPOS)
C
C PRINT ALL WAGERS INFORMATION
C
        WRITE(REPIDFIL, 100) 
     * 
     *      WAGTBLPOS(IDXPOS),                       ! WAGER TYPE
     *      MFCWSB(TOTCNT, WEEK1, TBLGAM, IDXPOS),   ! COUNTER TOTOBOLA
     *      MFCWSB(TOTWAG, WEEK1, TBLGAM, IDXPOS),   ! WAGERS  TOTOBOLA
     *      MFCWSB(TOTCNT, WEEK1, TGLGAM, IDXPOS),   ! COUNTER TOTOGOLO
     *      MFCWSB(TOTWAG, WEEK1, TGLGAM, IDXPOS),   ! WAGERS  TOTOGOLO
     *      MFCWSB(TOTCNT, WEEK1, LOTGAM, IDXPOS),   ! COUNTER LOTO SAB 1 WEEK
     *      MFCWSB(TOTWAG, WEEK1, LOTGAM, IDXPOS),   ! WAGERS  LOTO SAB 1 WEEK
     *      MFCWSB(TOTCNT, WEEK5, LOTGAM, IDXPOS),   ! COUNTER LOTO SAB 5 WEEK
     *      MFCWSB(TOTWAG, WEEK5, LOTGAM, IDXPOS),   ! WAGERS  LOTO SAB 5 WEEK
     *      MFCWSB(TOTCNT, WEEK1, LO2GAM, IDXPOS),   ! COUNTER LOTO MON 1 WEEK
     *      MFCWSB(TOTWAG, WEEK1, LO2GAM, IDXPOS),   ! WAGERS  LOTO MON 1 WEEK
     *      MFCWSB(TOTCNT, WEEK5, LO2GAM, IDXPOS),   ! COUNTER LOTO MON 5 WEEK
     *      MFCWSB(TOTWAG, WEEK5, LO2GAM, IDXPOS)    ! WAGERS  LOTO MON 5 WEEK
C
C CALCULATE PARTIAL TOTALS FOR SIMPLE WAGERS ( ALSO FOR JOKER GAME )
C
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, TBLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, TBLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, TGLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, TGLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, LOTGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, LOTGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK5, LOTGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK5, LOTGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, LO2GAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, LO2GAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK5, LO2GAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK5, LO2GAM, IDXPOS, 1)
C
C END OF LOOP TO PRINT TOTAL CONUNTER / TOTAL WAGERS FOR EACH GAME
C 
      ENDDO
C
C PRINT TOTALS FOR SIMPLE WAGERS
C
        WRITE(REPIDFIL, 200) 
     * 
     *      TOTSIMWAG(TOTCNT, WEEK1, TBLGAM),   ! TOTAL COUNTER TOTOBOLA
     *      TOTSIMWAG(TOTWAG, WEEK1, TBLGAM),   ! TOTAL WAGERS  TOTOBOLA
     *      TOTSIMWAG(TOTCNT, WEEK1, TGLGAM),   ! TOTAL COUNTER TOTOGOLO
     *      TOTSIMWAG(TOTWAG, WEEK1, TGLGAM),   ! TOTAL WAGERS  TOTOGOLO
     *      TOTSIMWAG(TOTCNT, WEEK1, LOTGAM),   ! TOTAL COUNTER LOTO SAB 1 WEEK
     *      TOTSIMWAG(TOTWAG, WEEK1, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 1 WEEK
     *      TOTSIMWAG(TOTCNT, WEEK5, LOTGAM),   ! TOTAL COUNTER LOTO SAB 5 WEEK
     *      TOTSIMWAG(TOTWAG, WEEK5, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 5 WEEK
     *      TOTSIMWAG(TOTCNT, WEEK1, LO2GAM),   ! TOTAL COUNTER LOTO MON 1 WEEK
     *      TOTSIMWAG(TOTWAG, WEEK1, LO2GAM),   ! TOTAL WAGERS  LOTO MON 1 WEEK
     *      TOTSIMWAG(TOTCNT, WEEK5, LO2GAM),   ! TOTAL COUNTER LOTO MON 5 WEEK
     *      TOTSIMWAG(TOTWAG, WEEK5, LO2GAM)    ! TOTAL WAGERS  LOTO MON 5 WEEK
C
C PRINT FREE LINE
C
        WRITE(REPIDFIL, 300)
C
C FORMATS DEFINITION TO PRINT SIMPLE WAGERS
C
100   FORMAT(X, 7X, I3, 
     *          1X, I4, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5,
     *          1X, I5, 1X, I6,
     *          1X, I4, 1X, I5) 
C
200   FORMAT(X, 'TOTAL SIMPL.', 
     *          0X, I3, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5,
     *          1X, I5, 1X, I6,
     *          1X, I4, 1X, I5) 
C
300   FORMAT(X)
C
C THIS IS THE END TO PRINT SIMPLE WAGERS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_MULTIPLE_WAGERS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 26 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT MULTIPLE WAGERS CONUNTER / WAGERS IN THE REPORT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_MULTIPLE_WAGERS(MTXREC, TOTMULWAG)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT MULTIPLE WAGERS
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITIONS TO PRINT MULTIPLE WAGERS
C
      INTEGER * 4 MTXREC(*)                             ! MATRIX REGISTER
      INTEGER * 4 TOTMULWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL MULTIPLE WAGERS
C
C VARIABLES DEFINITION TO PRINT MULTIPLE WAGERS
C
      INTEGER * 4 CNTWAG         ! WAGERS COUNTER
      INTEGER * 4 LTCNTWAG       ! LOTTO WAGERS COUNTER
      INTEGER * 4 IDXPOS         ! INDEX POSITION IN WAGERS TABLE
      INTEGER * 4 LTIDXPOS       ! LOTTO INDEX POSITION IN WAGERS TABLE
      INTEGER * 4 PRNTWAG        ! PRINTED WAGER
C
      CHARACTER * 26 LTOSQUARE   ! PRINTED LOTO SQUARE INFORMATION
C
C DEFINE PRINTED TABLE IN THE REPORT
C
      INTEGER * 4 PRTWGTBL(30)   ! WAGERS PRINTED TABLE
      INTEGER * 4 LTPRTWGTBL(7)  ! LOTTO WAGERS PRINTED TABLE
C
      CHARACTER * 4 SYSWAGTBL(7)  ! SYSTEM WAGERS TABLE DRAWING
C 
      DATA PRTWGTBL    / 002, 003, 004, 006, 008, 009, 012, 016, 018, 024, 
     *                   027, 032, 036, 048, 054, 064, 072, 081, 096, 108, 
     *                   128, 144, 162, 192, 216, 243, 256, 288, 324, 384  / 
C
      DATA LTPRTWGTBL  / 7, 28, 84, 210, 462, 924, 44 /
C
      DATA SYSWAGTBL / ' (7)', ' (8)', ' (9)',
     *                 '(10)', '(11)', '(12)', ' (5)'   /
C
C INITIATE VARIABLES TO PRINT PRINT MULTIPLE WAGERS
C
      LTCNTWAG = 1
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
      CALL FASTSET(0, TOTMULWAG, MAXTOT * RPTMAXGAM * MAXWEK)
C
C LOOP TO PRINT TOTAL CONUNTER / TOTAL WAGERS FOR EACH GAME ( FIRST PART )
C
      DO CNTWAG = 1, 30
C
C SEAR WAGER IN TABLE POSITION TO KNOW INDEX IN SINPLE WAGERS REGISTER
C
        PRNTWAG = PRTWGTBL(CNTWAG)
        CALL SEARCH_WAGER_INDEX_POSITION(PRNTWAG, IDXPOS)
C
C CHECK IF WE HAVE TO PRINT LOTTO / LOTTO 2 INFORMATION
C
        IF(CNTWAG .GT. 23) GOTO 1000
C
C GET LOTO SCUATE WITH LOTO INFORMATION 
C
        CALL GET_PRINT_LOTO_SQUARE(CNTWAG, LTOSQUARE)
C
C PRINT ALL WAGERS INFORMATION ( TOTOGOLO / TOTBOLA PART )
C
        WRITE(REPIDFIL, 100) 
     * 
     *      WAGTBLPOS(IDXPOS),                       ! WAGER TYPE
     *      MFCWMB(TOTCNT, WEEK1, TBLGAM, IDXPOS),   ! COUNTER TOTOBOLA
     *      MFCWMB(TOTWAG, WEEK1, TBLGAM, IDXPOS),   ! WAGERS  TOTOBOLA
     *      MFCWMB(TOTCNT, WEEK1, TGLGAM, IDXPOS),   ! COUNTER TOTOGOLO
     *      MFCWMB(TOTWAG, WEEK1, TGLGAM, IDXPOS),   ! WAGERS  TOTOGOLO
     *      LTOSQUARE                                ! LOTO SQUARE
C
C DONE ALL TO PRINT WITHOUT LOTTO / LOTTO 2 INFORMATION GOTO NEXT WAGER
C
        GOTO 2000
C
C SEAR LOTTO WAGER IN TABLE POSITION TO KNOW INDEX IN SIMPLE WAGERS REGISTER
C
1000    CONTINUE
        PRNTWAG = LTPRTWGTBL(LTCNTWAG)
        CALL SEARCH_WAGER_INDEX_POSITION(PRNTWAG, LTIDXPOS)
C
C PRINT WAGERS WITH LOTTO / LOTTO 2 INFORMATION 
C
        WRITE(REPIDFIL, 200) 
     * 
     *      SYSWAGTBL(LTCNTWAG),                     ! TABLE DRAWING
     *      WAGTBLPOS(IDXPOS),                       ! WAGER TYPE
     *      MFCWMB(TOTCNT, WEEK1, TBLGAM, IDXPOS),   ! COUNTER TOTOBOLA
     *      MFCWMB(TOTWAG, WEEK1, TBLGAM, IDXPOS),   ! WAGERS  TOTOBOLA
     *      MFCWMB(TOTCNT, WEEK1, TGLGAM, IDXPOS),   ! COUNTER TOTOGOLO
     *      MFCWMB(TOTWAG, WEEK1, TGLGAM, IDXPOS),   ! WAGERS  TOTOGOLO
     *      MFCWMB(TOTCNT, WEEK1, LOTGAM, LTIDXPOS), ! COUNTER LOTO SAB 1 WEEK
     *      MFCWMB(TOTWAG, WEEK1, LOTGAM, LTIDXPOS), ! WAGERS  LOTO SAB 1 WEEK
     *      MFCWMB(TOTCNT, WEEK5, LOTGAM, LTIDXPOS), ! COUNTER LOTO SAB 5 WEEK
     *      MFCWMB(TOTWAG, WEEK5, LOTGAM, LTIDXPOS), ! WAGERS  LOTO SAB 5 WEEK
     *      MFCWMB(TOTCNT, WEEK1, LO2GAM, LTIDXPOS), ! COUNTER LOTO MON 1 WEEK
     *      MFCWMB(TOTWAG, WEEK1, LO2GAM, LTIDXPOS), ! WAGERS  LOTO MON 1 WEEK
     *      MFCWMB(TOTCNT, WEEK5, LO2GAM, LTIDXPOS), ! COUNTER LOTO MON 5 WEEK
     *      MFCWMB(TOTWAG, WEEK5, LO2GAM, LTIDXPOS)  ! WAGERS  LOTO MON 5 WEEK
C
C CALCULATE PARTIAL TOTALS FOR MULTIPLE WAGERS
C
2000    CONTINUE
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, TBLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, TBLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, TGLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, TGLGAM, IDXPOS, 1)
C
C IF WE ARE PRINTING LOTTO INFORMATION THEN CALCULATE TOTALS FOR LOTTO
C
        IF(CNTWAG .GT. 23) THEN
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, LOTGAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, LOTGAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK5, LOTGAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK5, LOTGAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, LO2GAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, LO2GAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK5, LO2GAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK5, LO2GAM, LTIDXPOS, 1)
        ENDIF
C
C SET LOTO WAGER COUNTER TO NEXT WAG ( ONLY IF WE PRINT LOTTO INFORMATION )
C
        IF(CNTWAG .GT. 23) LTCNTWAG = LTCNTWAG + 1 
C
C END OF LOOP TO PRINT TOTAL CONUNTER / TOTAL WAGERS FOR EACH GAME
C 
      ENDDO
C
C PRINT TOTALS FOR MULTIPLE WAGERS
C
        WRITE(REPIDFIL, 300) 
     * 
     *      TOTMULWAG(TOTCNT, WEEK1, TBLGAM),   ! TOTAL COUNTER TOTOBOLA
     *      TOTMULWAG(TOTWAG, WEEK1, TBLGAM),   ! TOTAL WAGERS  TOTOBOLA
     *      TOTMULWAG(TOTCNT, WEEK1, TGLGAM),   ! TOTAL COUNTER TOTOGOLO
     *      TOTMULWAG(TOTWAG, WEEK1, TGLGAM),   ! TOTAL WAGERS  TOTOGOLO
     *      TOTMULWAG(TOTCNT, WEEK1, LOTGAM),   ! TOTAL COUNTER LOTO SAB 1 WEEK
     *      TOTMULWAG(TOTWAG, WEEK1, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 1 WEEK
     *      TOTMULWAG(TOTCNT, WEEK5, LOTGAM),   ! TOTAL COUNTER LOTO SAB 5 WEEK
     *      TOTMULWAG(TOTWAG, WEEK5, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 5 WEEK
     *      TOTMULWAG(TOTCNT, WEEK1, LO2GAM),   ! TOTAL COUNTER LOTO MON 1 WEEK
     *      TOTMULWAG(TOTWAG, WEEK1, LO2GAM),   ! TOTAL WAGERS  LOTO MON 1 WEEK
     *      TOTMULWAG(TOTCNT, WEEK5, LO2GAM),   ! TOTAL COUNTER LOTO MON 5 WEEK
     *      TOTMULWAG(TOTWAG, WEEK5, LO2GAM)    ! TOTAL WAGERS  LOTO MON 5 WEEK
C
C PRINT FREE LINE
C
      WRITE(REPIDFIL, 400)
C
C FORMATS DEFINITION TO PRINT PRINT MULTIPLE WAGERS
C
100   FORMAT(X, 7X, I3, 
     *          1X, I4, 1X, I5, 
     *          1X, I4, 1X, I4, 19X, A, 4X)
C
200   FORMAT(X, 2X, A4, 1X, I3, 
     *          1X, I4, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5,
     *          1X, I5, 1X, I6,
     *          1X, I4, 1X, I5) 
C
300   FORMAT(X, 'TOTAL MULT.', 
     *          0X, I4, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5,
     *          1X, I5, 1X, I6,
     *          1X, I4, 1X, I5) 
C
400   FORMAT(X)
C
C THIS IS THE END TO PRINT PRINT MULTIPLE WAGERS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_AGT_GRAN_TOTALS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 27 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT AGENT GRANDS TOTAL ( FOR ALL GAMES )
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_AGT_GRAN_TOTALS(TOTSIMWAG, TOTMULWAG)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT AGENT GRAN TOTALS
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO PRINT AGENT GRAN TOTALS
C
      INTEGER * 4 TOTSIMWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL SIMPLE WAGERS
      INTEGER * 4 TOTMULWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL MULTIPLE WAGERS
C
C VARIABLES DEFINITION TO PRINT AGENT GRAN TOTALS
C
      INTEGER * 4 GRDTOT(MAXTOT, MAXWEK, RPTMAXGAM)     ! GRAND TOTALS
      INTEGER * 4 TOTMLP                                ! TOTAL MULTIPLE
      INTEGER * 4 TOTPOS                                ! TOTAL POSITION CNT.
      INTEGER * 4 WEEK                                  ! WEEK POSITION CNT.
      INTEGER * 4 GNUM                                  ! GAME POSITION CNT.
      INTEGER * 4 JOKTOTAL                              ! JOKER TOTAL
      INTEGER * 4 TOTMTX                                ! MATRIX TOTAL
C
C INITIATE VARIABLES TO PRINT GRAND TOTALS
C
      CALL FASTMOV(TOTSIMWAG, GRDTOT, MAXTOT * MAXWEK * RPTMAXGAM)
C
C CALCULATE GRAN TOTALS FOR THIS AGENT
C
      DO WEEK = 1, MAXWEK
        DO TOTPOS = 1, MAXTOT
          DO GNUM = 1, RPTMAXGAM
             TOTMLP = TOTMULWAG(TOTPOS, WEEK, GNUM)
             GRDTOT(TOTPOS, WEEK, GNUM) = GRDTOT(TOTPOS, WEEK, GNUM) + TOTMLP
          ENDDO
        ENDDO
      ENDDO
C
C CALCULATE JOKER GRAN TOTAL
C
      JOKTOTAL = GRDTOT(TOTJOK, WEEK1, TBLGAM) + 
     *           GRDTOT(TOTJOK, WEEK1, TGLGAM) +
     *           GRDTOT(TOTJOK, WEEK1, LOTGAM) +
     *           GRDTOT(TOTJOK, WEEK5, LOTGAM)
C
C PRINT AGENT GRAN TOTALS FOR ALL GAMES ( NO JOKER )
C
      WRITE(REPIDFIL, 100)
     *
     *      GRDTOT(TOTCNT, WEEK1, TBLGAM),   ! TOTAL COUNTER TOTOBOLA
     *      GRDTOT(TOTWAG, WEEK1, TBLGAM),   ! TOTAL WAGERS  TOTOBOLA
     *      GRDTOT(TOTCNT, WEEK1, TGLGAM),   ! TOTAL COUNTER TOTOGOLO
     *      GRDTOT(TOTWAG, WEEK1, TGLGAM),   ! TOTAL WAGERS  TOTOGOLO
     *      GRDTOT(TOTCNT, WEEK1, LOTGAM),   ! TOTAL COUNTER LOTO SAB 1 WEEK
     *      GRDTOT(TOTWAG, WEEK1, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 1 WEEK
     *      GRDTOT(TOTCNT, WEEK5, LOTGAM),   ! TOTAL COUNTER LOTO SAB 5 WEEK
     *      GRDTOT(TOTWAG, WEEK5, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 5 WEEK
     *      GRDTOT(TOTCNT, WEEK1, LO2GAM),   ! TOTAL COUNTER LOTO MON 1 WEEK
     *      GRDTOT(TOTWAG, WEEK1, LO2GAM),   ! TOTAL WAGERS  LOTO MON 1 WEEK
     *      GRDTOT(TOTCNT, WEEK5, LO2GAM),   ! TOTAL COUNTER LOTO MON 5 WEEK
     *      GRDTOT(TOTWAG, WEEK5, LO2GAM)    ! TOTAL WAGERS  LOTO MON 5 WEEK
C
C PRINT '-------------------' LINE
C
      WRITE(REPIDFIL, 200)
C
C PRINT AGENT GRAN TOTALS FOR JOKER GAME
C
      WRITE(REPIDFIL, 300)
     *
     *      JOKTOTAL,
     *      GRDTOT(TOTJOK, WEEK1, TBLGAM),   ! TOTAL COUNTER TOTOBOLA
     *      GRDTOT(TOTJOK, WEEK1, TBLGAM),   ! TOTAL WAGERS  TOTOBOLA
     *      GRDTOT(TOTJOK, WEEK1, TGLGAM),   ! TOTAL COUNTER TOTOGOLO
     *      GRDTOT(TOTJOK, WEEK1, TGLGAM),   ! TOTAL WAGERS  TOTOGOLO
     *      GRDTOT(TOTJOK, WEEK1, LOTGAM),   ! TOTAL COUNTER LOTO SAB 1 WEEK
     *      GRDTOT(TOTJOK, WEEK1, LOTGAM),   ! TOTAL WAGERS  LOTO SAB 1 WEEK
     *      GRDTOT(TOTJOK, WEEK5, LOTGAM),   ! TOTAL COUNTER LOTO SAB 5 WEEK
     *      GRDTOT(TOTJOK, WEEK5, LOTGAM)    ! TOTAL WAGERS  LOTO SAB 5 WEEK
C
C PRINT FREE LINE
C
      WRITE(REPIDFIL, 400)
C
C CALCULATE MATRIX TOTAL USED BY AGENT
C
      TOTMTX = GRDTOT(TOTCNT, WEEK1, TBLGAM) +
     *         GRDTOT(TOTCNT, WEEK1, TGLGAM) +
     *         GRDTOT(TOTCNT, WEEK1, LOTGAM) +
     *         GRDTOT(TOTCNT, WEEK5, LOTGAM)
C
C PRINT MATRIX TOTAL USED BY AGENT
C
      WRITE(REPIDFIL, 500) TOTMTX
C
C FORAMTS DEFINITION TO PRINT AGENT GRAN TOTALS
C
100   FORMAT(X, 'TOTAL GERAL', 
     *          0X, I4, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5,
     *          1X, I5, 1X, I6,
     *          1X, I4, 1X, I5) 
C
200   FORMAT(X, 7X, 72('-'))
C
300   FORMAT(X, 'JOKER (', I4.4, ')', 
     *          0X, I3, 1X, I5, 
     *          1X, I4, 1X, I4, 
     *          1X, I5, 1X, I6, 
     *          1X, I4, 1X, I5)
C
400   FORMAT(X)
C
500   FORMAT(X, 10X, 'TOTAL DE MATRIZES', 13('.'), X, I12)
C
C THIS IS THE END TO PRINT AGENT GRAN TOTALS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_AGT_FINANCIAL
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 26 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT AGENT FINANCIAL INFORMATION ( AND ADRESS / NAME / ETC )
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_AGT_FINANCIAL(MTXREC)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT AGENT FINANCIAL INFORMATION
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETES DEFINITION TO PRINT AGENT FINANCIAL INFORMATION
C
      INTEGER * 4 MTXREC(*)              ! MATRIX REGISTER
C
C VARIABLES DEFINITION TO PRINT AGENT FINANCIAL INFORMATION
C
      INTEGER * 4 CNT                    ! COUNTER
      INTEGER * 4 TOTNET                 ! TOTAL NET SALES
      INTEGER * 4 TOP_MFCADR(10)         ! TOP ADDRESS
      INTEGER * 4 BOT_MFCADR(10)         ! BOTTON ADDRESS
      INTEGER * 4 TOP_MFCNAM(10)         ! TOP AGENT NAME
      INTEGER * 4 BOT_MFCNAM(10)         ! BOTTON AGENT NAME
C
C FUNCTIONS DEFINITION TO PRINT AGENT FINANCIAL INFORMATION
C
      CHARACTER * 12 PRINT_EURO_VALUE    ! FUNCTION
C
C INITIATE VARIABLES TO PRINT PRINT AGENT FINANCIAL INFORMATION 
C
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
C
C GET TOTSAL SALES FOR AGENT
C
      TOTNET = MFCWNA - MFCWAC
C
C PRINT TOTAL LIQUIDO DE APOSTAS AMOUNT FOR THE AGENT
C
      WRITE(REPIDFIL, 100) 'ILIQUIDO DE APOSTAS',
     *                     PRINT_EURO_VALUE(MFCWNA, EUR),
     *                     PRINT_EURO_VALUE(MFCWNA, ESC) 
C
C PRINT AGENT COMISION AMOUNT
C
      WRITE(REPIDFIL, 101) 'COMISSAO',
     *                     PRINT_EURO_VALUE(MFCWAC, EUR),
     *                     PRINT_EURO_VALUE(MFCWAC, ESC) 
C
C PRINT AGENT NET SALES AMOUNT
C
      WRITE(REPIDFIL, 102) 'LIQUIDO DE APOSTAS',
     *                     PRINT_EURO_VALUE(TOTNET, EUR),
     *                     PRINT_EURO_VALUE(TOTNET, ESC) 
C
C PRINT FREE LINES
C
      WRITE(REPIDFIL, 103)
      WRITE(REPIDFIL, 103)
C
C PRINT AGENT NAME IN THE REPORT
C
      CALL DIVIDE_STRING(MFCNAM, TOP_MFCNAM, BOT_MFCNAM, 10, MAXMFCNAM)
      WRITE(REPIDFIL, 104) (TOP_MFCNAM(CNT), CNT = 1, 10)
      WRITE(REPIDFIL, 105) (BOT_MFCNAM(CNT), CNT = 1, 10)
C
C PRINT AGENT ADRESS INFORMATION
C
      CALL DIVIDE_STRING(MFCADR, TOP_MFCADR, BOT_MFCADR, 10, MAXMFCADR)
      WRITE(REPIDFIL, 104) (TOP_MFCADR(CNT), CNT = 1, 10)
      WRITE(REPIDFIL, 106) (BOT_MFCADR(CNT), CNT = 1, 10)
C
C PRINT AGENT ZIP CODE / AGEN CITY
C
      WRITE(REPIDFIL, 107) MCFZCD / 1000, 
     *                     MOD(MCFZCD, 1000), 
     *                     (MFCCTY(CNT), CNT = 1, 8)
C
C FORMATS DEFINITION TO PRINT AGENT FINANCIAL INFORMATION
C
100   FORMAT(X, 10X, A, 11('.'), 1X, A12, X, 'EURO', 3X, A12, X, 'ESC')
101   FORMAT(X, 10X, A, 22('.'), 1X, A12, X, 'EURO', 3X, A12, X, 'ESC')
102   FORMAT(X, 10X, A, 12('.'), 1X, A12, X, 'EURO', 3X, A12, X, 'ESC')
103   FORMAT(X)
104   FORMAT(X, 38X, 10A4)
105   FORMAT(X, 38X, 10A4)
106   FORMAT(X, 38X, 10A4)
107   FORMAT(X, 38X, I4.4, '-', I3.3, X, 8A4)
C
C THIS IS THE END TO PRINT AGENT FINANCIAL INFORMATION 
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GENERATE_MATRIX_REPORT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 26 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION THAT GENERATE "CONTROLO DO MOVIMENTO DOS AGENTES" REPORT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GENERATE_MATRIX_REPORT
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GENERATE MATRIX REPORT
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C VARIABLES DEFINITION TO GENERATE MATRIX REPORT
C
      INTEGER * 4 IDXSORT                               ! TERMINAL COUNTER
      INTEGER * 4 TERSRT(NUMAGT)                        ! TERMINAL SORTED ARAY
      INTEGER * 4 SMRSRT(NUMAGT)                        ! SUMMARY SORTED ARAY
      INTEGER * 4 LBLSRT(NUMAGT)                        ! LABEL SORTED ARAY 
      INTEGER * 4 TOTSIMWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL SIMPLE WAGERS
      INTEGER * 4 TOTMULWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL MULTI. WAGERS
      INTEGER * 4 NUMITEMSORT                           ! NUMBER OF ITEM SORTED
C
C DISPLAY MESSAGE TO USER ( GENERATING MATRIX AGENT REPORT / LABELS / SUMMARY )
C
      TYPE *, IAM()
      TYPE *, IAM(), 'Generating Matrix Agent Files Reports ...'
      TYPE *, IAM()
C
C SORT MATRIX REPORT ( EVERY REPORT IS SORTED IN DIFFERENT WAY )
C
      CALL SORT_MATRIX_FILE(NUMITEMSORT, TERSRT, SMRSRT, LBLSRT)
      IF(NUMITEMSORT .LE. 0) RETURN
C
C INTITIATE VARIABLES TO PRINT AGENT REPORT
C
      IDXSORT = 1
C
C ASK TO USER TOTAL NUMBER OF MATRIX TO DISTRIBUTE
C
      CALL ASK_MATRIX_NUMBER_TO_DISTRIBUTE
C
C READ AGENT MATRIX FILE TO PRINT AGENT REPORT
C
2000  CONTINUE
      CALL READ_MATRIX_FILE(TERSRT(IDXSORT), MFCREC)
C
C IF WE DO HAVEN'T GOT UPDATED INFORMATION DO NOT PRINT ANYTHING FOR THIS AGENT
C
      IF(MFCAGT .EQ. 0) GOTO 3000
C
C PRINT HEADER REPORT FOR ACTUAL AGENT
C
      CALL PRINT_HEADER_REPORT(MFCAGT, MCFALD, MCFACR)
C
C PRINT SINPLE WAGERS FOR ACTUAL AGENT
C
      CALL PRINT_SIMPLE_WAGERS(MFCREC, TOTSIMWAG)
C
C PRINT MULTIPLE WAGERS FOR ACTUAL AGENT
C
      CALL PRINT_MULTIPLE_WAGERS(MFCREC, TOTMULWAG)
C
C PRINT GRAN TOTALS FOR ALL GAMES 
C
      CALL PRINT_AGT_GRAN_TOTALS(TOTSIMWAG, TOTMULWAG)
C
C PRINT FINANCIAL INFORMATION FOR ACTUAL AGENT
C
      CALL PRINT_AGT_FINANCIAL(MFCREC)
C
C READ AGENT MATRIX FILE TO PRINT AGENT SUMMARY REPORT
C
3000  CONTINUE
      CALL READ_MATRIX_FILE(SMRSRT(IDXSORT), MFCREC)
C
C IF WE DO HAVEN'T GOT UPDATED INFORMATION DO NOT PRINT ANYTHING FOR THIS AGENT
C
      IF(MFCAGT .EQ. 0) GOTO 4000
C
C PRINT MAPA RESUMO DAS MATRIZES A DISTRIBUIR NO CENTRO REPORT
C
      CALL PRINT_MATRIX_SUMMARY_REPORT(MFCREC, .FALSE.)
C
C READ AGENT MATRIX FILE TO PRINT AGENT LABELS REPORT
C
4000  CONTINUE
      CALL READ_MATRIX_FILE(LBLSRT(IDXSORT), MFCREC)
C
C IF WE DO HAVEN'T GOT UPDATED INFORMATION DO NOT PRINT ANYTHING FOR THIS AGENT
C
      IF(MFCAGT .EQ. 0) GOTO 1000
C
C PRINT MAPA RESUMO DAS MATRIZES A DISTRIBUIR NO CENTRO  / LABELS REPORT
C
      CALL PRINT_MATRIX_LABEL_REPORT(MFCREC, .FALSE.)
C
C GO TO PRINT INFORMATION FOR NEXT AGENT 
C
1000  CONTINUE
      IDXSORT = IDXSORT + 1
C
C IF IS LAST AGENT PRINT LAST RESUMO DAS MATRIZES / LABELS INFORMATION
C
      IF(IDXSORT .GT. NUMITEMSORT) THEN
        CALL PRINT_MATRIX_SUMMARY_REPORT(MFCREC, .TRUE.)
        CALL PRINT_MATRIX_LABEL_REPORT(MFCREC, .TRUE.)
        RETURN
      ENDIF
C
C GOTO PRINT NEXT AGENT
C
      GOTO 2000
C
C THIS IS THE END TO GENERATE MATRIX REPORT
C
      END


C ******************************************************************************
C
C     SUBROUTINE: UPDATE_MATRIX_WITH_ASF_INFO
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 27 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO UPDATE MATRIX FILE WITH ASF INFORMATION ( INVOICE / ADRESS / ... )
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE UPDATE_MATRIX_WITH_ASF_INFO(TERM, MTXREC)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO UPDATE MATRIX FILE WITH ASF INFORMATION
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
      INCLUDE 'INCLIB:RECAGT.DEF'
C
C PARAMETERS DEFINITION TO UPDATE MATRIX FILE WITH ASF INFORMATION
C
      INTEGER * 4 TERM                    ! TERMINAL NUMBER TO UPDATE
      INTEGER * 4 MTXREC(*)               ! MATRIX REGISTER
C
C VARIABLES DEFINITION TO UPDATE MATRIX FILE WITH ASF INFORMATION
C
      INTEGER * 4 FSTS                    ! FUNCTION STATUS
      INTEGER * 4 BLANK                   ! BLANK SPACE
      INTEGER * 4 GNUM                    ! GAME NUMBER
C
      CHARACTER * 56 AGTNAME              ! AGENT NAME
      CHARACTER * 48 AGTADRS              ! AGENT ADRESS
      CHARACTER * 30 AGTCTYS              ! AGENT CITY NAME
      CHARACTER * 04 CBLANK  / '    ' /   ! BLANK CHARACTERS
C
C EQUIVALENCES DEFINITION TO UPDATE MATRIX FILE WITH ASF INFORMATION
C
      EQUIVALENCE(CBLANK, BLANK)
      EQUIVALENCE(AGTNAME, MFCNAM)
      EQUIVALENCE(AGTADRS, MFCADR)
      EQUIVALENCE(AGTCTYS, MFCCTY)
C
C INITIATE VARIABLES TO UPDATE MATRIX FILE WITH ASF INFORMATION 
C
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
      CALL FASTSET(BLANK, MFCNAM, (LNAME / 4) + 1)
      CALL FASTSET(BLANK, MFCADR, (LSTRT / 4) + 1)
      CALL FASTSET(BLANK, MFCCTY, (LZIPA / 4) + 1)
C
C READ TERMINAL FROM AGENT SALES FILE ( ASF.FIL )
C
      CALL READW(ASFFDB, TERM, ASFREC, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Reading Agent Sales File ...'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C UPDATE DISTRIBUTION LINE FOR THE AGENT
C
      CALL ASCBIN(ASFINF, SLIND, LLIND, MCFALD, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Getting Distribution Line For Terminal: ', TERM
        TYPE *, IAM()
        MCFALD = 0
      ENDIF
C
C UPDATE RECEPTION CERTER FOR THE AGENT
C
      CALL ASCBIN(ASFINF, SCENR, LCENR, MCFACR, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Getting Reception Center For Terminal: ', TERM
        TYPE *, IAM()
        MCFACR = 0
      ENDIF
C
C UPDATE TERMINAL INVOICE INFORMATION
C
      MFCWNA = 0
      MFCWAC = ASFINV(ASFSCMU, 1) + ASFINV(ASFVCMU, 1) + ASFINV(ASFWCMU, 1)
      DO GNUM = 1, MAXGAM
        MFCWNA = MFCWNA + ASFBIL(GSAMT, GNUM, 1) - ASFBIL(GCAMT, GNUM, 1)
      ENDDO
C
C UPDATE TERMINAL ZIP CODE
C
      CALL ASCBIN(ASFINF, SZIPC, LZIPC, MCFZCD, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Getting Zip Code For Terminal: ', TERM
        TYPE *, IAM()
        MCFZCD = 0
      ENDIF
C
C GET AGENT NAME / AGENT CITY / AGENT ADRESS
C
      CALL MOVBYT(%REF(ASFBYT), SNAME, %REF(AGTNAME), 1, ENAME - SNAME + 1)
      CALL MOVBYT(%REF(ASFBYT), SSTRT, %REF(AGTADRS), 1, ESTRT - SSTRT + 1)
      CALL MOVBYT(%REF(ASFBYT), SZIPA, %REF(AGTCTYS), 1, EZIPA - SZIPA + 1)
C
C SET OUTPUT UPDATED REGISTER ( WITH ALL MODIFICATIONS DONE )
C
      CALL FASTMOV(MFCREC, MTXREC, MFCLEN)
C
C WRITE UPDATED RECORD IN AGENT MATRIX FILE
C
      CALL WRITEW(MFCFDB, TERM, MFCREC, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Writing Matrix Agent File ...'
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C THIS IS THE END TO UPDATE MATRIX FILE WITH ASF INFORMATION
C
      END


C ******************************************************************************
C
C     SUBROUTINE: SORT_MATRIX_FILE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 03 / 08 / 2001
C
C ******************************************************************************
C
C FUNCTION TO SORT MATRIX FILE BY DISTRIBUTION LINE AND RECEPTION LINE
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE SORT_MATRIX_FILE(NUMITEMSORT, SRTIDX, SMRSRT, LBLSRT)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO SORT MATRIX REPORT FILE
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:DATBUF.DEF'
C
C PARAMETERS DEFINITION TO SORT MATRIX REPORT FILE
C
      INTEGER * 4 NUMITEMSORT         ! NUMBER OF ITEM SORTED
      INTEGER * 4 SRTIDX(NUMAGT)      ! SORTED INFORMATION INDEX
      INTEGER * 4 SMRSRT(NUMAGT)      ! SUMMARY SORTED ARAY INDEX 
      INTEGER * 4 LBLSRT(NUMAGT)      ! LABEL SORTED ARAY INDEX
C
C VARIABLES DEFINITION TO SORT MATRIX REPORT FILE
C
      INTEGER * 4 TERM                ! TERMINAL COUNTER
      INTEGER * 4 SRTDTA(3, NUMAGT)   ! SORTED INFORMATION DATA
      INTEGER * 4 SRTSDTA(1, NUMAGT)  ! SORTED SUMMARY INFORMATION DATA
      INTEGER * 4 SRTLDTA(3, NUMAGT)  ! SORTED LABEL INFORMATION DATA 
C
      LOGICAL UPDMTXASF               ! UPDATE MATRIX WITH ASF INFORMATION
      LOGICAL SHWWRNG                 ! SHOW WARNING YES / NO
C
C FUNCTIONS DEFINITION TO SORT MATRIX REPORT FILE
C
      INTEGER * 4 GET_TOTAL_MATRIX_TOTO    ! FUNCTION TO GET TOTAL MATRIX TOTO
      INTEGER * 4 GET_TOTAL_MATRIX_GOLO    ! FUNCTION TO GET TOTAL MATRIX GOLO
C
      LOGICAL CHECK_OVERFLOW_SALES         ! FUNCTION TO CHECK OVERFLOW SALES
C
C INTITIATE VARIABLES TO SORT MATRIX REPORT FILE
C
      TERM = 1
      NUMITEMSORT = 0
      SHWWRNG = .FALSE.
      UPDMTXASF = .FALSE.
      CALL FASTSET(0, SRTIDX, NUMAGT)
      CALL FASTSET(0, SMRSRT, NUMAGT)
      CALL FASTSET(0, LBLSRT, NUMAGT)
      CALL FASTSET(0, SRTDTA, 3 * NUMAGT)
      CALL FASTSET(0, SRTLDTA, 3 * NUMAGT)
      CALL FASTSET(0, SRTSDTA, 1 * NUMAGT)
C
C SET IF MATRIX FILE SHOULB BE UPDATE WITH ASF INFORMATION
C
      IF(GET_WEEK_DAY(DAYCDC) .EQ. SATURDAY .AND. ISSUBPROC() .EQ. .TRUE.) THEN
        UPDMTXASF = .TRUE.
      ENDIF
C
C READ AGENT MATRIX FILE TO SORT REPORT
C
2000  CONTINUE
      CALL READ_MATRIX_FILE(TERM, MFCREC)
C
C IF WE DO HAVEN'T GOT UPDATED INFORMATION DO NOT SORT THIS AGENT
C
      IF(MFCAGT .EQ. 0) GOTO 1000
C
C UPDATE MATRIX AGEN FILE WITH AGEN INFORMATION ( INVOICE / ADRESS / ... )
C
      IF(UPDMTXASF .EQ. .TRUE.) CALL UPDATE_MATRIX_WITH_ASF_INFO(TERM, MFCREC)
C
C CHECK FOR OVERFLOW VALUES WHEN IT PRINTS THE REPORT ( A LOT OF SALES )
C
      IF(USRCHKOVF .EQ. .TRUE.) THEN
        IF(CHECK_OVERFLOW_SALES(MFCREC, SHWWRNG) .EQ. .TRUE.) GOTO 1000
      ENDIF
C
C SET NUMBER OF ITEMS SORTED
C
      NUMITEMSORT = NUMITEMSORT + 1
C
C PREPARE INFORMATION TO BE SORTED ( SORT INDEX, AND SORT INFORMATION )
C
      SRTIDX(NUMITEMSORT) = TERM
      SRTDTA(1, NUMITEMSORT) = MCFALD
      SRTDTA(2, NUMITEMSORT) = MCFACR
      SRTDTA(3, NUMITEMSORT) = MFCAGT
C
C PREPARE INFORMATION TO BE SORTED ( SORT INDEX, AND SORT INFORMATION )
C
      LBLSRT(NUMITEMSORT) = TERM     
      SRTLDTA(1, NUMITEMSORT) = MCFALD
      SRTLDTA(2, NUMITEMSORT) = MCFACR
      SRTLDTA(3, NUMITEMSORT) = MFCAGT
C
C PREPARE INFORMATION TO BE SORTED ( SORT INDEX, AND SORT INFORMATION )
C
      SMRSRT(NUMITEMSORT) = TERM
      SRTSDTA(1, NUMITEMSORT) = MFCAGT
C
C CALCULATE TOTAL NUMBER OF MATRIX USED BY ALL THE AGENTS
C
      TOTWEEKMTX(TBLGAM) = TOTWEEKMTX(TBLGAM) + GET_TOTAL_MATRIX_TOTO(MFCREC)
      TOTWEEKMTX(TGLGAM) = TOTWEEKMTX(TGLGAM) + GET_TOTAL_MATRIX_GOLO(MFCREC)
C
C GO TO PRINT INFORMATION FOR NEXT AGENT 
C
1000  CONTINUE
      TERM = TERM + 1
      IF(TERM .GT. NUMAGT) GOTO 3000
      GOTO 2000
C
C SORT ALL INFORMATION USING QSORT PROCEDURES
C
3000  CONTINUE
      CALL I4SHELL(SRTIDX, NUMITEMSORT, SRTDTA, 3)
      CALL I4SHELL(LBLSRT, NUMITEMSORT, SRTLDTA, 3)
      CALL I4SHELL(SMRSRT, NUMITEMSORT, SRTSDTA, 1)
C
C DISPLAY TOTAL NUMBER OF MATRIX USED FOR TOTOGOLO AND TOTOBOLA
C
      IF(SHWWRNG .EQ. .TRUE.) TYPE *, IAM()
      TYPE 100, IAM(), 'TotoBola', TOTWEEKMTX(TBLGAM)
C     TYPE 100, IAM(), 'TotoGolo', TOTWEEKMTX(TGLGAM)
      TYPE *, IAM()
C
C FORMATS DEFINITION TO SORT MATRIX REPORT FILE
C
100   FORMAT(X, A, 'Total Number Of Matrix Used For ', A, ' Game: ', I) 
C
C THIS IS THE END TO SORT MATRIX REPORT FILE
C
      END


C ******************************************************************************
C
C     SUBROUTINE: ASK_MATRIX_NUMBER_TO_DISTRIBUTE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 28 / 09 / 2001
C
C ******************************************************************************
C
C FUNCTION TO ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE BYE GAME
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE ASK_MATRIX_NUMBER_TO_DISTRIBUTE
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C VARIABLES DEFINITION TO ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE
C
      INTEGER * 4 FSTS            ! FUNCTION STATUS
C
      CHARACTER * 41 USRMSG       ! USER MESSAGE TO DISPLAY
C
C ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE TO TOTOBOLA
C
      WRITE(USRMSG, 100) 'TotoBola'
      CALL PRMNUM(USRMSG, DTRTMTX(TBLGAM), 1, 10000000, FSTS)
      IF(FSTS .LT. 0) THEN
        TYPE *, IAM()
        CALL GSTOP(GEXIT_OPABORT)
      ENDIF
C
C ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE TO TOTOGOLO
C
C     TYPE *, IAM()
C     WRITE(USRMSG, 100) 'TotoGolo'
C     CALL PRMNUM(USRMSG, DTRTMTX(TGLGAM), 1, 10000000, FSTS)
C     TYPE *, IAM()
C     IF(FSTS .LT. 0) THEN
C       TYPE *, IAM()
C       CALL GSTOP(GEXIT_OPABORT)
C     ENDIF
C
C FORMATS DEFINITION TO ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE
C
100   FORMAT('Enter Emissao De Bilhetes Para O ', A)
C
C THIS IS THE END TO ASK TO USER NUMBER OF MATRIX TO DISTRIBUTE
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_MATRIX_LABEL_REPORT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 14 / 09 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT MATRIX LABEL REPORTS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_MATRIX_LABEL_REPORT(MTXREC, PRNTINFO)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT MATRIX LABEL REPORT
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO PRINT MATRIX LABEL REPORT
C
      INTEGER * 4 MTXREC(*)             ! MATRIX REGISTER
C
      LOGICAL PRNTINFO                  ! PRINT INFORMATION ( YES / NO )
C
C CONSTANT VARIABLES TO PRINT MATRIX LABEL REPORT
C
      INTEGER * 4 MAXLBLFMTINF          ! MAXIMUM SUMMARY LABEL FORMATED INFO
C
C INTITIATE CONSTANT VARIABLES TO PRINT MATRIX LABEL REPORT
C
      PARAMETER(MAXLBLFMTINF = 3)       ! MAXIMUM SUMMARY LABEL FORMATED INFO
C
C VARIABLES DEFINITION TO PRINT MATRIX LABEL REPORT
C
      INTEGER * 4 CNTLBLFMTINF / 0 /    ! SUMMARY LABEL FORMATED INFO COUNTER
C
C INITIATE VARIABLES TO TO PRINT MATRIX LABEL REPORT
C
      CALL INIT_FORMATED_SUMMARY_LABEL_REG(1, CNTLBLFMTINF)
C
C CHECK IF SHOULD BE PRINTED THE INFORMATION OR ONLY WE HAVE TO FORMAT IT
C
      IF(PRNTINFO .EQ. .TRUE.) GOTO 1000
      IF(CNTLBLFMTINF .EQ. MAXLBLFMTINF) GOTO 1000
      GOTO 2000
C
C ALL INFORMATION THAT IS FORMATED SHOULD BE PRINTED IN THE FILES
C
1000  CONTINUE
      CALL PRINT_SMRY_LABEL_LINE(CNTLBLFMTINF, PRNTINFO)
      CALL INIT_FORMATED_SUMMARY_LABEL_REG(1, CNTLBLFMTINF)      
C
C CHECK IF WE HAVE TO FORMAT INFORMATION OR ONLY FUNCITION ONLY HAVE TO PRINT 
C
2000  CONTINUE
      IF(PRNTINFO .EQ. .TRUE.) RETURN      
C
C SAVE FORMAT INFORMATION TO PRINT LABEL INFORMATION
C
      CALL FORMAT_LABEL_INFO(MTXREC, CNTLBLFMTINF)
      RETURN
C
C THIS IS THE END TO PRINT MATRIX LABEL REPORT
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_MATRIX_SUMMARY_REPORT
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 14 / 09 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT MATRIX SUMMARY REPORT
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_MATRIX_SUMMARY_REPORT(MTXREC, PRNTINFO)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT MATRIX SUMMARY REPORT
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO PRINT MATRIX SUMMARY REPORT
C
      INTEGER * 4 MTXREC(*)             ! MATRIX REGISTER
C
      LOGICAL PRNTINFO                  ! PRINT INFORMATION ( YES / NO )
C
C CONSTANT VARIABLES TO PRINT MATRIX SUMMARY REPORT
C
      INTEGER * 4 MAXSMRFMTINF          ! MAXIMUM SUMMARY FORMATED INFO
C
C INTITIATE CONSTANT VARIABLES TO PRINT MATRIX SUMMARY REPORT
C
      PARAMETER(MAXSMRFMTINF = 3)       ! MAXIMUM SUMMARY FORMATED INFO
C
C VARIABLES DEFINITION TO PRINT MATRIX SUMMARY REPORT
C
      INTEGER * 4 CNTSMRFMTINF / 0 /    ! SUMMARY FORMATED INFO COUNTER
      INTEGER * 4 LSTDTCT      / -1 /   ! LAST DISTRICT
      INTEGER * 4 CNTLINE      / 0 /    ! REPORT LINE COUNTER
      INTEGER * 4 PAGE         / 1 /    ! PAGE COUNTER
      INTEGER * 4 TOTGOLO      / 0 /    ! TOTAL TOTOGOLO GAME
      INTEGER * 4 TOTBOLO      / 0 /    ! TOTAL TOTOBOLA GAME
C 
C INITIATE VARIABLES TO TO PRINT MATRIX SUMMARY REPORT
C
      CALL INIT_FORMATED_SUMMARY_LABEL_REG(CNTSMRFMTINF, 1)
C
C COPY PARAMETER RECORD REGISTER TO LOCAL ONE IN ORDER TO WORK WITH
C
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
C
C CHECK IF SHOULD BE PRINTED THE INFORMATION OR ONLY WE HAVE TO FORMAT IT
C
      IF(LSTDTCT .LE. -1) GOTO 2000
      IF(CNTSMRFMTINF .EQ. MAXSMRFMTINF) GOTO 1000
      IF(PRNTINFO .EQ. .FALSE.) THEN
        IF(LSTDTCT .EQ. GET_AGENT_DISTRICT(MFCAGT)) GOTO 2000
      ENDIF 
C
C ALL INFORMATION THAT IS FORMATED SHOULD BE PRINTED IN THE FILES
C
1000  CONTINUE
      CALL PRINT_SUMMARY_HEADER(PAGE, CNTLINE, LSTDTCT)
      CALL PRINT_SMRY_LINE(CNTSMRFMTINF, CNTLINE, LSTDTCT, MCFALD, PRNTINFO)
      CALL INIT_FORMATED_SUMMARY_LABEL_REG(CNTSMRFMTINF, 1)      
C
C CHECK IF WE HAVE TO PRINT A NEW PAGE IN THE REPORT 
C
      IF(LSTDTCT .NE. GET_AGENT_DISTRICT(MFCAGT)) THEN
        CALL PRINT_DISTRICT_TOTALS(CNTLINE, PAGE, LSTDTCT, TOTGOLO, TOTBOLO)
      ENDIF
C
C CHECK IF WE HAVE TO FORMAT INFORMATION OR ONLY FUNCITION ONLY HAVE TO PRINT 
C
2000  CONTINUE
      IF(PRNTINFO .EQ. .TRUE.) RETURN      
C
C SAVE DISTRUBUTION LINE VALUE ( THIS VALUE IS NEEDED IN NEXT FUNCTION CALL )
C
      LSTDTCT = GET_AGENT_DISTRICT(MFCAGT)
C
C SAVE FORMAT INFORMATION TO PRINT SUMMARY INFORMATION
C
      CALL FORMAT_SUMMARY_INFO(MTXREC, CNTSMRFMTINF, TOTGOLO, TOTBOLO)
      RETURN
C
C THIS IS THE END TO PRINT MATRIX SUMMARY REPORT
C
      END


C ******************************************************************************
C
C     SUBROUTINE: DIVIDE_STRING
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 04 / 10 / 2001
C
C ******************************************************************************
C
C FUNCTION TO DIVIDE ONE LONG STRING IN TWO STRING IN ORDER TO PRINT
C INFORMATION IN TWO LINES WITH NO DIVISION IN WORDS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE DIVIDE_STRING(LONGSTR, TOPSTR, BOTSTR, IMAXSTRLEN, LENLSTR)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
      INCLUDE 'INCLIB:RECAGT.DEF'
C
C PARAMETERS DEFINITION TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      INTEGER * 4 LONGSTR(*)             ! INPUT LONG STRING INTEGER FORMAT
      INTEGER * 4 TOPSTR(*)              ! OUTPUT TOP STRING INTEGER FORMAT
      INTEGER * 4 BOTSTR(*)              ! OUTPUT BOT STRING INTEGER FORMAT
      INTEGER * 4 IMAXSTRLEN             ! OUTPUT LENGTH STRING IN INTEGER 
      INTEGER * 4  LENLSTR               ! LENGTH OF LONG STRING
C
C CONSTANT PARAMETERS DEFINITION TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      INTEGER * 4 IMAXINPSTR             ! MAXIMUM INPUT STRING IN INGEGER
      INTEGER * 4 CMAXINPSTR             ! MAXIMUM INPUT STRING IN CHARACTER 
C
C INIT CONSTANT PARAMETERS DEFINITION TO HAVE TWO STRINGS WITH NOT DIVISIONS
C
      PARAMETER(IMAXINPSTR = 200)                ! INPUT STRING IN INTEGER
      PARAMETER(CMAXINPSTR = IMAXINPSTR * 4)     ! INPUT STRING IN CHARACTER
C
C VARIABLES DEFINITION TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      INTEGER * 4 POS                     ! POSITION COUNTER
      INTEGER * 4 STRLEN                  ! STRING LENGHT COUNTER
      INTEGER * 4 IBLANK                  ! BLANK CHARACER IN INTEGER FORMAT
      INTEGER * 4 CMAXSTRLEN              ! MAXIMUM STRING LENGHT IN CHARACTER
      INTEGER * 4 ILONGSTR(IMAXINPSTR)    ! INPUT STRING INTEGER FORMAT
      INTEGER * 4 ITOPSTR(IMAXINPSTR)     ! OUTPUT TOP STRING
      INTEGER * 4 IBOTSTR(IMAXINPSTR)     ! OUTPUT BOT STRING
C
      CHARACTER * 4 CBLANK  / '    ' /    ! BLANK CHARACER IN CHARACTER FORMAT
      CHARACTER * (CMAXINPSTR) CLONGSTR   ! INPUT STRING IN CHARACTER FORMAT
      CHARACTER * (CMAXINPSTR) CTOPSTR    ! TOP STRING
      CHARACTER * (CMAXINPSTR) CBOTSTR    ! BOT STRING
C
      LOGICAL ISBLANK                     ! FOUND BLANK CHARACTER ( YES / NO )
C
C EQUIVALENCES DEFINITION TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      EQUIVALENCE(CBLANK, IBLANK)
      EQUIVALENCE(CLONGSTR, ILONGSTR)
      EQUIVALENCE(CTOPSTR, ITOPSTR)
      EQUIVALENCE(CBOTSTR, IBOTSTR)
C
C COPY PARAMETER VARIABLES TO LOCAL VARIABLES
C
      CALL FASTSET(IBLANK, ILONGSTR, IMAXINPSTR)
      CALL FASTMOV(LONGSTR, ILONGSTR,  LENLSTR)
C
C INITIATE OUTPUT STRING WITH BLANK CHARACTER
C
      CMAXSTRLEN = IMAXSTRLEN * 4
      CALL FASTSET(IBLANK, ITOPSTR, IMAXSTRLEN)
      CALL FASTSET(IBLANK, IBOTSTR, IMAXSTRLEN)
C
C COUNT CHARACTERS TO KNOW IF WE HAVE TO WRITE IN TWO OUTPUT DIVISION STRINGS
C
      DO STRLEN = CMAXINPSTR, 1, -1
        IF(CLONGSTR(STRLEN:STRLEN) .NE. ' ') GOTO 1000
      ENDDO
C
C WE HAVE FINISHED TO COUNT CHARACTER, SO LES GO TO CHECK INPUT LENGHT
C
1000  CONTINUE
C
C IF LENGHT IS LESS THAN MAXIMUM INPUT LENGHT THEN SET OUPUT AND FINISH
C
      IF(STRLEN .LE. CMAXSTRLEN) THEN
        CALL FASTMOV(ILONGSTR, ITOPSTR, IMAXSTRLEN)
        GOTO 3000
      ENDIF
C
C IF LENGHT IS GREATER THAN MAXIMUM INPUT THEN DIVIDE ADDRESS BUT NOT WORDS
C
      ISBLANK = .FALSE.
      DO POS = STRLEN, 1, -1
        IF(CLONGSTR(POS:POS) .EQ. ' ' .AND. POS .LE. CMAXSTRLEN) THEN
          ISBLANK = .TRUE.
          GOTO 2000
        ENDIF
      ENDDO
C
C FORMAT OUTPUT STRINGS DEPENDING IF WE HAVE ENOUGHT SPACE
C
2000  CONTINUE
      IF(ISBLANK .EQ. .FALSE.) POS = CMAXSTRLEN - 1
      CTOPSTR(1:POS) = CLONGSTR(1:POS)
      IF(ISBLANK .EQ. .FALSE.) CTOPSTR(CMAXSTRLEN:CMAXSTRLEN) = '-'
      CBOTSTR(1:STRLEN - POS) = CLONGSTR(POS + 1:STRLEN)
C
C COPY LOCAL VARIABLES IN PARAMETER VARIABLES
C
3000  CONTINUE
      CALL FASTMOV(ITOPSTR, TOPSTR, IMAXSTRLEN)
      CALL FASTMOV(IBOTSTR, BOTSTR, IMAXSTRLEN)
      RETURN
C
C THIS IS THE END TO HAVE TWO STRINGS WITH NOT WORDS DIVISION
C
      END

C ******************************************************************************
C
C     SUBROUTINE: CHECK_OVERFLOW_SALES
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 02 / 07 / 2002
C
C ******************************************************************************
C
C FUNCTION TO CHECK IF AGENT HAVE OVERFLOW SALES AND IT IS NOT POSSIBLE TO
C PRINT THIS AGENT INFORMATION IN THE REPORTS GENERATED BY THIS TASK
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      LOGICAL FUNCTION CHECK_OVERFLOW_SALES(MTXREC, SHWWRNG)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO CHECK OVERFLOW SALES
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO CHECK OVERFLOW SALES
C
      INTEGER * 4 MTXREC(*)           ! MATRIX REGISTER
      LOGICAL SHWWRNG                 ! SHOW WARNING YES / NO
C
C VARIABLES DEFINITION TO CHECK OVERFLOW SALES
C
      INTEGER * 4 TOTSIMWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL SIMPLE WAGERS
      INTEGER * 4 TOTMULWAG(MAXTOT, MAXWEK, RPTMAXGAM)  ! TOTAL MULTIPLE WAGERS
      INTEGER * 4 GRDTOT(MAXTOT, MAXWEK, RPTMAXGAM)     ! GRAND TOTALS
      INTEGER * 4 CNTWAG                                ! WAGERS COUNTER
      INTEGER * 4 LTCNTWAG                              ! LOTTO WAGERS COUNTER
      INTEGER * 4 IDXPOS                ! INDEX POSITION IN WAGERS TABLE
      INTEGER * 4 LTIDXPOS              ! LOTTO INDEX POSITION IN WAGERS TABLE
      INTEGER * 4 PRTWGTBL(30)          ! WAGERS PRINTED TABLE
      INTEGER * 4 LTPRTWGTBL(7)         ! LOTTO WAGERS PRINTED TABLE
      INTEGER * 4 TOTPOS                ! TOTAL POSITION CNT.
      INTEGER * 4 WEEK                  ! WEEK POSITION CNT.
      INTEGER * 4 GNUM                  ! GAME POSITION CNT.
      INTEGER * 4 JOKTOTAL              ! JOKER TOTAL
      INTEGER * 4 TOTMLP                ! TOTAL MULTIPLE
      INTEGER * 4 PRNTWAG               ! PRINTED WAGER
C
C INITIATE VARIABLES WITH DEFAULT VALUES TO CHECK OVERFLOW SALES
C
      DATA PRTWGTBL    / 002, 003, 004, 006, 008, 009, 012, 016, 018, 024, 
     *                   027, 032, 036, 048, 054, 064, 072, 081, 096, 108, 
     *                   128, 144, 162, 192, 216, 243, 256, 288, 324, 384  / 
C
      DATA LTPRTWGTBL  / 7, 28, 84, 210, 462, 924, 44 /
C
C COPY PARAMETER RECORD REGISTER TO LOCAL ONE IN ORDER TO WORK WITH
C
      CALL FASTMOV(MTXREC, MFCREC, MFCLEN)
C
C CHECK IF AGENT NUMBER IT HAVE LIMIT OVERFLOW
C
      IF(MFCAGT .GT. 9999999) GOTO 1000
C
C CHECK IF DISTRIBUTION LINE AND RECEPTION CENTER HAVE LIMIT OVERFLOW
C
      IF(MCFALD .GT. 99 .OR. MCFACR .GT. 9999999) GOTO 1000
C
C INITIATE VARIABLE TO CALCULATE TOTAL COUNTER AN WAGERS
C
      CALL FASTSET(0, TOTSIMWAG, MAXTOT * RPTMAXGAM * MAXWEK)
      CALL FASTSET(0, TOTMULWAG, MAXTOT * RPTMAXGAM * MAXWEK)
C
C CALCULATE TOTAL SIMPLE CONTERS AND WAGERS FOR ALL GAMES 
C
      DO CNTWAG = 2, 10, 2
        CALL SEARCH_WAGER_INDEX_POSITION(CNTWAG, IDXPOS)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, TBLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, TBLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, TGLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, TGLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, LOTGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, LOTGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK5, LOTGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK5, LOTGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK1, LO2GAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTWAG, WEEK1, LO2GAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTSIMWAG, MFCWSB, TOTCNT, WEEK5, LO2GAM, IDXPOS, 0)
      ENDDO
C
C CHECK IF REPORT HAVE OVERFLOW FOR ANY SINPLE WAGER
C
      IF(TOTSIMWAG(TOTCNT, WEEK1, TBLGAM) .GT. 999    .OR. ! COUNTER TOTOBOLA
     *   TOTSIMWAG(TOTWAG, WEEK1, TBLGAM) .GT. 99999  .OR. ! WAGERS  TOTOBOLA
     *   TOTSIMWAG(TOTCNT, WEEK1, TGLGAM) .GT. 9999   .OR. ! COUNTER TOTOGOLO
     *   TOTSIMWAG(TOTWAG, WEEK1, TGLGAM) .GT. 9999   .OR. ! WAGERS  TOTOGOLO
     *   TOTSIMWAG(TOTCNT, WEEK1, LOTGAM) .GT. 99999  .OR. ! C. LOTO SAB 1 WEEK
     *   TOTSIMWAG(TOTWAG, WEEK1, LOTGAM) .GT. 999999 .OR. ! W. LOTO SAB 1 WEEK
     *   TOTSIMWAG(TOTCNT, WEEK5, LOTGAM) .GT. 9999   .OR. ! C. LOTO SAB 5 WEEK
     *   TOTSIMWAG(TOTWAG, WEEK5, LOTGAM) .GT. 99999  .OR. ! W. LOTO SAB 5 WEEK
     *   TOTSIMWAG(TOTCNT, WEEK1, LO2GAM) .GT. 99999  .OR. ! C. LOTO MON 1 WEEK
     *   TOTSIMWAG(TOTWAG, WEEK1, LO2GAM) .GT. 999999 .OR. ! W. LOTO MON 1 WEEK
     *   TOTSIMWAG(TOTCNT, WEEK5, LO2GAM) .GT. 9999   .OR. ! C. LOTO MON 5 WEEK
     *   TOTSIMWAG(TOTWAG, WEEK5, LO2GAM) .GT. 99999)      ! W. LOTO MON 5 WEEK
     * THEN
         GOTO 1000
       ENDIF
C
C CALCULATE TOTAL MULTIPLE CONTERS AND WAGERS FOR ALL GAMES 
C
      LTCNTWAG = 1
      DO CNTWAG = 1, 30
        PRNTWAG = PRTWGTBL(CNTWAG)
        CALL SEARCH_WAGER_INDEX_POSITION(PRNTWAG, IDXPOS)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, TBLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, TBLGAM, IDXPOS, 1)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, TGLGAM, IDXPOS, 0)
        CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, TGLGAM, IDXPOS, 1)
        IF(CNTWAG .GT. 23) THEN
          PRNTWAG = LTPRTWGTBL(LTCNTWAG)
          CALL SEARCH_WAGER_INDEX_POSITION(PRNTWAG, LTIDXPOS)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, LOTGAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, LOTGAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK5, LOTGAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK5, LOTGAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK1, LO2GAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK1, LO2GAM, LTIDXPOS, 1)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTCNT, WEEK5, LO2GAM, LTIDXPOS, 0)
          CALL ADD_TOTALS(TOTMULWAG, MFCWMB, TOTWAG, WEEK5, LO2GAM, LTIDXPOS, 1)
          LTCNTWAG = LTCNTWAG + 1
        ENDIF
      ENDDO
C
C CHECK IF REPORT HAVE OVERFLOW FOR ANY MULTIPLE WAGER
C
      IF(TOTMULWAG(TOTCNT, WEEK1, TBLGAM) .GT. 9999   .OR.  ! COUNTER TOTOBOLA
     *   TOTMULWAG(TOTWAG, WEEK1, TBLGAM) .GT. 99999  .OR.  ! WAGERS  TOTOBOLA
     *   TOTMULWAG(TOTCNT, WEEK1, TGLGAM) .GT. 9999   .OR.  ! COUNTER TOTOGOLO
     *   TOTMULWAG(TOTWAG, WEEK1, TGLGAM) .GT. 9999   .OR.  ! WAGERS  TOTOGOLO
     *   TOTMULWAG(TOTCNT, WEEK1, LOTGAM) .GT. 99999  .OR.  ! C. LOTO SAB 1 WEEK
     *   TOTMULWAG(TOTWAG, WEEK1, LOTGAM) .GT. 999999 .OR.  ! W. LOTO SAB 1 WEEK
     *   TOTMULWAG(TOTCNT, WEEK5, LOTGAM) .GT. 9999   .OR.  ! C. LOTO SAB 5 WEEK
     *   TOTMULWAG(TOTWAG, WEEK5, LOTGAM) .GT. 99999  .OR.  ! W. LOTO SAB 5 WEEK
     *   TOTMULWAG(TOTCNT, WEEK1, LO2GAM) .GT. 99999  .OR.  ! C. LOTO MON 1 WEEK
     *   TOTMULWAG(TOTWAG, WEEK1, LO2GAM) .GT. 999999 .OR.  ! W. LOTO MON 1 WEEK
     *   TOTMULWAG(TOTCNT, WEEK5, LO2GAM) .GT. 9999   .OR.  ! C. LOTO MON 5 WEEK
     *   TOTMULWAG(TOTWAG, WEEK5, LO2GAM) .GT. 99999)       ! W. LOTO MON 5 WEEK
     * THEN
         GOTO 1000
       ENDIF
C
C CALCULATE GRAN TOTALS ( TOSAL SIMPLE WAGERS + TOTAL MULTIPLE WAGERS )
C
      CALL FASTMOV(TOTSIMWAG, GRDTOT, MAXTOT * MAXWEK * RPTMAXGAM)
      DO WEEK = 1, MAXWEK
        DO TOTPOS = 1, MAXTOT
          DO GNUM = 1, RPTMAXGAM
             TOTMLP = TOTMULWAG(TOTPOS, WEEK, GNUM)
             GRDTOT(TOTPOS, WEEK, GNUM) = GRDTOT(TOTPOS, WEEK, GNUM) + TOTMLP
          ENDDO
        ENDDO
      ENDDO
C
C CHECK IF REPORT HAVE OVERFLOW FOR ANY GRAN TOTAL WAGER
C
      IF(GRDTOT(TOTCNT, WEEK1, TBLGAM) .GT. 9999   .OR.  ! COUNTER TOTOBOLA
     *   GRDTOT(TOTWAG, WEEK1, TBLGAM) .GT. 99999  .OR.  ! WAGERS  TOTOBOLA
     *   GRDTOT(TOTCNT, WEEK1, TGLGAM) .GT. 9999   .OR.  ! COUNTER TOTOGOLO
     *   GRDTOT(TOTWAG, WEEK1, TGLGAM) .GT. 9999   .OR.  ! WAGERS  TOTOGOLO
     *   GRDTOT(TOTCNT, WEEK1, LOTGAM) .GT. 99999  .OR.  ! C. LOTO SAB 1 WEEK
     *   GRDTOT(TOTWAG, WEEK1, LOTGAM) .GT. 999999 .OR.  ! W. LOTO SAB 1 WEEK
     *   GRDTOT(TOTCNT, WEEK5, LOTGAM) .GT. 9999   .OR.  ! C. LOTO SAB 5 WEEK
     *   GRDTOT(TOTWAG, WEEK5, LOTGAM) .GT. 99999  .OR.  ! W. LOTO SAB 5 WEEK
     *   GRDTOT(TOTCNT, WEEK1, LO2GAM) .GT. 99999  .OR.  ! C. LOTO MON 1 WEEK
     *   GRDTOT(TOTWAG, WEEK1, LO2GAM) .GT. 999999 .OR.  ! W. LOTO MON 1 WEEK
     *   GRDTOT(TOTCNT, WEEK5, LO2GAM) .GT. 9999   .OR.  ! C. LOTO MON 5 WEEK
     *   GRDTOT(TOTWAG, WEEK5, LO2GAM) .GT. 99999)       ! W. LOTO MON 5 WEEK
     * THEN
         GOTO 1000
       ENDIF
C
C CALCULATE JOKER GRAN TOTAL
C
      JOKTOTAL = GRDTOT(TOTJOK, WEEK1, TBLGAM) + 
     *           GRDTOT(TOTJOK, WEEK1, TGLGAM) +
     *           GRDTOT(TOTJOK, WEEK1, LOTGAM) +
     *           GRDTOT(TOTJOK, WEEK5, LOTGAM)
C
C CHECK IF REPORT HAVE OVERFLOW FOR JOKER GRAN TOTAL WAGER
C
      IF(JOKTOTAL .GT. 9999) GOTO 1000
C
C CHECK IF REPORT HAVE OVERFLOW FOR ANY JOKER GAN TOTAL
C
      IF(GRDTOT(TOTJOK, WEEK1, TBLGAM) .GT. 999    .OR.  ! COUNTER TOTOBOLA
     *   GRDTOT(TOTJOK, WEEK1, TBLGAM) .GT. 99999  .OR.  ! WAGERS  TOTOBOLA
     *   GRDTOT(TOTJOK, WEEK1, TGLGAM) .GT. 9999   .OR.  ! COUNTER TOTOGOLO
     *   GRDTOT(TOTJOK, WEEK1, TGLGAM) .GT. 9999   .OR.  ! WAGERS  TOTOGOLO
     *   GRDTOT(TOTJOK, WEEK1, LOTGAM) .GT. 99999  .OR.  ! C. LOTO SAB 1 WEEK
     *   GRDTOT(TOTJOK, WEEK1, LOTGAM) .GT. 999999 .OR.  ! W. LOTO SAB 1 WEEK
     *   GRDTOT(TOTJOK, WEEK5, LOTGAM) .GT. 9999   .OR.  ! C. LOTO SAB 5 WEEK
     *   GRDTOT(TOTJOK, WEEK5, LOTGAM) .GT. 99999)       ! W. LOTO SAB 5 WEEK
     * THEN
         GOTO 1000
       ENDIF
C
C IF FUNCTION IT IS HERE MEANS THAT THIS AGENT HAVE NOT OVERFLOW SALES
C
      CHECK_OVERFLOW_SALES = .FALSE.
      RETURN
C
C IF FUNCTION IT IS HERE MEANS THAT THIS AGENT HAVE OVERFLOW SALES
C
1000  CONTINUE
      SHWWRNG = .TRUE.
      CHECK_OVERFLOW_SALES = .TRUE.
      CALL PRINT_OVERFLOW_SALES_WARNING(MFCAGT)
      RETURN
C
C THIS IS THE END TO CHECK OVERFLOW SALES
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_OVERFLOW_SALES_WARNING
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 02 / 07 / 2002
C
C ******************************************************************************
C
C THIS FUNCTION SHOW A WARNING IN THE CONSOLE TO THE OPERATOR,
C VERBETES REPORT IS NOT GOING TO BE GENERATED TO THIS AGENT.
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_OVERFLOW_SALES_WARNING(NUM_AGT)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT OVERFLOW WARNING
C
      INCLUDE 'INCLIB:BSAGTCTL_OLD.DEF'
C
C PARAMETERS DEFINITION TO PRINT OVERFLOW WARNING
C
      INTEGER * 4 NUM_AGT            ! AGENT NUMBER
C
C VARIABLES DEFINITION TO PRINT PRINT OVERFLOW WARNING
C
      LOGICAL FRST_TIME  / .TRUE. /  ! FIRST TIME IT'S RUN THIS TASK
C
C FUNCTIONS DEFINITION TO PRINT OVERFLOW WARNING
C
      CHARACTER * 8 IAGT_NO          ! FUNCTION TO FORMAT AGENT NUMBER
C
C DISPLAY ERROR ON THE CONSOLE FIRST TIME ( WARNING )
C
      IF(FRST_TIME .EQ. .TRUE.) THEN
        TYPE 100, IAM()  
        TYPE *, IAM()
        TYPE *, IAM(), 'Warning ...'
        TYPE *, IAM()
        TYPE *, IAM(), 'Following Agent Numbers Have To Many Sales.'
        TYPE *, IAM()
        TYPE *, IAM(), 'This Will Generate Task Crash OverFlow, So Report'
        TYPE *, IAM()
        TYPE *, IAM(), 'For These Agents Will Not Be Generated'
        TYPE *, IAM()
        TYPE 100, IAM()
        TYPE *, IAM()
        FRST_TIME = .FALSE.
      ENDIF
C
C DISPLAY ERROR ON THE CONSOLE TO THE OPERATOR
C
      TYPE 200, IAM(), IAGT_NO(NUM_AGT)
C
C FORMAT DEFINITION TO PRINT OVERFLOW WARNING
C
100   FORMAT(X, A, 50('=')) 
200   FORMAT(X, A,  'Verbetes Report Is not Generated For Agent: ' A8)
C
C THIS IS THE END TO PRINT OVERFLOW WARNING
C
      END
