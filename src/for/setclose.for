C SETCLOSE
C
C V05 17-MAR-2015 SCML DO NOT BROADCAST BROTEXT MESSAGES TO X2X NETWORK
C V04 01-JAN-2010 FJG ePassive
C V03 27-OCT-2000 OXK Time fixed in DISP_TSLROW
C V02 02-OCT-2000 OXK Allow odds up to 99.99 in DISP_TSLROW
C V01 08-SEP-2000 OXK INITIAL RELEASE BASED ON OLD GAMEMOD & MCLOSE
C
C GAME CLOSE AND/OR MODIFY PROGRAM
C
C SUBROUTINES DEFINED BELOW:
C	    SET_CLOSE	CLOSE GAME/ROW
C	    SET_OPEN	OPEN GAME/ROW
C	    SET_TIME	CHANGE CLOSING TIME FOR GAME/ROW
C	    DISP_GAME	PRINTS SOME GAME DATA
C	    DISP_TSLROW	PRINTS SOME DATA ABOUT TSL ROW
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode Island, and
C contains confidential and trade secret information. It may not be transferred
C from the custody or control of GTECH except as authorized in writing by an
C officer of GTECH. Neither this item nor the information it contains may be
C used, transferred, reproduced, published, or disclosed, in whole or in part,
C and directly or indirectly, except as expressly authorized by an officer of
C GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	PROGRAM SETCLOSE
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'
	INCLUDE 'INCLIB:RECUSE.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'

	INCLUDE 'INCLIB:NBRCOM.DEF'
	INCLUDE 'INCLIB:LTOCOM.DEF'
	INCLUDE 'INCLIB:SPTCOM.DEF'
	INCLUDE 'INCLIB:TGLCOM.DEF'
	INCLUDE 'INCLIB:KIKCOM.DEF'
	INCLUDE 'INCLIB:SCRCOM.DEF'
	INCLUDE 'INCLIB:WITCOM.DEF'
	INCLUDE 'INCLIB:TSLCOM.DEF'
	INCLUDE 'INCLIB:BNGCOM.DEF'
	INCLUDE 'INCLIB:DBLCOM.DEF'
	INCLUDE 'INCLIB:CPLCOM.DEF'
	INCLUDE 'INCLIB:SSCCOM.DEF'
	INCLUDE 'INCLIB:TRPCOM.DEF'
	INCLUDE 'INCLIB:STRCOM.DEF'
	INCLUDE 'INCLIB:PASCOM.DEF'
C
C	PARAMETERS
	INTEGER*4   STDOUT
	PARAMETER   (STDOUT = 6)

	INTEGER*4   O_GCLOSE, O_CTIME, O_RCLOSE, O_ROPEN
	PARAMETER   (O_GCLOSE = 1)  ! Game CLOSE
	PARAMETER   (O_CTIME = 2)   ! Change closing TIME
	PARAMETER   (O_RCLOSE = 3)  ! Row CLOSE
	PARAMETER   (O_ROPEN  = 4)  ! Row reOPEN

C
C	VARIABLES
	INTEGER*4   GTYP, GIND, GNUM
	INTEGER*4   EXT, ST, FLAG, EXTR, INDEMI
	INTEGER*4   I

	INTEGER*4 CBUF(CDLEN)
	INTEGER*4 BITMAP(2)
	INTEGER*4 ROW
	INTEGER*4 OPT

C
C
	CALL COPYRITE
C
	BITMAP(1) = 0
	BITMAP(2) = 0
C
C
100	CONTINUE
	CALL FASTMOV(0,CBUF,CDLEN)

	WRITE(STDOUT,90000)

	DO I=1,MAXTYP
	    WRITE(STDOUT,90100) I,GTNAMES(I)
	ENDDO
	CALL PRMNUM('Enter game type [E=exit] ',GTYP,1,MAXTYP,EXT)
	IF(EXT.LT.0) GOTO 40000
	IF (GTYP.EQ.TNBR .OR. GTYP.EQ.TINS .OR. GTYP.EQ.18) THEN
	   WRITE(STDOUT,99000)GTNAMES(GTYP)
	   GOTO 100
	ENDIF

	CALL PRMNUM('Enter game index [E=exit] ',GIND,1,MAXIND,EXT)
	IF(EXT.LT.0) GOTO 100

	GNUM = GTNTAB(GTYP,GIND)
	IF(GNUM.LT.1.OR.GNUM.GT.MAXGAM) THEN
	    WRITE(STDOUT,99100)GTYP,GIND
	    GOTO 100
	ENDIF
C
C GET OPTION
C
	CALL DISP_GAME(STDOUT,GTYP,GIND)

	IF(GTYP.EQ.TTSL) THEN
	    WRITE(STDOUT,90200) GTNAMES(GTYP)
	    CALL PRMNUM('Enter option number [E=exit] ',OPT,1,4,EXT)
	ELSE
	    WRITE(STDOUT,90300) GTNAMES(GTYP)
	    CALL PRMNUM('Enter option number [E=exit] ',OPT,1,2,EXT)
	ENDIF

	IF(EXT.LT.0) GOTO 100

	IF(GTYP.EQ.TLTO) GOTO 1000
	IF(GTYP.EQ.TSPT) GOTO 2000
	IF(GTYP.EQ.TNBR) GOTO 3000
	IF(GTYP.EQ.TKIK) GOTO 4000
	IF(GTYP.EQ.TDBL) GOTO 5000
	IF(GTYP.EQ.TSCR) GOTO 6000
	IF(GTYP.EQ.TWIT) GOTO 7000
	IF(GTYP.EQ.TTSL) GOTO 8000
	IF(GTYP.EQ.TSSC) GOTO 9000
	IF(GTYP.EQ.TBNG) GOTO 10000
	IF(GTYP.EQ.TCPL) GOTO 11000
	IF(GTYP.EQ.TSTR) GOTO 12000
	IF(GTYP.EQ.TTRP) GOTO 13000
	IF(GTYP.EQ.TTGL) GOTO 14000
	IF(GTYP.EQ.TPAS) GOTO 15000
	GOTO 100

C TLTO
1000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(LTOESD(GIND), LTOSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCLTO
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(LTOTIM(GIND), LTOESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TSPT
2000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(SPTESD(GIND), SPTSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
	 	CBUF(3)=TCSPT
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(SPTTIM(GIND), SPTESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TNBR	NOT REACHED
3000	CONTINUE
	GOTO 100

C TKIK
4000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(KIKESD(GIND), KIKSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCKIK
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(KIKTIM(GIND), KIKESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TDBL
5000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(DBLESD(GIND), DBLSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCDBL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(DBLTIM(GIND), DBLESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TSCR
6000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(SCRESD(GIND), SCRSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCSCR
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(SCRTIM(GIND), SCRESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TWIT
7000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(WITESD(GIND), WITSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCWIT
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(WITTIM(GIND), WITESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TTSL
8000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    DO ROW=1,TSLRWS(GIND)
	      IF(TSLSTA(ROW,GIND).LT.GAMBFD) THEN
		WRITE(STDOUT,99300) ROW
		GOTO 100
	      ENDIF
	    ENDDO
	    CALL SET_CLOSE(TSLESD(GIND), TSLSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCTSL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL DISP_TSLROW(STDOUT,GIND,0)
	    CALL PRMNUM('Enter row to modify [E=exit] ',ROW,1,TSLRWS(GIND),EXT)
	    IF (EXT.NE.0) GOTO 100
	    CALL DISP_TSLROW(STDOUT,GIND,ROW)
	    CALL SET_TIME(TSLTIM(ROW,GIND), TSLESD(GIND), EXT)
	    GOTO 100
	ELSEIF (OPT.EQ.O_RCLOSE) THEN
	    CALL DISP_TSLROW(STDOUT,GIND,0)
	    CALL PRMNUM('Enter row to close [E=exit] ',ROW,1,TSLRWS(GIND),EXT)
	    IF (EXT.NE.0) GOTO 100
	    CALL DISP_TSLROW(STDOUT,GIND,ROW)
	    CALL SET_CLOSE(TSLDAT(ROW,GIND), TSLSTA(ROW,GIND), EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCTSL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND,ROW
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_ROPEN) THEN
	    CALL DISP_TSLROW(STDOUT,GIND,0)
	    CALL PRMNUM('Enter row to open [E=exit] ',ROW,1,TSLRWS(GIND),EXT)
	    IF (EXT.NE.0) GOTO 100
	    CALL DISP_TSLROW(STDOUT,GIND,ROW)
	    CALL SET_OPEN(TSLDAT(ROW,GIND), TSLSTA(ROW,GIND), EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCTSL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND,ROW
		GOTO 100
	    ENDIF
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000
C TSSC
9000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(SSCESD(GIND), SSCSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCSSC
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(SSCTIM(GIND), SSCESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TBNG
10000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(BNGESD(GIND), BNGSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCBNG
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(BNGTIM(GIND), BNGESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TCPL
11000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(CPLESD(GIND), CPLSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCCPL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(CPLTIM(GIND), CPLESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TSTR
12000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(STRESD(GIND), STRSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCSTR
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(STRTIM(GIND), STRESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TTRP
13000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(TRPESD(GIND), TRPSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
		CBUF(3)=TCTRP
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(TRPTIM(GIND), TRPESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000
C TTGL
14000	CONTINUE
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(TGLESD(GIND), TGLSTS(GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
	 	CBUF(3)=TCTGL
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(TGLTIM(GIND), TGLESD(GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000

C TPAS
15000	CONTINUE
	WRITE(STDOUT,90500) GIND,PASEMIS(PASCURDRW(GIND),GIND)
        CALL PRMYESNO('Is this correct [Y/N]?',FLAG)
	IF (FLAG.EQ.2) THEN
	    CALL PRMNUM('Enter extraction number: ',EXTR,1,99999,EXT)
	    IF (EXT.NE.0) CALL GSTOP(GEXIT_OPABORT)
	    DO INDEMI=1,PAGEMI
		IF (PASEMIS(INDEMI,GIND).EQ.EXTR) EXIT
	    ENDDO
	    IF (INDEMI.GT.PAGEMI) THEN
		WRITE(STDOUT,99400) EXTR
		GOTO 100
	    ENDIF
	ELSE
	    INDEMI = PASCURDRW(GIND)
	ENDIF
	IF (OPT.EQ.O_GCLOSE) THEN
	    CALL SET_CLOSE(PASESD(INDEMI,GIND), PASSTS(INDEMI,GIND),EXT)
	    IF (EXT.EQ.0) THEN
	        CALL BSET(BITMAP,GNUM)
	 	CBUF(3)=TCPAS
		CBUF(9)=PASEMIS(INDEMI,GIND)
	    ELSE
		WRITE(STDOUT,90400)GTNAMES(GTYP),GIND
		GOTO 100
	    ENDIF
	ELSEIF (OPT.EQ.O_CTIME) THEN
	    CALL SET_TIME(PASTIM(INDEMI,GIND), PASESD(INDEMI,GIND), EXT)
	    GOTO 100
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP),GIND
	    GOTO 100
	ENDIF
	GOTO 30000
C
C PUT NEXT GAME TYPE HERE
C

C
C SEND THE COMMAND
C
30000	CONTINUE
C
	IF (OPT.EQ.O_GCLOSE) THEN
	    WRITE(STDOUT,91000) GTNAMES(GTYP), GIND
	ELSEIF (OPT.EQ.O_RCLOSE) THEN
	    WRITE(STDOUT,91000) GTNAMES(GTYP), GIND, ROW
	ELSEIF (OPT.EQ.O_ROPEN) THEN
	    WRITE(STDOUT,91010) GTNAMES(GTYP), GIND, ROW
	ELSE
	    WRITE(STDOUT,99200) GTNAMES(GTYP), GIND
	    GOTO 100
	ENDIF
	CALL PRMYESNO('Is this correct [Y/N]?',FLAG)
	IF (FLAG.NE.1) GOTO 100

	IF (OPT.EQ.O_GCLOSE) THEN
	    CBUF(1)=1
	    CBUF(2)=GAMBFD
	    CBUF(6)='SYS '
	    CBUF(8)=GIND
	ELSE				    ! ROW OPEN/CLOSE FOR TTSL
	    CBUF(1)=2
	    IF(OPT.EQ.O_RCLOSE) THEN
		CBUF(2)=GAMBFD
	    ELSEIF(OPT.EQ.O_ROPEN) THEN
		CBUF(2)=GAMOPN
	    ELSE
		WRITE(STDOUT,99200) GTNAMES(GTYP), GIND
		GOTO 100		    ! NOT REACHED
	    ENDIF
	    CBUF(6)='SYS '
	    CBUF(8)=GIND
	    CBUF(9)=ROW
	ENDIF

	CALL QUECMD(CBUF,ST)
	IF(ST.EQ.0) THEN
	    IF (OPT.EQ.O_GCLOSE) THEN
		WRITE(STDOUT,91100) GTNAMES(GTYP), GIND
	    ELSEIF (OPT.EQ.O_RCLOSE) THEN
		WRITE(STDOUT,91100) GTNAMES(GTYP), GIND, ROW
	    ELSEIF (OPT.EQ.O_ROPEN) THEN
		WRITE(STDOUT,91110) GTNAMES(GTYP), GIND, ROW
	    ENDIF
	    CALL XWAIT(2,2,ST)
	ELSE
	    WRITE(STDOUT,99900) ST
	ENDIF
	GOTO 100
C
C SEND NEW GAME MESSAGE
C
40000	CONTINUE
C	IF(BITMAP(1).NE.0.OR.BITMAP(2).NE.0) THEN  !V05
C	  CBUF(1)=6                                !V05
C	  CBUF(2)=BITMAP(1)                        !V05
C	  CBUF(8)=BITMAP(2)                        !V05
C	  CBUF(3)=TCSPE                            !V05
C	  CBUF(6)='SYS '                           !V05
C	  CALL QUECMD(CBUF,ST)                     !V05
C	  IF(ST.NE.0) WRITE(STDOUT,99900) ST       !V05
C	ENDIF                                      !V05

	CALL GSTOP(GEXIT_SUCCESS)

C FORMAT STATEMENTS
C	90K MENUS & INFOS
C	91K CONFIRMATIONS
C	99K ERRORS

90000	FORMAT(//,22X,'Game status on-line modification',/)
90100	FORMAT(22X,I2,' - ',A8)
90200	FORMAT(22X,'Functions for ',A8,/,
     *	       22X,'  1 - close whole game'/,
     *	       22X,'  2 - change closing time for a row',/,
     *	       22X,'  3 - close a row',/,
     *	       22X,'  4 - re-open a row',/,
     *	       22X,'  E - exit',/)
90300	FORMAT(22X,'Functions for ',A8,/,
     *	       22X,'  1 - close game',/,
     *	       22X,'  2 - change closing time',/,
     *	       22X,'  E - exit',/)
90400	FORMAT(22X,'Operation cancelled for ',A8,X,I1,:,' row ',I2)
90500	FORMAT(22X,'Passive ',I4,' extraction number ',I4)

91000	FORMAT(22X,'Closing ',A8,X,I1,:,' row ',I2)
91010	FORMAT(22X,'Opening ',A8,X,I1,:,' row ',I2)
91100	FORMAT(22X,'Closed  ',A8,X,I1,:,' row ',I2)
91110	FORMAT(22X,'Opened  ',A8,X,I1,' row ',I2)

99000	FORMAT(22X,'Selected game type ',A8,' not implemented!')
99100	FORMAT(22X,'Selected game (type:',I2,' ind:',I1,') is not active!')
99200	FORMAT(22X,'Incorrect option selected for ',A8,X,I1)
99300	FORMAT(22X,'Close open rows first - at least row ',I2,' is still open!')
99400   FORMAT(22X,'Extraction ',I4,' not found on memory')

99900	FORMAT(22X,'Queue comand error > ',I8)
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SUBROUTINE TO CHECK WHETHER GAME/ROW CAN BE CLOSED
C
C RETURN VALUES
C	0   OK TO CLOSE
C	-1  NOT OK

C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	SUBROUTINE SET_CLOSE(DATE, STATUS, EXT)
	IMPLICIT NONE

	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'

	INTEGER*4   DATE, STATUS, EXT
	INTEGER*4   FLAG

	EXT = -1

	IF (DATE.NE.DAYCDC) THEN
	    WRITE(6,100)
	    CALL PRMYESNO('Do you want to close game/row anyway [Y/N]?',FLAG)
	    IF (FLAG.NE.1) RETURN
	ENDIF
	IF(STATUS.GE.GAMBFD) THEN
	    WRITE(6,200)
	    RETURN
	ENDIF

	EXT = 0
	RETURN

100	FORMAT(22X,'Today is not the closing day!')
200	FORMAT(22X,'Game/row already closed!')
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SUBROUTINE TO CHECK WHETHER GAME/ROW CAN BE RE-OPENED
C
C RETURN VALUES
C	0   OK TO OPEN
C	-1  NOT OK

C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	SUBROUTINE SET_OPEN(DATE, STATUS, EXT)
	IMPLICIT NONE

	INCLUDE 'INCLIB:GLOBAL.DEF  /NOLIST'
	INCLUDE 'INCLIB:CONCOM.DEF  /NOLIST'

	INTEGER*4   DATE, STATUS, EXT
	INTEGER*4   FLAG

	EXT = -1

	IF (DATE.LT.DAYCDC) THEN
	    WRITE(6,100)
	    CALL PRMYESNO('Do you want to open game/row anyway [Y/N]?',FLAG)
	    IF (FLAG.NE.1) RETURN
	ENDIF

	IF(STATUS.LT.GAMBFD) THEN
	    WRITE(6,200)
	    RETURN
	ENDIF

	EXT = 0
	RETURN

100	FORMAT(22X,'Draw date already reached!')
200	FORMAT(22X,'Row/game is not closed!')
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SUBROUTINE TO CHANGE CLOSING TIME FOR GAME/ROW
C
C RETURN VALUES
C	0   TIME CHANGED
C	-1  NO CHANGE MADE

C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	SUBROUTINE SET_TIME(TIME, DATE, EXT)
	IMPLICIT NONE

	INCLUDE 'INCLIB:SYSEXTRN.DEF  /NOLIST'

	INCLUDE 'INCLIB:GLOBAL.DEF  /NOLIST'
	INCLUDE 'INCLIB:CONCOM.DEF  /NOLIST'
	INCLUDE 'INCLIB:DATBUF.DEF  /NOLIST'

	INTEGER*4   TIME, DATE, EXT
	INTEGER*4   TMPTIME, CURTIME
	INTEGER*4   FLAG, OPT, I

	INTEGER*2   DBUF(LDATE_LEN)
	INTEGER*2   DBUF2(LDATE_LEN)

	OPT      = 1
	TMPTIME  = TIME
	DBUF(5)  = DATE
	DBUF2(5) = DAYCDC

	CALL LCDATE(DBUF)
	CALL LCDATE(DBUF2)

	EXT = -1

	IF (DATE.NE.DAYCDC) THEN
	    WRITE(6,100) (DBUF(I),I=7,13), (DBUF2(I),I=7,13)
	    CALL PRMNUM('Enter choise: ', OPT, 1, 2, FLAG)
	    IF (FLAG.NE.0) THEN
		RETURN
	    ENDIF
	ELSE
	    OPT = 2
	ENDIF

	CALL PRMTIM('Enter new time HH:MM:SS (E - no change)',TMPTIME,FLAG)

	IF (OPT.EQ.1) THEN
	    TMPTIME = TMPTIME + '40000000'X
	    WRITE(6,200) (DBUF(I),I=7,13), DISTIM(TMPTIME)
	ELSE
	    WRITE(6,200) (DBUF2(I),I=7,13), DISTIM(TMPTIME)
	    CALL ICLOCK(2,CURTIME)
	    IF (TMPTIME.LE.CURTIME) WRITE(6,300)
	ENDIF

	CALL PRMYESNO('Is this correct [Y/N]?', FLAG)
	IF (FLAG.EQ.1) THEN
	    TIME=TMPTIME
	    EXT = 0
	ENDIF

	RETURN
100	FORMAT(22X,'Today is not closing date!',/,
     *	        7X,'Do you want to 1 - modify the time for ESD: ',7A2,/,
     *	        7X,'            or 2 - close the game/row today:',7A2,/,
     *          7X,'            or E - do nothing?')
200	FORMAT(22X,'New closing time is: ',7A2,X,A8)
300	FORMAT(22X,'This is in the past - continuing will close the game/row immediately')
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SUROUTINE TO DISPLAY GENERAL GAME DATA FROM COMMON
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	SUBROUTINE DISP_GAME(LUN,GTYP,GIND)
	IMPLICIT NONE

	INCLUDE 'INCLIB:SYSEXTRN.DEF /NOLIST'

	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'

	INCLUDE 'INCLIB:LTOCOM.DEF'
	INCLUDE 'INCLIB:SPTCOM.DEF'
	INCLUDE 'INCLIB:TGLCOM.DEF'
	INCLUDE 'INCLIB:KIKCOM.DEF'
	INCLUDE 'INCLIB:DBLCOM.DEF'
	INCLUDE 'INCLIB:SCRCOM.DEF'
	INCLUDE 'INCLIB:WITCOM.DEF'
	INCLUDE 'INCLIB:TSLCOM.DEF'
	INCLUDE 'INCLIB:SSCCOM.DEF'
	INCLUDE 'INCLIB:BNGCOM.DEF'
	INCLUDE 'INCLIB:CPLCOM.DEF'
	INCLUDE 'INCLIB:STRCOM.DEF'
	INCLUDE 'INCLIB:TRPCOM.DEF'

C
C PARAMETERS
C
	INTEGER*4   LUN, GTYP, GIND

C
C VARIABLES
C
	INTEGER*2   BEGSAL(LDATE_LEN), ENDSAL(LDATE_LEN), DRWDAT(LDATE_LEN)
	INTEGER*4   DRWSTS, ENDTIM, DRAW
	INTEGER*4   EV_NAME(4)
	INTEGER*4   DESCR1(4), DESCR2(4), DESCR3(4)

	INTEGER*4   I
	LOGICAL*4   XTRAINFO

C
C CONSTANTS
C
	INTEGER*4   BLANK(4)
	DATA	    BLANK   /'    ','    ','    ','    '/

	CHARACTER*17 POLSTS(0:10)
	DATA POLSTS/'Not initialized  ','No drawing       ','Info entered     ',
     *              'Game open        ','End of game      ','Results entered  ',
     *              'Results verified ','Drawing completed','Results are final',
     *		    'Cancelled/Ref dis','Cancelled/Ref ena'/

C
C
C
	CALL FASTMOV(BLANK,EV_NAME,4)
	CALL FASTMOV(BLANK,DESCR1,4)
	CALL FASTMOV(BLANK,DESCR2,4)
	CALL FASTMOV(BLANK,DESCR3,4)
	XTRAINFO = .FALSE.
C
	IF (GTYP.EQ.TLTO) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMLTO) RETURN
	  BEGSAL(5) = LTOBSD(GIND)
	  ENDSAL(5) = LTOESD(GIND)
	  DRWDAT(5) = LTODAT(CURDRW,GIND)
	  DRWSTS    = LTOSTS(GIND)
	  DRAW      = LTODRW(GIND)
	  ENDTIM    = LTOTIM(GIND)
	ELSEIF (GTYP.EQ.TSPT) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMSPT) RETURN
	  BEGSAL(5) = SPTBSD(GIND)
	  ENDSAL(5) = SPTESD(GIND)
	  DRWDAT(5) = SPTDAT(CURDRW,GIND)
	  DRWSTS    = SPTSTS(GIND)
	  DRAW      = SPTDRW(GIND)
	  ENDTIM    = SPTTIM(GIND)
	  CALL FASTMOV(SPTEVN(1,GIND),EV_NAME,4)
	  CALL FASTMOV(SPTNMS(1,1,1,GIND),DESCR1(1),4)	! 1ST HOME TEAM
	  CALL FASTMOV(SPTNMS(1,1,2,GIND),DESCR2(1),4)	! 2ND HOME TEAM
	  CALL FASTMOV(SPTNMS(1,1,3,GIND),DESCR3(1),4)	! 3RD HOME TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TTGL) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMTGL) RETURN
	  BEGSAL(5) = TGLBSD(GIND)
	  ENDSAL(5) = TGLESD(GIND)
	  DRWDAT(5) = TGLDAT(CURDRW,GIND)
	  DRWSTS    = TGLSTS(GIND)
	  DRAW      = TGLDRW(GIND)
	  ENDTIM    = TGLTIM(GIND)
	  CALL FASTMOV(TGLEVN(1,GIND),EV_NAME,4)
	  CALL FASTMOV(TGLNMS(1,1,1,GIND),DESCR1(1),4)	! 1ST HOME TEAM
	  CALL FASTMOV(TGLNMS(1,1,2,GIND),DESCR2(1),4)	! 2ND HOME TEAM
	  CALL FASTMOV(TGLNMS(1,1,3,GIND),DESCR3(1),4)	! 3RD HOME TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TKIK) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMKIK) RETURN
	  BEGSAL(5) = KIKBSD(GIND)
	  ENDSAL(5) = KIKESD(GIND)
	  DRWDAT(5) = KIKDAT(CURDRW,GIND)
	  DRWSTS    = KIKSTS(GIND)
	  DRAW      = KIKDRW(GIND)
	  ENDTIM    = KIKTIM(GIND)
	ELSEIF (GTYP.EQ.TDBL) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMDBL) RETURN
	  BEGSAL(5) = DBLBSD(GIND)
	  ENDSAL(5) = DBLESD(GIND)
	  DRWDAT(5) = DBLDAT(GIND)
	  DRWSTS    = DBLSTS(GIND)
	  DRAW      = DBLDRW(GIND)
	  ENDTIM    = DBLTIM(GIND)
	  CALL FASTMOV(DBLENM(1,GIND),EV_NAME,4)
	  CALL FASTMOV(DBLNMS(1,1,GIND),DESCR1(1),4)	! 1ST TEAM
	  CALL FASTMOV(DBLNMS(1,2,GIND),DESCR2(1),4)	! 2ND TEAM
	  CALL FASTMOV(DBLNMS(1,3,GIND),DESCR3(1),4)	! 3RD TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TSCR) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMSCR) RETURN
	  BEGSAL(5) = SCRBSD(GIND)
	  ENDSAL(5) = SCRESD(GIND)
	  DRWDAT(5) = SCRDAT(GIND)
	  DRWSTS    = SCRSTS(GIND)
	  DRAW      = SCRDRW(GIND)
	  ENDTIM    = SCRTIM(GIND)
	  CALL FASTMOV(SCRNM1(1,GIND),DESCR1(1),4)	! HOME TEAM
	  CALL FASTMOV(SCRNM2(1,GIND),DESCR2(1),4)	! AWAY TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TWIT) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMWIT) RETURN
	  BEGSAL(5) = WITBSD(GIND)
	  ENDSAL(5) = WITESD(GIND)
	  DRWDAT(5) = WITDAT(GIND)
	  DRWSTS    = WITSTS(GIND)
	  DRAW      = WITDRW(GIND)
	  ENDTIM    = WITTIM(GIND)
	  CALL FASTMOV(WITENM(1,GIND),EV_NAME,4)
	  CALL FASTMOV(WITNMS(1,1,GIND),DESCR1(1),4)	! 1ST TEAM
	  CALL FASTMOV(WITNMS(1,2,GIND),DESCR2(1),4)	! 2ND TEAM
	  CALL FASTMOV(WITNMS(1,3,GIND),DESCR3(1),4)	! 3RD TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TTSL) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMTSL) RETURN
	  BEGSAL(5) = TSLBSD(GIND)
	  ENDSAL(5) = TSLESD(GIND)
	  DRWDAT(5) = 0
	  DO I=1, TSLRWS(GIND)
	    IF (TSLDAT(I,GIND).GT.DRWDAT(5)) THEN
		ENDTIM = 0
		IF (TSLTIM(I,GIND).GE.ENDTIM) THEN
		    DRWDAT(5) = TSLDAT(I,GIND)
		    ENDTIM = TSLTIM(I,GIND)
		ENDIF
	    ENDIF
	  ENDDO
	  DRWSTS    = TSLSTS(GIND)
	  DRAW      = TSLDRW(GIND)
	  CALL FASTMOV(TSLNMS(1,1,1,GIND),DESCR1(1),4)	! 1ST HOME TEAM
	  CALL FASTMOV(TSLNMS(1,1,2,GIND),DESCR2(1),4)	! 2ND HOME TEAM
	  CALL FASTMOV(TSLNMS(1,1,3,GIND),DESCR3(1),4)	! 3RD HOME TEAM
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TSSC) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMSSC) RETURN
	  BEGSAL(5) = SSCBSD(GIND)
	  ENDSAL(5) = SSCESD(GIND)
	  DRWDAT(5) = SSCDAT(GIND)
	  DRWSTS    = SSCSTS(GIND)
	  DRAW      = SSCDRW(GIND)
	  ENDTIM    = SSCTIM(GIND)
	  CALL FASTMOV(SSCMNM(1,GIND),EV_NAME,4)
	  CALL FASTMOV(SSCSNM(1,1,GIND),DESCR1(1),4)	! 1ST EVENT
	  CALL FASTMOV(SSCSNM(1,2,GIND),DESCR2(1),4)	! 2ND EVENT
	  CALL FASTMOV(SSCSNM(1,3,GIND),DESCR3(1),4)	! 3RD EVENT
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TBNG) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMBGO) RETURN
	  BEGSAL(5) = BNGBSD(GIND)
	  ENDSAL(5) = BNGESD(GIND)
	  DRWDAT(5) = BNGDAT(CURDRW,GIND)
	  DRWSTS    = BNGSTS(GIND)
	  DRAW      = BNGDRW(GIND)
	  ENDTIM    = BNGTIM(GIND)
	ELSEIF (GTYP.EQ.TCPL) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMCPL) RETURN
	  BEGSAL(5) = CPLBSD(GIND)
	  ENDSAL(5) = CPLESD(GIND)
	  DRWDAT(5) = CPLDAT(GIND)
	  DRWSTS    = CPLSTS(GIND)
	  DRAW      = CPLDRW(GIND)
	  ENDTIM    = CPLTIM(GIND)
	  CALL FASTMOV(CPLENM(1,1,GIND),DESCR1(1),4)	! 1ST EVENT
	  CALL FASTMOV(CPLENM(1,2,GIND),DESCR2(1),4)	! 2ND EVENT
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TSTR) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMSTR) RETURN
	  BEGSAL(5) = STRBSD(GIND)
	  ENDSAL(5) = STRESD(GIND)
	  DRWDAT(5) = STRDAT(GIND)
	  DRWSTS    = STRSTS(GIND)
	  DRAW      = STRDRW(GIND)
	  ENDTIM    = STRTIM(GIND)
	  CALL FASTMOV(STRENM(1,GIND),EV_NAME,4)
	  CALL FASTMOV(STRNMS(1,1,GIND),DESCR1(1),4)	! 1ST ROW
	  CALL FASTMOV(STRNMS(1,2,GIND),DESCR2(1),4)	! 2ND ROW
	  CALL FASTMOV(STRNMS(1,3,GIND),DESCR3(1),4)	! 3RD ROW
	  XTRAINFO = .TRUE.
	ELSEIF (GTYP.EQ.TTRP) THEN
	  IF (GIND.LT.1 .OR. GIND.GT.NUMTRP) RETURN
	  BEGSAL(5) = TRPBSD(GIND)
	  ENDSAL(5) = TRPESD(GIND)
	  DRWDAT(5) = TRPDAT(GIND)
	  DRWSTS    = TRPSTS(GIND)
	  DRAW      = TRPDRW(GIND)
	  ENDTIM    = TRPTIM(GIND)
	  CALL FASTMOV(TRPMNM(1,GIND),EV_NAME,4)
	  CALL FASTMOV(TRPENM(1,1,GIND),DESCR1(1),4)	! 1ST EVENT
	  CALL FASTMOV(TRPENM(1,2,GIND),DESCR2(1),4)	! 2ND EVENT
	  CALL FASTMOV(TRPENM(1,3,GIND),DESCR3(1),4)	! 3RD EVENT
	  XTRAINFO = .TRUE.
	ELSE
	    RETURN
	ENDIF
C
	CALL LCDATE(BEGSAL)
	CALL LCDATE(ENDSAL)
	CALL LCDATE(DRWDAT)
C
	WRITE(LUN,910) GTNAMES(GTYP),GIND,DRAW,(EV_NAME(I),I=1,4),POLSTS(DRWSTS)
	WRITE(LUN,920) (BEGSAL(I),I=7,13),(ENDSAL(I),I=7,13),DISTIM(ENDTIM),
     *		       (DRWDAT(I),I=7,13)
	IF (XTRAINFO) WRITE(LUN,930) 
     *			   (DESCR1(I),I=1,4),(DESCR2(I),I=1,4),(DESCR3(I),I=1,4)

	RETURN

910	FORMAT(22X,'Data for selected game:',/,
     *	       12X,'Game',3X,'Ind',X,'Draw',X,'Event Name',7X,'Status',/,
     *	       12X,   A8,  X,  I1, X,   I4, X, 4A4,         X, A11,/)
920	FORMAT(11X,' Start date',4X,' End date',6X,'End time',X,' Draw date',/,
     *	       11X,  7A2,         X,  7A2,       X, A8,       X,  7A2,/)
930	FORMAT(12X,'Additional data ... ... ... ... ... ... ... ... ... ...',/,
     *	       12X,4A4,X,4A4,X,4A4,/)
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C SUROUTINE TO DISPLAY LANGEN ROW DATA FROM COMMON
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
	SUBROUTINE DISP_TSLROW(LUN, GIND, ROW)
	IMPLICIT NONE

	INCLUDE 'INCLIB:SYSEXTRN.DEF /NOLIST'
	INCLUDE 'INCLIB:GLOBAL.DEF /NOLIST'
	INCLUDE 'INCLIB:DATBUF.DEF /NOLIST'
	INCLUDE 'INCLIB:TSLCOM.DEF /NOLIST'

	INTEGER*4   LUN, GIND, ROW
	INTEGER*2   ENDSAL(LDATE_LEN)
	INTEGER*4   I, J, STROW, ENROW

	CHARACTER*11 POLSTS(0:10)
	DATA POLSTS/'Not initial','No drawing ','Info entere','Game open  ',
     *		    'End of game','Results ent','Results ver','Winsel comp',
     *		    'Results fin','Can/Ref dis','Can/Ref ena'/


	IF (GIND.LT.1 .OR. GIND.GT.NUMTSL) RETURN
	IF (ROW.LT.0 .OR. GIND.GT.MAXSRW) RETURN

	IF (ROW.EQ.0) THEN
	    STROW = 1
	    ENROW   = TSLRWS(GIND)
	ELSE
	    STROW = ROW
	    ENROW = ROW
	ENDIF

	WRITE(LUN,100)

	DO I=STROW,ENROW
	    ENDSAL(5) = TSLDAT(I,GIND)
	    CALL LCDATE(ENDSAL)

	    IF (TSLSTA(I,GIND).GT.GAMNUL .AND. TSLSTA(I,GIND).LT.GAMEN1)
     *	      WRITE(LUN,200)I,
     *			    (TSLNMS(J,1,I,GIND),J=1,3),
     *			    (TSLNMS(J,2,I,GIND),J=1,3),
     *			    DFLOAT(TSLODS(1,I,GIND))/100.0D0,
     *			    DFLOAT(TSLODS(3,I,GIND))/100.0D0,
     *			    DFLOAT(TSLODS(2,I,GIND))/100.0D0,
     *			    (ENDSAL(J),J=7,13),
     *			    DISTIM(TSLTIM(I,GIND)),
     *			    POLSTS(TSLSTA(I,GIND))
	ENDDO

100	FORMAT(X,'Rw',X,'HomeTeam     - Visitor',7X,'1',4X,'X',4X,'2',3X,
     *	      'Closing date and time',2X,'Status')
200	FORMAT(X,I2.2,X,3A4,' - ',3A4,F5.2,F5.2,F5.2,7A2,X,A8,X,A11)
	END
