C
C SUBROUTINE X2RCVFE
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2RCVFE.FOV                                  $
C  $Date::   21 May 1996 20:00:34                                         $
C  $Revision::   1.3                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C ** Source - x2rcvbuf.for **
C
C V08 20-MAY-96 wsm Changed error connect id to be "00FFFFFF".
C V07 16-MAR-96 wsm Check flags after determining connection type.
C V06 08-DEC-94 SCD Don't assign a dummy station to a GVT whose GVT ID
c		    is all F's
C V05 24-OCT-94 SCD If we are installing GVTs, then zero out EVSN for dummy
C		    stations which are no longer in use.  This prevents us
C		    from finding the EVSN which no longer maps to a station.
C V04 29-JUL-94 SCD Add GVT configuration changes
C V03 18-JUL-94 WS MULTINETWORK CHANGES
C V02  7-MAR-94 JWE Add Finland changes..
C
C++++++++++++++++++++++++++++++++++++++++++++++
C     X2RCVFE                 ;PROCESS TRANSPORT DATA MESSAGE
C
C     X2RCVFE(BUFFER,MESSAGE,MESSAGE_LEN,TERMINAL_NO,STATION_NO,
C              CURRENT_POINTER,BUF_SSAP,DEST_LAYER,HOST_ID,STATUS)
C     IN:
C        BUFFER - BUFFER WITH XPORT LAYER + DATA
C        CURRENT_POINTER - CURRENT POINTER IN BUFFER
C     OUT:
C        MESSAGE- TERMINAL MESSAGE (I*2)
C        MESSAGE_LEN - MESSAGE LENGTH IN BYTES
C        TERMINAL_NO - TERMINAL NUMBER
C        STATION_NO  - STATION  NUMBER
C        DEST_LAYER  - HIGHEST DESTINATION LAYER PROCESSED
C        CURRENT_POINTER - CURRENT POINTER
C        HOST_ID     - HOST_ID, SET ONLY IN DELACK AND DELERR
C        STATUS  - STATUS
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2RCVFE(BUFFER,MESSAGE,MESSAGE_LEN,TERMINAL_NO,
     *	 STATION_NO,CURRENT_POINTER,BUF_SSAP,DEST_LAYER,HOST_ID,STATUS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2PTLMES.DEF'
	INCLUDE 'INCLIB:X2FEMES.DEF'
	INCLUDE 'INCLIB:X2STMES.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:LANCOM.DEF'
C
	BYTE      BUFFER(0:*)     !ELIMINATE ILBYTE AND ISBYTE
	INTEGER*4 STATION_ADR(X2X_ADRESS_MAXLEN)
	INTEGER*4 STATION_ALT(X2X_ADRESS_MAXLEN)
	INTEGER*2 MESSAGE(*)
	INTEGER*4 MESSAGE_LEN,TERMINAL_NO,CURRENT_POINTER
	INTEGER*4 STATUS, CURRENT_SAP, ST, FE_ID, STATION_STATE, OFF1
	INTEGER*4 SRCSTAT, LAYER, OFF, STATION_LEN, LEN, ADR_LEN
	INTEGER*4 CONN_ID, CONN_TYPE, FLAGS, HEAD_LEN, MESTYP, I
	INTEGER*4 PROTOCOL, CHUNK_LEN, UNIT_LEN
	INTEGER*4 HOST_ID, DEST_LAYER, BUF_SSAP, STATION_NO
        INTEGER*4 LEN2, ALT_LEN
        INTEGER*4 EVSNADR, EVSNLEN, EVSNNUM(X2X_EVSN_MAXLEN)
	INTEGER*4 SAP_PORT, PVC_CIRCUIT, LOCAL_PORT, NET_PORT
        INTEGER*4 VSPNUM/0/
        INTEGER*4 VSPADDR, AAPADDR, AAPLEN
	INTEGER*4   TERCOD
	INTEGER*4   OLD_SAP
	INTEGER*4   OLD_CONN_ID
	INTEGER*4 STN_TYPE				!V04
        LOGICAL*4 VSPON, AAPON
        LOGICAL*4 EVSPON
C
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	    TYPE *,'X2RCVFE ',CURRENT_POINTER,BUFFER(1)
	DEST_LAYER=DEST_LAYER+X2DEST_FE
C
C     PROCESS FRONT END PART FIRST
C
	CALL MOV2TOI4(UNIT_LEN,BUFFER,X2FEMES_MESLEN-1)
	CHUNK_LEN=((UNIT_LEN+1)/2)*2     !MAKE IT EVEN
	CURRENT_POINTER=CURRENT_POINTER+CHUNK_LEN
	PROTOCOL = ZEXT (BUFFER(X2FEMES_PROTID-1))
	IF (PROTOCOL.NE.X2FEMES_PROTID_X2X .OR.
     *	    CURRENT_POINTER.GE.LANBLEN*4) THEN
	   CURRENT_POINTER=-1
	   STATUS=X2ERR_FATAL+X2ERR_FE
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	     TYPE *,'RET RCVFE ',DEST_LAYER,PROTOCOL,X2X_PTLMES(STATUS)
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_FE).NE.0) THEN
	      TYPE *,'Invalid protocol id, fe message '
	      TYPE 9001,(BUFFER(I),I=1,50)
9001	      FORMAT(10(1X,Z4))
	   ENDIF
	   RETURN
	ENDIF
C
C
	MESTYP = ZEXT (BUFFER(X2FEMES_MESTYP-1))
	VSPON=.FALSE.
	EVSNLEN=0
	EVSNNUM(1)=0
	EVSNNUM(2)=0
	STATION_ADR(1)=0
	STATION_ADR(2)=0
	STATION_ALT(1)=0
	STATION_ALT(2)=0
	ADR_LEN=0

	IF (MESTYP.EQ.X2FEMES_MESTYP_UP) THEN                !UPLINE MESSAGE
           AAPON = .FALSE.
           EVSPON = .FALSE.
	   HEAD_LEN = ZEXT (BUFFER(X2FEMES_HEADLEN-1))
	   FLAGS = ZEXT (BUFFER(X2FEMES_FLAGS-1))            !FLAGS, NOT USED
	   CONN_TYPE = ZEXT (BUFFER(X2FEMES_CONNTYP-1))      !CONNECTION
           CONN_TYPE = IAND(CONN_TYPE,'7F'X)
C
C "Fix" X.21 messages
C
	    IF(CONN_TYPE .LE. 0)CONN_TYPE = X2XSCT_X21SWC
	    IF(CONN_TYPE .EQ. X2XSCT_X21SWC) FLAGS = 0
C
           IF(IAND(FLAGS,X2FEMES_FLAGS_VS) .NE. 0) VSPON = .TRUE.
           IF(IAND(FLAGS,X2FEMES_FLAGS_AA) .NE. 0) AAPON = .TRUE.
           IF(IAND(FLAGS,X2FEMES_FLAGS_EVS) .NE. 0)EVSPON = .TRUE.
C
	   CALL MOV4TOI4(CONN_ID,BUFFER,X2FEMES_CONN_ID-1)
	   CONN_ID=IAND(CONN_ID,'FFFFFF00'X)
	   STATION_NO=-1
C
C 	   DECODE FE CONNECT ID BASED UPON CONNECTION TYPE
C
           IF (CONN_TYPE .EQ. X2XSCT_ASYPVC.OR.       ! ASYNC PVC
     *         CONN_TYPE .EQ. X2XSCT_USAT_PVC) THEN   ! USAT  PVC
              SAP_PORT=ISHFT(CONN_ID,-24)
              PVC_CIRCUIT= ISHFT(IAND(CONN_ID,'00FFFF00'X),-8)
              IF (SAP_PORT.LT.1.OR.SAP_PORT.GT.X2X_SAP_PORTS.OR.
     *            PVC_CIRCUIT.LT.0.OR.
     *            CONN_TYPE .EQ. X2XSCT_ASYPVC.AND.
     *                       PVC_CIRCUIT.GT.X2X_MAXPVC_ASSIGN.OR.
     *            CONN_TYPE .EQ. X2XSCT_USAT_PVC.AND.
     *                       PVC_CIRCUIT.GT.X2X_MAXPVC_CKTS) THEN
                   STATUS=X2ERR_FATAL+X2ERR_FE
                   IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_FE).NE.0) THEN
                       TYPE *,'Invalid FE Connect ID'
                       TYPE 9001,(BUFFER(I),I=1,50)
                    ENDIF
                    CURRENT_POINTER=-1
                    IF(IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *                TYPE *,'RETURN X2RCVFE ,BAD FE CONNECT ID ',
     *                        SAP_PORT, PVC_CIRCUIT
	         RETURN
	      ENDIF
	      LOCAL_PORT = X2XE_LOCAL_PORT(SAP_PORT,BUF_SSAP)
	      IF(LOCAL_PORT.LE.0.OR.LOCAL_PORT.GT.X2X_LOCAL_PORTS) THEN
                 NET_PORT = 0
	      ELSE
	         NET_PORT = X2XPL_LOCAL_TO_NETWORK(LOCAL_PORT)
	      ENDIF
C
              IF(NET_PORT.LE.0.OR.NET_PORT.GT.X2X_NETWORK_PORTS) THEN
                 STATION_NO = 0
              ELSEIF (CONN_TYPE .EQ. X2XSCT_USAT_PVC) THEN
                 I   = X2XPN_PVC_INDEX(NET_PORT)
                 STATION_NO= X2XPN_PVC_CKTS_TO_STN(PVC_CIRCUIT,I)
              ELSE
                 STATION_NO=X2XPN_PVC_TO_STATION(NET_PORT,PVC_CIRCUIT)
              ENDIF
	      IF (STATION_NO.LE.0) THEN
	           STATUS=X2ERR_BADADR
	           LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
		    CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	           IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	            TYPE *,'RETURN X2RCVFE 1: ',DEST_LAYER,STATION_NO,
     *	            TERMINAL_NO,MESSAGE_LEN,MESSAGE(1),X2X_PTLMES(STATUS)
	           RETURN
	      ENDIF
	   ENDIF
C
	   ADR_LEN = ZEXT (BUFFER(X2FEMES_ADRLEN-1))
	   IF (ADR_LEN.GT.X2X_ADRESS_MAXLEN*8) THEN!ADR LENGTH LOONG
	         STATUS=X2ERR_FATAL+X2ERR_FE
	         IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_FE).NE.0) THEN
	            TYPE *,'Invalid length'
	            TYPE 9001,(BUFFER(I),I=1,50)
	         ENDIF
	         CURRENT_POINTER=-1
	         IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	          TYPE *,'XRETURN X2RCVFE ,BAD ADR LEN ',ADR_LEN
	         RETURN
	   ENDIF
	   LEN=(ADR_LEN+1)/2
C****	   DO 10 I = 1, X2X_ADRESS_MAXLEN
C****	    STATION_ADR(I)=0
C****10	   CONTINUE
           IF(LEN.GT.0) THEN
              CALL FASTBYT(BUFFER,X2FEMES_ADR,STATION_ADR,1,LEN)
              CALL X2QSHFT(STATION_ADR,-(64-ADR_LEN*4))
           ENDIF    
C
C
C        IF VERIFICATION SEQ. BIT IS SET DETERMINE WHERE THE ADDRESSES ARE
C
           ALT_LEN = 0
           AAPADDR = 0
           VSPADDR = 0
           EVSNADR = 0
           EVSNLEN = 0
           IF(VSPON) THEN
              VSPADDR = X2FEMES_ADR + LEN
              CALL MOV2TOI4(VSPNUM,BUFFER,VSPADDR-1)
              IF(AAPON) THEN
                AAPLEN  = VSPADDR + X2FEMES_VER_LEN
                AAPADDR = AAPLEN + X2FEMES_ALT_ADDLEN
                CALL ILBYTE(ALT_LEN,BUFFER,AAPLEN-1)
              ENDIF
           ELSEIF(AAPON) THEN
              AAPLEN = X2FEMES_ADR + LEN
              AAPADDR = AAPLEN + X2FEMES_ALT_ADDLEN
              CALL ILBYTE(ALT_LEN,BUFFER,AAPLEN-1)
           ENDIF
C
C..IF EXTENDED VERFIFCATION SEQ. BIT IS SET THEN GET LENGTH AND EXTENDED
C  VERIFICATION SEQUENCE NUMBER.
C
           EVSNNUM(1)=0
           EVSNNUM(2)=0
           IF(EVSPON) THEN
              IF(AAPON) THEN
                 EVSNADR = AAPADDR + ALT_LEN           !LOC. OF EVSN LENGTH
              ELSE IF(VSPON) THEN
                 EVSNADR = VSPADDR+X2FEMES_VER_LEN     !LOC. OF EVSN LENGTH
              ELSE
                 EVSNADR = X2FEMES_ADR + LEN           !LOC. OF EVSN LENGTH
              ENDIF
              CALL ILBYTE(EVSNLEN,BUFFER,EVSNADR-1)    !EVS LENGTH
              CALL FASTBYT(BUFFER,EVSNADR+X2FEMES_EVS_LEN,EVSNNUM,1,
     *                     EVSNLEN)                    !EVS NUMBER
              CALL X2QSHFT(EVSNNUM,-(64-EVSNLEN*4*2))

           ENDIF
C
C     PROCESS STATION MESSAGE NOW
C
	   STATION_LEN=UNIT_LEN-HEAD_LEN
	   X2XE_TOT_RCV_CNT(BUF_SSAP)=X2XE_TOT_RCV_CNT(BUF_SSAP)+1
	   CALL X2RCVSTN(BUFFER((((HEAD_LEN+2)/2)*2)-2),MESSAGE,
     *        TERMINAL_NO,STATION_NO,CONN_TYPE,MESSAGE_LEN,
     *        DEST_LAYER,BUF_SSAP,STATION_LEN,STATUS)

C	START OF V04 CHANGE BLOCK - USE STATION TYPE IN UPLINE HELP OR
C				    DEFAULT CONFIG MESSAGES 
	   IF (STATUS.EQ.X2ERR_RESET .OR.
     *         STATUS.EQ.X2ERR_DEF_CONFREQ) THEN	!SAVE STN TYPE IF UPLINE HELP
                CALL ILBYTE(STN_TYPE,BUFFER((((HEAD_LEN+2)/2)*2)-2),
     *			    X2STMES_STYPE-1)
	   ENDIF
	   IF ( (IAND(X2X_DEBUG,256).EQ.256) .AND. (STATUS .NE. 0))
     * 	     	TYPE *,'STATION TYPE FROM X2RCVFE ',STN_TYPE,
     *			' X2RCVSTN STATUS = ',STATUS
C	END OF V04 CHANGE BLOCK
C
	   IF (STATION_NO.GT.0) THEN
            IF(CONN_TYPE.NE.X2XSCT_ASYPVC  .AND.
     *         CONN_TYPE.NE.X2XSCT_X28PAD  .AND.
     *         CONN_TYPE.NE.X2XSCT_USAT_PVC.AND.
     *         CONN_TYPE.NE.X2XSCT_GTECH_DIAL) THEN
	      DO 100, OFF=1,X2X_ADRESS_MAXLEN
	        IF (X2XS_ADRESS(OFF,STATION_NO).NE.STATION_ADR(OFF))THEN
	           DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
C****		   X2X_BAD_ADR_CNT=X2X_BAD_ADR_CNT+1
C****	           STATUS=X2ERR_BADADR
		   STATUS=X2ERR_INV_STN_PROTOCOL
	           LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
		    CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	           IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	            TYPE *,'RETURN X2RCVFE 1: ',DEST_LAYER,STATION_NO,
     *	            TERMINAL_NO,MESSAGE_LEN,MESSAGE(1),X2X_PTLMES(STATUS)
	           RETURN
	        ENDIF
100	      CONTINUE
            ENDIF
C
C IF GTECH DIAL OR X28 PAD
C AND EXTENDED VERIFICATION SEQUENCE NUMBER IS PRESENT,
C BINARY SEARCH THE SORTED EXTENDED VERIFICATION SEQUENCE NUMBER TABLE
C TO OBTAIN THE STATION NUMBER. IF IT IS NOT FOUND OR THE TABLE IS LOCKED,
C SEQUENTIALY SEARCH FOR IT.
C
           ELSEIF((CONN_TYPE.EQ.X2XSCT_GTECH_DIAL  .OR.
     *             CONN_TYPE.EQ.X2XSCT_X28PAD)    .AND.
     *            STATION_NO.EQ.0.AND.EVSPON) THEN
              IF ( (X2X_GVT_CFG_ENABLE .EQ. X2X_GVT_CFG_ENABLE_ON) .AND.  !V05
     *		   (STATUS.EQ.X2ERR_RESET .OR.				  !V05
     *              STATUS.EQ.X2ERR_DEF_CONFREQ) .AND.			  !V05
     *		   (STN_TYPE .EQ. X2STMES_STYPE_GVT) )			  !V05
     *		    CALL X2DUMCLR (EVSNNUM,CONN_TYPE,SRCSTAT)		  !V05
              CALL X2BINVSN(EVSNLEN*2,EVSNNUM,STATION_NO,SRCSTAT)
              IF(SRCSTAT.EQ.0) THEN
                IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *            TYPE *,'STN VERIFICATION # FOUND IN EVSNSRC ',
     *                   STATION_NO, EVSNNUM
                IF (STATUS.EQ.X2ERR_RESET .OR.
     *              STATUS.EQ.X2ERR_DEF_CONFREQ)
     *            CALL X2MSGSTN(MESSAGE,STATION_NO)
                GOTO 130
              ELSE
                IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *            TYPE *,'STN VERIFICATION # NOT FOUND IN EVSSRC ',
     *                    EVSNNUM
                DO 120, OFF=1,X2X_STATIONS
                  IF(EVSNLEN*2.NE.X2XS_EVSN_LEN(OFF)) GOTO 120
                  IF(X2XS_EVSN(1,OFF).EQ.0 .AND.
     *               X2XS_EVSN(2,OFF).EQ.0) GOTO 120
                  DO 110, OFF1=1,X2X_EVSN_MAXLEN
                    IF(X2XS_EVSN(OFF1,OFF).NE.EVSNNUM(OFF1))GOTO 120
110               CONTINUE
                  STATION_NO=OFF
                  IF(STATUS.EQ.X2ERR_RESET .OR.
     *               STATUS.EQ.X2ERR_DEF_CONFREQ)
     *              CALL X2MSGSTN(MESSAGE,OFF)
		  X2X_BIN_SVN_SEARCH_FAIL=X2X_BIN_SVN_SEARCH_FAIL+1
		  IF (MOD(X2X_BIN_SVN_SEARCH_FAIL,100).EQ.0) 
     *		      CALL OPS('station not found in binsvn ',
     *			    X2X_BIN_SVN_SEARCH_FAIL,STATION_NO)
                  GOTO 130
120             CONTINUE
		X2X_BAD_SVN_COUNT=X2X_BAD_SVN_COUNT+1
              ENDIF

C	START OF V04 CHANGE BLOCK
C	IF WE HAVE NOT FOUND THE RECEIVED EVSN YET, THEN THE LAST CHANCE
C	IS THAT WE ARE CONFIGURING A NEW TERMINAL (GVT)

	
              IF ( (X2X_GVT_CFG_ENABLE .EQ. X2X_GVT_CFG_ENABLE_ON) .AND.
     *		   (STATUS.EQ.X2ERR_RESET .OR.
     *              STATUS.EQ.X2ERR_DEF_CONFREQ) .AND.
     *		   (STN_TYPE .EQ. X2STMES_STYPE_GVT) ) THEN
		    IF (EVSNNUM(1) .EQ. -1 .AND. EVSNNUM(2) .EQ. -1) THEN  !V06
     		       CALL OPS(					   !V06
     *			    'Attempting to install GVT with invalid GVT ID ', !V06
     *			    EVSNNUM,STATION_NO)				   !V06
		    ELSE						   !V06
		       CALL X2DUMSTN(EVSNNUM,CONN_TYPE,STATION_NO,
     *				     TERMINAL_NO,STATUS)
	               IF (IAND(X2X_DEBUG,256).EQ.256)
     *            	       TYPE *,'ASSIGNING STN', STATION_NO, 
     *			      'WITH STATUS FROM X2DUMSTN ',STATUS,
     *			     ' EVSN = ', EVSNNUM(1),EVSNNUM(2)
		       IF (STATUS .EQ. 0) THEN	!DUMMY STN # ASSIGNED
			   GOTO 130
		       ELSE		!COULD NOT ASSIGN DUMMY STN #

D             	           TYPE *,'STATUS FROM X2DUMSTN ',STATUS
              		   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *        		   TYPE *,'STATUS FROM X2DUMSTN ',STATUS
			   DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
			   STATUS=X2ERR_BADADR
			   LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
			   CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *				      UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN)
              		   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *        		   TYPE *,'RETURN X2RCVFE 8: ',X2X_PTLMES(STATUS),
     *						       DEST_LAYER
              	  	   RETURN
		       ENDIF				!ON STATUS CHECK
		    ENDIF				!ON EVSNNUM CHECK - V06
	      ENDIF					!ON CFG CHECK
C
C	END OF V04 CHANGE BLOCK 
C
              DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
              STATUS=X2ERR_BADADR
              LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
	      IF (((CONN_TYPE.EQ.X2XSCT_GTECH_DIAL  .OR.
     *             CONN_TYPE.EQ.X2XSCT_X28PAD)    .AND.
     *            STATION_NO.EQ.0.AND.EVSPON) ) THEN
		CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	      ELSE
		X2X_BAD_ADR_CNT=X2X_BAD_ADR_CNT+1
		CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	      ENDIF
              IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *        TYPE *,'RETURN X2RCVFE 2: ',X2X_PTLMES(STATUS),DEST_LAYER
              RETURN
C
130           CONTINUE
C
C BINARY SEARCH THE SORTED ADDRESS TABLE TO OBTAIN THE STATION
C NUMBER.  IF IT IS NOT FOUND, OR THE COMMON IS LOCKED,
C SEQUENTIALY SEARCH FOR IT.
C
           ELSEIF (CONN_TYPE.NE.X2XSCT_ASYPVC      .AND.
     *             CONN_TYPE.NE.X2XSCT_USAT_PVC    .AND.
     *              CONN_TYPE.NE.X2XSCT_GTECH_DIAL .AND.
     *              CONN_TYPE.NE.X2XSCT_X28PAD     .AND.
     *              STATION_NO.EQ.0) THEN
C                                              ;FIND STATION FROM THE TAB
	      CALL X2BINSRC(ADR_LEN,STATION_ADR,STATION_NO,SRCSTAT)
	      IF(SRCSTAT.EQ.0) THEN
	        IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	          TYPE *,'STN ADDR FOUND IN BIN SRC ',STATION_NO,
     *	                 STATION_ADR
	        IF (STATUS.EQ.X2ERR_RESET .OR.
     *	            STATUS.EQ.X2ERR_DEF_CONFREQ)
     *	          CALL X2MSGSTN(MESSAGE,STATION_NO)
	        GOTO 160
	      ELSE
C****	        IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
	        DO 150, OFF=1,X2X_STATIONS
	          IF(ADR_LEN.NE.X2XS_ADRESS_LEN(OFF)) GOTO 150
	          IF(X2XS_ADRESS(1,OFF).EQ.0 .AND.
     *	             X2XS_ADRESS(2,OFF).EQ.0) GOTO 150
	          DO 140, OFF1=1,X2X_ADRESS_MAXLEN
                  IF(X2XS_ADRESS(OFF1,OFF).NE.STATION_ADR(OFF1))GOTO150
140	          CONTINUE
	          STATION_NO=OFF
		  IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_ADR).NE.0)
     *		      TYPE 10000,'STN ADDR NOT FOUND IN BIN SRC ',
     *			 STATION_ADR,SRCSTAT,' station no ',STATION_NO
10000		  FORMAT(1X,A,2(1X,Z8),' stat ',I5,A,I5)
	          IF (STATUS.EQ.X2ERR_RESET .OR.
     *	              STATUS.EQ.X2ERR_DEF_CONFREQ)
     *	            CALL X2MSGSTN(MESSAGE,OFF)
		  X2X_BIN_SEARCH_FAIL=X2X_BIN_SEARCH_FAIL+1
		  IF (MOD(X2X_BIN_SEARCH_FAIL,100).EQ.0) 
     *		      CALL OPS('station not found in bintab ',
     *			    X2X_BIN_SEARCH_FAIL,STATION_NO)
	          GOTO 160
150	        CONTINUE
                IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_ADR).NE.0)
     *          TYPE 10000,'STN ADDR NOT FOUND IN BIN SRC ',STATION_ADR,
     *		SRCSTAT
	      ENDIF
C
	      X2X_BAD_ADR_CNT=X2X_BAD_ADR_CNT+1
	      DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
	      STATUS=X2ERR_BADADR
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVFE 3: ',X2X_PTLMES(STATUS),DEST_LAYER
	      RETURN
C
160	      CONTINUE
	   ELSE
	      DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
C****	      STATUS=X2ERR_BADADR
C****	      X2X_BAD_ADR_CNT=X2X_BAD_ADR_CNT+1
	      STATUS=X2ERR_INV_STN_PROTOCOL
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	       IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVFE 4: ',X2X_PTLMES(STATUS),DEST_LAYER
	      RETURN
	   ENDIF
C
C        IF VERIFICATION SEQ. BIT IS SET TEST FOR A VALID SEQUENCE NUMBER
C        THIS CAN ONLY BE DONE ONCE THE STATION NUMBER IS DETERMINED
C        IF VSP IS ON WE ALWAYS WANT TO SEND TO X2XPRO
C
           IF ((VSPON) .AND. (X2XS_VSP(STATION_NO) .NE. 0)) THEN
              IF (X2XS_VSP(STATION_NO).NE. VSPNUM) THEN
                 STATUS=X2ERR_BADVSP
                 DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
                 LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
                 CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                      UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
                 IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *               TYPE *,'RETURN X2RCVFE 5: ',DEST_LAYER,STATION_NO,
     *             TERMINAL_NO,MESSAGE_LEN,MESSAGE(1),X2X_PTLMES(STATUS)
                 RETURN
              ENDIF
              CALL X2LOGVS(STATION_NO,TERMINAL_NO,BUFFER,
     *          DEST_LAYER,UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN)
            ENDIF
C
            IF(AAPON) THEN
             CALL ILBYTE(ALT_LEN,BUFFER,AAPLEN-1)
             IF (ALT_LEN.GT.X2X_ADRESS_MAXLEN*8) THEN!ADR LENGTH LOONG
                   STATUS=X2ERR_FATAL+X2ERR_FE
                   IF (IAND(X2X_DEBUG,X2X_DEBUG_BAD_FE).NE.0) THEN
                      TYPE *,'Invalid length'
                      TYPE 9001,(BUFFER(I),I=1,50)
                   ENDIF
                   CURRENT_POINTER=-1
                   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *              TYPE *,'XRETURN X2RCVFE 6: ,BAD ADR LEN ',ALT_LEN
                   RETURN
             ENDIF
             LEN2=(ALT_LEN+1)/2
             STATION_ALT(1)=0
             STATION_ALT(2)=0
             CALL X2FASTBYT(BUFFER,AAPADDR,STATION_ALT,1,LEN2)
           ENDIF
C
	   CALL ILBYTE(OLD_SAP,IX2XS_SAP,STATION_NO-1)
	   IF (OLD_SAP.NE.0. AND. OLD_SAP.NE.BUF_SSAP) THEN
	      OLD_CONN_ID=X2XS_CONN_ID(STATION_NO)
	      CALL X2CLRCON(STATION_NO,OLD_CONN_ID,OLD_SAP)
	   ENDIF
	   BX2XS_SAP(STATION_NO)=BUF_SSAP
	   X2XS_TIME(STATION_NO)=X2X_SYSTIM
	   X2XS_CNT_ACTIVE(STATION_NO)=X2XS_CNT_ACTIVE(STATION_NO)+1
	   X2XS_CNT_ACTIVE_LAST(STATION_NO,X2XS_STATS_PNT)=
     *	             X2XS_CNT_ACTIVE_LAST(STATION_NO,X2XS_STATS_PNT)+1
C
C          The connection type received from the Front End does not
C          match that which the host currently has. This may logically
C          happen for a gsat connection which has gone from dial backup
C          back to GSAT. The conn_id is now reset to the value received by
C          the front end regardless of connection type. An async station
C          is assigned a permanent connection id. This should never
C          change. If a connect id is recieved from a station that is
C          different from the one assigned there is a better than even
C          chance that the station is not defined. 
C
           IF(X2XS_CONN_ID(STATION_NO).NE.CONN_ID) THEN
             IF(CONN_TYPE.EQ.X2XSCT_ASYPVC) THEN
               CALL OPS('CONNECT ID MISMATCH FOR STATION',
     *                   STATION_NO,CONN_TYPE)
C****               TYPE *,'STATION ',STATION_NO,' NOT CONFIGURED '
C****               TYPE *,X2XS_CONN_ID(STATION_NO),' ',CONN_ID
C
C            Gsat connection restored from dial mode
C
             ELSE IF(CONN_TYPE.EQ.X2XSCT_USAT_PVC) THEN
               CALL OPS('USAT CONNECTION RESTORED FOR STATION',
     *                  STATION_NO,CONN_TYPE)
C****               TYPE *,X2XS_CONN_ID(STATION_NO),' ',CONN_ID
C
C            Gsat connection now in dial backup mode
C
             ELSE IF(CONN_TYPE.EQ.X2XSCT_GTECH_DIAL .AND.
     *            BX2XS_ORIG_TYPE(STATION_NO)
     *                              .EQ.X2XSCT_USAT_PVC) THEN
               CALL OPS('USAT STATION CONNECTION CHANGED TO GTECH DIAL'
     *                  //CHAR(7)//CHAR(7), STATION_NO,CONN_TYPE)
C****               TYPE *,X2XS_CONN_ID(STATION_NO),' ',CONN_ID
	     ELSE IF (CONN_TYPE.EQ.X2XSCT_X28PAD .AND. 
     *                BX2XS_ORIG_TYPE(STATION_NO)
     *                             .EQ. X2XSCT_USAT_PVC) THEN
	      CALL OPS('USAT STATION CONNECTION CHANGED TO X.28 DIAL'
     *                 //CHAR(7)//CHAR(7),STATION_NO,CONN_TYPE)
C****               TYPE *,X2XS_CONN_ID(STATION_NO),' ',CONN_ID
             ENDIF
           ENDIF
C
           X2XS_CONN_ID(STATION_NO) = CONN_ID
C
	   IF (TERMINAL_NO.GT.0) X2XT_CONN_ID(TERMINAL_NO)=CONN_ID
	   BX2XS_CONN_TYPE(STATION_NO)=CONN_TYPE
C
	   IF (X2X_TRACE_STATION.EQ.STATION_NO.AND.STATION_NO.GT.0.OR.
     *	       X2X_TRACE_STATION.EQ.-1.AND.STATION_NO.GT.0)
     *	      CALL X2TRCSTN(BUFFER((((HEAD_LEN+2)/2)*2)-2))
C
C          ONLY SET IF IN NIGHT GAME MODE
C
           IF(STATUS.EQ.X2ERR_NAAS) THEN
              DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
              LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
              CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                   UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
              IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *           TYPE *,'NAAS MESSAGE FE',X2X_PTLMES(STATUS),DEST_LAYER
              RETURN
           ENDIF
C
C          CHECK IF STATION # IS NOT DISABLED
C
	   STATION_STATE=ZEXT(BX2XS_STATE(STATION_NO))		!V03
	   IF (STATION_STATE.EQ.X2XS_DISABLED) THEN
	      IF (IAND(DEST_LAYER,X2DEST_RETURN).NE.0) THEN
	         DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE+X2DEST_STATION
	         STATUS=X2ERR_STTN_INV_TYPE
	         LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	         CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,
     *	              BUFFER((((HEAD_LEN+2)/2)*2)-2),
     *	              STATION_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	         IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	         TYPE *,'RETURN X2RCVFE 7:',X2X_PTLMES(STATUS),DEST_LAYER
	         RETURN
	      ENDIF
	   ELSE
	      BX2XS_STATE(STATION_NO)=X2XS_INIT
	   ENDIF
	ELSEIF (MESTYP.EQ.X2FEMES_MESTYP_CMD) THEN !STATS/COMMAND
C
C           PREPARE MESSAGE IN THE BUFFER
C
C     IF THAT IS CONNECTION STATUS MESSAGE, UPDATE CONNECTION
C     STATUS
C
	   CALL X2CHKCON(BUFFER,STATION_NO,FE_ID,ST)
C V02
C        EXTRACT 'Connection Status' BIT FLAG
         CALL ILBYTE(TERCOD,BUFFER,X2FEMES_CONSTS_TERCOD-1) !TERMINATION
         TERCOD=IAND(TERCOD,X2FEMES_CONSTS_TERCOD_UP)
C
         IF (IAND(X2X_DEBUG,X2X_DEBUG_X2XREL).NE.0) THEN
           TYPE *,'X2RCVFE chkcon: stn, SAP, conn_id, sts',
     *       STATION_NO, BUF_SSAP, FE_ID, ST
         ENDIF
C End V02
	   IF (ST.EQ.0) THEN     !IF THAT IS CONNECTION UP MESSAGE
C V02
            CALL ILBYTE(OLD_SAP,IX2XS_SAP,STATION_NO-1)
            IF (OLD_SAP.NE.0. AND. OLD_SAP.NE.BUF_SSAP) THEN
               OLD_CONN_ID=X2XS_CONN_ID(STATION_NO)
               CALL X2CLRCON(STATION_NO,OLD_CONN_ID,OLD_SAP)
            ENDIF
C END V02
	    BX2XS_SAP(STATION_NO)=BUF_SSAP
            X2XS_CONN_ID(STATION_NO)=FE_ID                !V02
	   ELSEIF (ST.EQ.1) THEN !IF THAT IS CONNECTION DOWN MESSAGE
	      CALL ILBYTE(CURRENT_SAP,IX2XS_SAP,STATION_NO-1)
	      IF (CURRENT_SAP.EQ.BUF_SSAP) THEN
		CALL MOV4TOI4(CONN_ID,BUFFER,X2FEMES_CONSTS_CONID-1)
		CONN_ID=IAND(CONN_ID,'00FFFFFF'X)
		IF (X2XS_CONN_ID(STATION_NO).EQ.0 .OR.
     *		  X2XS_CONN_ID(STATION_NO).EQ.CONN_ID) THEN
		    BX2XS_SAP(STATION_NO)=0
      		    IF(BX2XS_CONN_TYPE(STATION_NO).NE.X2XSCT_ASYPVC .AND.
     *		      BX2XS_CONN_TYPE(STATION_NO).NE.X2XSCT_USAT_PVC) THEN
      		      X2XS_CONN_ID(STATION_NO) = 0
      		    ENDIF 
		ENDIF
	      ENDIF
      	      X2XS_DISC_CNT(STATION_NO)=X2XS_DISC_CNT(STATION_NO)+1
C
C V02 LOGIC FOR NOT DEFINED STATION AND 'Connection Up'
C
         ELSEIF (ST.EQ.-2 .AND. TERCOD.NE.0) THEN
            DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE
C
C           X2ERR_BCST_BADADR activates X2CLRSVC in X2EXE.
C           To be used only if GTX issues Connection UP only
C           for "foreign" connections...
C	     WS, MODIFIED TO BE CONNECTION UP MESSAGE ONLY, CLEAR
C	     WILL BE ISSUED IN THE CASE OF THE DATA MESSAGE
C
            STATUS=X2ERR_FE_CMD               ! X2ERR_BCST_BADADR
            LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_FE
	    IF (VSPON) THEN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	    ELSE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	    ENDIF
            IF ( IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0
     *      .OR. IAND(X2X_DEBUG,X2X_DEBUG_X2XREL).NE.0 )
     *      TYPE *,'RTN X2RCVFE-UNDEF STN',X2X_PTLMES(STATUS),DEST_LAYER
            RETURN
         ENDIF
C end V02
C
	 STATUS=X2ERR_FE_CMD
	 LAYER='00010000'X*X2X_MESTYP_ERR+256*X2X_TRATYP_FE
	 IF (VSPON) THEN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	 ELSE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	 ENDIF
	ELSEIF (MESTYP.EQ.X2FEMES_MESTYP_ALARM) THEN !ALARM MESSAGE
	   STATUS=X2ERR_ALARM
	   LAYER='00010000'X*X2X_MESTYP_ERR+256*X2X_TRATYP_FE
	   IF (VSPON) THEN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	   ELSE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	   ENDIF
	ELSEIF (MESTYP.EQ.X2FEMES_MESTYP_ACK) THEN !DELIVERY ACK
C
C        CHECK FOR RELAY !!!!
C
	   HOST_ID = ZEXT (BUFFER(X2FEMES_HOST_ID-1))
	   HEAD_LEN = ZEXT (BUFFER(X2FEMES_HEADLEN-1))
	   CALL X2GETSTN(BUFFER((((HEAD_LEN+2)/2)*2)-2),STATION_NO,
     *                   TERMINAL_NO,1)
	   STATUS=X2ERR_ACK          !ADD SOME LOGIC TO RELAY
	   LAYER='00010000'X*X2X_MESTYP_ERR+256*X2X_TRATYP_FE
	   IF (VSPON) THEN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	   ELSE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	   ENDIF
	ELSEIF (MESTYP.EQ.X2FEMES_MESTYP_ERR) THEN !ERROR MESSAGE
C
C        CHECK FOR ERRORS (FE)
C
	   HOST_ID = ZEXT (BUFFER(X2FEMES_HOST_ID-1))
	   HEAD_LEN = ZEXT (BUFFER(X2FEMES_HEADLEN-1))
	   CALL X2GETSTN(BUFFER((((HEAD_LEN+2)/2)*2)-2),STATION_NO,
     *                   TERMINAL_NO,0)
C
C     CHECK IF CURRENT SAP IS THE SAME AS SENDING SAP
C     IF THE SAME AND CONN_ID .EQ. TO ERROR MESSAGE CONN_ID
C     OR CONN_ID EQ 0, CLEAR SAP INFORMATION (IF NOT ASYNC PVC CONNECTION)
C
	   IF (STATION_NO.GT.0 .AND.
	1   STATION_NO .LE. X2X_STATIONS) THEN
	      CURRENT_SAP=BX2XS_SAP(STATION_NO)
	      IF (CURRENT_SAP.EQ.BUF_SSAP) THEN
	         CALL MOV4TOI4(CONN_ID,BUFFER,X2FEMES_CONN_ID-1)
c-		 CONN_ID=IAND(CONN_ID,'FFFFFF00'X)
		 CONN_ID=IAND(CONN_ID,'00FFFFFF'X)
                IF((X2XS_CONN_ID(STATION_NO).EQ.0 .OR.
     *              X2XS_CONN_ID(STATION_NO).EQ.CONN_ID) .AND.
     *              BX2XS_CONN_TYPE(STATION_NO).NE.X2XSCT_ASYPVC.AND.
     *              BX2XS_CONN_TYPE(STATION_NO).NE.X2XSCT_USAT_PVC)THEN
	            BX2XS_SAP(STATION_NO)=0                    !CLEAR SAP
	            X2XS_CONN_ID(STATION_NO)=0
	         ENDIF
	      ENDIF
	   ENDIF
C
	   STATUS=X2ERR_ERR            !CHECK FOR RELAY
	   LAYER='00010000'X*X2X_MESTYP_ERR+256*X2X_TRATYP_FE
	   IF (VSPON) THEN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      EVSNLEN*2,EVSNNUM)
	   ELSE
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                    UNIT_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *			      ADR_LEN,STATION_ADR)
	   ENDIF
	ELSE
	   CURRENT_POINTER=-1
	   STATUS=X2ERR_FATAL+X2ERR_INV               !SOME OTHER TYPE
	   CALL X2ERROR(STATUS,BUF_SSAP,MESTYP,-1)
	ENDIF
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	    TYPE *,'LEAVING X2RCVFE',DEST_LAYER,STATION_NO,TERMINAL_NO,
     *	    CURRENT_POINTER,MESSAGE_LEN,MESSAGE(1),X2X_PTLMES(STATUS)
	RETURN
	END
