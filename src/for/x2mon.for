C
C PROGRAM X2MON
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2MON.FOV                                    $
C  $Date::   17 Apr 1996 16:23:44                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM X2MON

	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2MAINT.DEF'
C
	INCLUDE 'INCLIB:X2MON.DEF'
C
	INTEGER*4 COUNTER,SAP,PORT,ST,PORT_CNTR,TEMP_SVC,I
	INTEGER*4 THRESHOLD_SVC
	PARAMETER (THRESHOLD_SVC=2)
C
	INTEGER*4 MAX_INFO,
     *	          MAX_BUFFER
C
	PARAMETER (MAX_INFO=5,
     *		   MAX_BUFFER=500)
C
	INTEGER*4 BUF_MESSAGE_TYPE,
     *		  BUF_SAP,
     *		  BUF_PORT,
     *		  BUF_OLD_VALUE,
     *		  BUF_NEW_VALUE
C
	PARAMETER (BUF_MESSAGE_TYPE=1,
     *		  BUF_SAP=2,
     *		  BUF_PORT=3,
     *		  BUF_OLD_VALUE=4,
     *		  BUF_NEW_VALUE=5)
C
	INTEGER*4 MESSAGE(MAX_INFO,MAX_BUFFER)
C
	INTEGER*4  MAX_CURR_STATE
	PARAMETER (MAX_CURR_STATE=3)
C
	INTEGER*4  BEG_BUFFER /1/
	INTEGER*4  END_BUFFER /0/
C
	INTEGER*4 CURR_PORT_STATE(MAX_CURR_STATE,X2X_SAP_PORTS,X2X_SAP)
C
	INTEGER*4   STATE,
     *		    CURR_SVC
	PARAMETER   (STATE=1,
     *		     CURR_SVC=2)
C
	LOGICAL	    BEGIN /.TRUE./
	LOGICAL	    UPDATE_ALARMS /.FALSE./
C
C START HERE
C
	DO I=1,END_SCREEN
	    LINE(I) = '  '
	END DO
	SCREEN_LINE = 1
	NUM_ALARMS = 0
C
	CALL PRINTSCREEN(.TRUE.)
C
100	CONTINUE
C
	DO COUNTER=1,'7FFFFFFF'X
C
      	  DO 2000,SAP=1,X2X_SAP
	    PORT_CNTR = 0
            DO 3000,PORT=1,X2X_SAP_PORTS
		IF (X2XE_LOCAL_PORT_STATE(PORT,SAP).EQ.0) GOTO 3000
C
		PORT_CNTR = PORT_CNTR + 1

                CALL MOV2TOI4(TEMP_SVC,
     *              X2XE_LOCAL_PORT_MAINTENANCE(1,1,PORT_CNTR,SAP),
     *               X2MAINT_T1M_NO_CONN_VC - 1)
C
                IF (X2XE_LOCAL_PORT_STATE(PORT,SAP).NE.
     *		  CURR_PORT_STATE(STATE,PORT,SAP)) THEN
C		    CALL OPS('*** STATE CHANGED FOR SAP ',SAP,
C     *		        X2XE_LOCAL_PORT_STATE(PORT,SAP))
		    CALL SEND_ALARM(STATE,SAP,PORT,
     *			CURR_PORT_STATE(STATE,PORT,SAP),
     *		        X2XE_LOCAL_PORT_STATE(PORT,SAP))
		    END_BUFFER = MOD(END_BUFFER,MAX_BUFFER)+1
		    IF (END_BUFFER.GE.BEG_BUFFER.AND..NOT.BEGIN) 
     *		      BEG_BUFFER = MOD(BEG_BUFFER,MAX_BUFFER)+1
		    BEGIN = .FALSE.
		    CALL UPDATE_BUFFER(MESSAGE,END_BUFFER,STATE,SAP,PORT,
     *		      X2XE_LOCAL_PORT_STATE(PORT,SAP),
     *		      CURR_PORT_STATE(STATE,PORT,SAP))
		    UPDATE_ALARMS = .TRUE.
		ENDIF
C
		IF (ABS(CURR_PORT_STATE(CURR_SVC,PORT,SAP) - TEMP_SVC)
     *		    .GE. THRESHOLD_SVC) THEN
C		    CALL OPS('*** NUMBER OF SVC''S CHANGED FOR SAP ',SAP,
C     *		        TEMP_SVC)
		    CALL SEND_ALARM(CURR_SVC,SAP,PORT,
     *			CURR_PORT_STATE(CURR_SVC,PORT,SAP),
     *		        TEMP_SVC)
		    END_BUFFER = MOD(END_BUFFER,MAX_BUFFER)+1
		    IF (END_BUFFER.GE.BEG_BUFFER.AND..NOT.BEGIN) 
     *		      BEG_BUFFER = MOD(BEG_BUFFER,MAX_BUFFER)+1
		    BEGIN = .FALSE.
		    CALL UPDATE_BUFFER(MESSAGE,END_BUFFER,CURR_SVC,SAP,
     *		      PORT,TEMP_SVC,
     *		      CURR_PORT_STATE(CURR_SVC,PORT,SAP))
		    UPDATE_ALARMS = .TRUE.
		ENDIF

		CURR_PORT_STATE(STATE,PORT,SAP) = 
     *		  X2XE_LOCAL_PORT_STATE(PORT,SAP)
		CURR_PORT_STATE(CURR_SVC,PORT,SAP) = TEMP_SVC

3000	    CONTINUE
2000	  CONTINUE
C
C END OF COUNTER DO LOOP
C
	CALL PRINTSCREEN(UPDATE_ALARMS)
	UPDATE_ALARMS = .FALSE.
C
	CALL XWAIT(3,2,ST)
C
	END DO
C
C LOOP INFINITELY
C
	GOTO 100
C
	END
C
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE SEND_ALARM(MESSAGE_TYPE,SAP,PORT,OLD_VALUE,NEW_VALUE)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
C
	INTEGER*4 PORT,SAP
	INTEGER*4 MESSAGE_TYPE,OLD_VALUE,NEW_VALUE
	CHARACTER*6 STATE_MESSAGE(3) /'Idle','Online','Down'/
	CHARACTER*132 BUFFER
        INTEGER*4 PRTIM(2)
        CHARACTER*1     BELL    /Z07/   ! BEEP !
C

C
        CALL ICLOCK(1,PRTIM)

	GOTO (100,200,300) MESSAGE_TYPE

C
C STATE CHANGED
C
100	CONTINUE
	IF (OLD_VALUE.EQ.0) THEN
	    WRITE (BUFFER,9100) PRTIM,SAP,PORT,
     *	      STATE_MESSAGE(NEW_VALUE)
9100	    FORMAT (1X,2A4,': State for SAP ',I4,' port ',I2,
     *	      ' set to ',A)
	ELSE
	    WRITE (BUFFER,9110) PRTIM, SAP,PORT,
     *	      STATE_MESSAGE(OLD_VALUE),STATE_MESSAGE(NEW_VALUE),BELL
9110	    FORMAT (1X,2A4,': State for SAP ',I4,' port ',I2,
     *	      ' changed from ',A,' to ',A)
	ENDIF
	CALL ADDTOSCREEN(BUFFER)
C
	RETURN
C
C
C CURRENT # OF SVC'S CHANGED SUDDENLY
C
200	CONTINUE
C	IF (OLD_VALUE.NE.0) THEN
	    WRITE (BUFFER,9210) PRTIM, SAP,PORT,OLD_VALUE,NEW_VALUE,BELL
9210	    FORMAT (1X,2A4,': Number of SVC''s for SAP ',I4,
     *	      ' port ',I2,
     *	      ' changed from ',I4,' to ',I4,A1)
C	ENDIF
	CALL ADDTOSCREEN(BUFFER)
	RETURN
C
300	CONTINUE
	RETURN
C
	END
C
C
C
	SUBROUTINE UPDATE_BUFFER(BUFFER,ENTRY,VAL1,VAL2,VAL3,VAL4,VAL5)
	IMPLICIT NONE

	INTEGER*4 VAL1,VAL2,VAL3,VAL4,VAL5
C
	INTEGER*4 BUF_MESSAGE_TYPE,
     *		  BUF_SAP,
     *		  BUF_PORT,
     *		  BUF_OLD_VALUE,
     *		  BUF_NEW_VALUE
C
	PARAMETER (BUF_MESSAGE_TYPE=1,
     *		  BUF_SAP=2,
     *		  BUF_PORT=3,
     *		  BUF_OLD_VALUE=4,
     *		  BUF_NEW_VALUE=5)
C
	INTEGER*4 ENTRY
C
	INTEGER*4 MAX_INFO,
     *	          MAX_BUFFER
C
	PARAMETER (MAX_INFO=5,
     *		   MAX_BUFFER=500)

	INTEGER*4 BUFFER(MAX_INFO,MAX_BUFFER)
C
	BUFFER(BUF_MESSAGE_TYPE,ENTRY) = VAL1
	BUFFER(BUF_SAP,ENTRY) = VAL2
	BUFFER(BUF_PORT,ENTRY) = VAL3
	BUFFER(BUF_OLD_VALUE,ENTRY) = VAL4
	BUFFER(BUF_NEW_VALUE,ENTRY) = VAL5
C
	RETURN
C
	END
C
C
C
	SUBROUTINE ADDTOSCREEN(MESSAGE)
	IMPLICIT NONE

	INCLUDE 'INCLIB:X2MON.DEF'

	CHARACTER*80 MESSAGE
C
	INTEGER*4 I
C

	SCREEN_LINE = SCREEN_LINE + 1
C
	IF (SCREEN_LINE.GT.END_SCREEN) THEN
	    DO I=1,END_SCREEN-1
		LINE(I) = LINE(I+1)
	    END DO
	    SCREEN_LINE = END_SCREEN
	ENDIF
C
	LINE(SCREEN_LINE) = MESSAGE
C
	NUM_ALARMS = NUM_ALARMS + 1
C
	RETURN
C
	END
C
C
C
	SUBROUTINE PRINTSCREEN(UPDATE_ALARMS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:X2MON.DEF'

	CHARACTER*3 YCOPY
C
	INTEGER*4 I,PRDAT(3)
        INTEGER*4 PRTIM(2)
C
	LOGICAL UPDATE_ALARMS
C
        DATA YCOPY(1:1)/Z1B/, YCOPY(2:3) /'[H'/

	WRITE (5,9000) YCOPY
C
        CALL ICLOCK(1,PRTIM)
        CALL XDAT(PRDAT)
        WRITE(5,9055) NUM_ALARMS,PRDAT(2),PRDAT(3),PRDAT(1),PRTIM
C
	IF (.NOT.UPDATE_ALARMS) RETURN
C
	DO I=1,END_SCREEN
	    WRITE (5,1000) LINE(I)
	END DO
C
1000	FORMAT (' ',A80)
C
	RETURN
9000	FORMAT('+',A3)
9055    FORMAT('+Monitor Program',33X,I4,' Alarms  ',I2.2,'/',I2.2,'/',
     *	       I2.2,3X,2A4)
C
	END
