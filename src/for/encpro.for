C
C PROGRAM ENCPRO
C $Log:   GXAFXT:[GOLS]ENCPRO.FOV  $
C  
C     Rev 1.0   17 Apr 1996 13:04:38   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C  
C     Rev 1.1   21 Oct 1993 16:26:18   GXA
C  Applied change from Checkoslovakia for setting the encryption key befor
C  each sign-on.
C  
C     Rev 1.0   21 Jan 1993 16:13:08   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - encpro.for **
C
C ENCPRO.FOR
C
C V04 09-MAY-91 MP  ADDED CALL TO SNIF_AND_WRKSET
C V03 03-MAY-91 TKO If clerk accounting not active (P(CLRKACT).NE.0),
C		    do not do any clerk stuff
C V02 18-MAR-90 WS INCORPORATED SIMULATION AND NEW ENCRYPTION METHOD
C		   WATCH OUT FOR COMMENTS WITH !!!, WILL CHANGE
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C V01 20-SEP-89 LOU R.    RELEASED FOR FINLAND.
C
C     ENCPRO.FTN
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C	THE FUNCTION OF THIS TASK IS TO PROVIDE ENCRYPTION/SIMULATION
C	INTERFACE BETWEEN COMMUNICATION (X2X) AND GAME (DISPAT/LOGOUT)
C
C	ADDITIONAL ROUTINES ARE "BUILT IN" IN THIS MODULE
C	SIMCHKINP(BUFFER)		  - CHECK FOR INPUT SIMULATION BUFFER
C	SIMCHKOUT(BUFFER,ORIGINAL_BUFFER) - CHECK FOR SIMULATION RANS FROM GAME
C	ENCSGNON(BUFFER,STATUS)		  - PROCESS ENCRYPTED SIGNON
C	ENCRPTBF(BUFFER,STATUS)		  - PREPARE TO SOFT ENCRYPT BUFFER
C	DECRYPTBF(BUFFER,STATUS)	  - PREPARE TO SOFT DECRYPT BUFFER
C	CHKENCPT(BUFFER,ENCRYPTION_TYPE,STATUS) - CHECK IF ANYTHING
C					      WAS ENCRYPTED OR DECRYPTED
C					      BY SOFT ENCRYPTION/DECRYPTION
C	DESDECBF(BUFFER,STATUS)		  - DES DECRYPT BUFFER
C	DESENCBF(BUFFER,STATUS)		  - DES ENCRYPT BUFFER
C	DESCHKBF(BUFFER,ENCRYPTION_TYPE,STATUS) - CHECK IF ANYTHING
C					  - ENCRYPTED/DECRYPTED BY DES
C	SENDOUT(BUFFER)			  - SEND BUFFER OT X2X
C	ENCSTART			  - INITIALIZE ENCRYPTION
C
C	ROUTINES ENCRPTBF, DECRPTBF,CHKENCPT, ENCSTART WILL BE
C	MOVED OUT FROM THIS MODULE. AS THESE ROUTINES ARE WRITTEN, THEY
C	PROVIDE, SOFT ENCRYPTION INTERFACE, FOR DES, ROUTINES WITH THE
C	SAME CALLING SEQUENCES WILL BE IMPLEMENTED
C
C
C	(1) INITIALIZE - CALL ENCSTART
C	(2) MAIN LOOP
C	    CHECK DAYSTS
C	    IF DAYSTS IS SUSPENDED, WAIT, DO NOTHING
C	    IF DAYSTS CLOSED EXIT SMOOTHLY
C	    WAIT A WHILE
C	(3) LOOP WHILE COULD DEQUEUE TRANSACTION FROM DECRYPTION QUEUE:
C	    - IF TRANSACTION IS SIMULATED, PROCESS SIMULATION OUTPUT
C	      CALL SIMCHKOUT
C	    - IF TRANSACTION SHOULD BE ENCRYPTED, SEND TO ENCRYPTION
C	      CALL ENCRPTBF
C	    - IF SHOULD NOT BE ENCRYPTED SEND TO X2X - CALL SENDOUT
C	(4) LOOP WHILE COULD DEQUEUE BUFFER FORM INPUT QUEUE:
C	    - IF TRANSACTION SHOULD NOT BE DECRYPTED:
C		IF SIMULATION ACTIVE CHECK FOR SIMULATION GENERATION
C		    CALL SIMCHKINP
C		ADD TRANSACTION TO DISPATCHER
C	    - IF TRANSACTION SHOULD BE DECRYPTED, TRY TO DECRYPT IT
C		    CALL DECRPTBF OR DESDECBF
C	    - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C	(5) LOOP TO PRCESS DECRYPTED OR ENCRYPTED TRANSACTION:
C	    - IF ENCRYPTION AND NOT 2-ND PHASE OF SIGN-ON, SEND TRANSACTION
C	      TO X2X
C	    - IF SIGNON
C		PROCESS SIGNON - CALL ENCSGNON
C	    - IF SIMULATION ACTIVE, TRY TO PROCESS SIMULATION INPUT
C		    CALL SIMCHKINP
C	    - SEND TRANSACTION TO DISPATCHER
C	    - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C	(6) LOOP IF INTERNAL SIMULATION IS ACTIVE AND TRANSACTIONS
C	    IN SIMULATION QUEUE:
C	    - PROCESS SIMULATION  INPUT TRANSACTIONS (CALL SIMCHKINP)
C	    - SEND IT TO DISPATCHER
C	    - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM ENCPRO
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:QUECOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
	INCLUDE 'INCLIB:ENCCOM.DEF'
	INCLUDE 'INCLIB:SIMCOM.DEF'
C
C
	INTEGER*4 DATA, STATUS, BUF_NO, ST
	INTEGER*4 TRM
	INTEGER*4 MAXDELAY, DELAY
	INTEGER*4 AGAIN				!NON 0 IF SHOULD REDO LOOP
	INTEGER*4 OUTPUT_BUF			!OUTPUT BUFFER
	INTEGER*4 ENC_TYPE			!CRYPTION_TYPE
	INTEGER*4 XREF_BUF		        !BUFFER INDEX
	INTEGER*4 TYPE_MASK /Z0000FF00/		!TYPE/SUBTYPE MASK
	INTEGER*4 SIGN_ON /Z00003000/	        !SIGN_ON TYPE
	INTEGER*4 AGT_MAXPASS 
C
C
C       (1) INITIALIZE - CALL ENCSTART
C
	CALL COPYRITE
C V04
	CALL SNIF_AND_WRKSET
C
	CALL ENCSTART
C
C
	DELAY=0
	MAXDELAY=100           !EXECUTE LOOP 100 TIMES AFTER DAY CLOSED
	SIM_DELAY_RESOLUTION=100
	AGT_MAXPASS = 1
	IF(P(CLRKACT).EQ.0) AGT_MAXPASS = 8
C
C       (2) MAIN LOOP
C           CHECK DAYSTS
C           IF DAYSTS IS SUSPENDED, WAIT, DO NOTHING
C           IF DAYSTS CLOSED EXIT SMOOTHLY
C           WAIT A WHILE
C
10	CONTINUE
	IF(DAYSTS.EQ.DSSUSP) THEN
	  CALL XWAIT(100,1,ST)
	  GOTO 10
	ENDIF
C
C
	IF (DAYSTS.EQ.DSCLOS) THEN
	  DELAY=DELAY+1
	  IF (DELAY.EQ.MAXDELAY) GOTO 9000
	ELSE
	  DELAY=0
	ENDIF
C
	CALL XWAIT(P(ENCPRO_WAIT),1,ST)			!WAIT SOME MSECS
C
C       (3) LOOP WHILE COULD DEQUEUE TRANSACTION FROM DECRYPTION QUEUE:
C           - IF TRANSACTION IS SIMULATED, PROCESS SIMULATION OUTPUT
C             CALL SIMCHKOUT
C           - IF TRANSACTION SHOULD BE ENCRYPTED, SEND TO ENCRYPTION
C             CALL ENCRPTBF OR CALL DESENCBF
C           - IF SHOULD NOT BE ENCRYPTED SEND TO X2X - CALL SENDOUT
C
100	CONTINUE
	CALL RTL(OUTPUT_BUF,GAME_OUTQUE,ST)
	IF (ST.NE.2) THEN
C
C	IF THIS IS SIMULATED TRANSACTION QUEUE IT TO SIMULATION
C	
	   XREF_BUF=SIM_XREF(OUTPUT_BUF)   !BUFFER SIMULATED IF .NON. 0
CCCC 	   TYPE *,'buffer on GAME_OUTQUE ',OUTPUT_BUF,' XREF ',XREF_BUF
	   SIM_XREF(OUTPUT_BUF)=0
	   IF (XREF_BUF.NE.0) THEN
		CALL SIMCHKOUT(OUTPUT_BUF,XREF_BUF)
CCCC		TYPE *,'XREF_BUF AFTER SIMCHKOUT ',XREF_BUF
		IF (XREF_BUF.LT.0) GOTO 100        !IF INTERNALLY SIMULATED
C						   !TRANSACTION
	   ENDIF
C
C	CHECK IF SHOULD ENCRYPT
C	QUEUE TO ENCRYPTION IF SHOULD BE ENCRYPTED, OTHERWISE
C	QUEUE TO X2X
C
	  IF (IAND(PRO(OUTTAB,OUTPUT_BUF),ENCRYPTION_ON).NE.0) THEN
	    IF (P(DESFLG_TYPE).EQ.DESFLG_HARD) THEN
	       CALL DESENCBF(OUTPUT_BUF,ST)
	    ELSE
	       CALL ENCRPTBF(OUTPUT_BUF,ST)		!DO ENCRYPTION
	    ENDIF
CCCC	    TYPE *,'AFTER CALLING ENCRPTBF ',ST
	    IF (ST.NE.0) CALL SENDOUT(OUTPUT_BUF)	!IF ERROR
	  ELSE
	    CALL SENDOUT(OUTPUT_BUF) !GAME OUTPUT
	  ENDIF
C
C	TRY TO DEQUEUE NEXT
C
	  GOTO 100
	ENDIF
C
	AGAIN=0
C
C     GET DECRYPTED BUFFER AND QUEUE IT TO DISPATCHER QUEUE
C
C       (4) LOOP WHILE COULD DEQUEUE BUFFER FORM INPUT QUEUE:
C           - IF TRANSACTION SHOULD NOT BE DECRYPTED:
C               IF SIMULATION ACTIVE CHECK FOR SIMULATION GENERATION
C                   CALL SIMCHKINP
C               ADD TRANSACTION TO DISPATCHER
C           - IF TRANSACTION SHOULD BE DECRYPTED, TRY TO DECRYPT IT
C                   CALL DECRPTBF OR DESDECBF
C           - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C
C
200	CONTINUE
C
	CALL DQUINP(BUF_NO)
	IF (BUF_NO.GT.0) THEN
D	  TYPE *,'Transaction dequeued form input ',BUF_NO
	  AGAIN=-1
	  IF (BUF_NO.GT.NUMPRO) THEN
	    TYPE 900,IAM(),BUF_NO
900	    FORMAT(1H ,A,' invalid buf in input ',I8)
	    GOTO 200
	  ENDIF
	  SIM_XREF(BUF_NO)=0
	  IF (IAND(PRO(INPTAB,BUF_NO),ENCRYPTION_ON).EQ.0.OR.
     *	      P(SYSTYP).NE.LIVSYS.OR.
     *	      HPRO(TRCODE,BUF_NO).NE.TYPREG) THEN
C
C	THIS BUFFER CAME UNENCRYPTED
C	CHECK IF SIMULATION ACTIVE AND THIS IS SIMULATED TRANSACTION
C
	     IF (P(SIMULATION_STATUS).EQ.SIMULATION_ON) THEN
		IF (P(SYSTYP).EQ.LIVSYS		 .AND.
     *		    SIM_INTERNAL_SIMULATION.EQ.0 .AND.
     *		    HPRO(TRCODE,BUF_NO).EQ.TYPREG)
     *	      		CALL SIMCHKINP(BUF_NO)
	     ENDIF
C
C	     ADD BUFFER TO DISPATCHER QUEUE
C
D	     TYPE *,'ADDING BUF TO DISPAT ',BUF_NO
	     CALL ABL(BUF_NO,QUETAB(1,DIS),STATUS)
	     GOTO 200
	  ELSE
C
C BECAUSE OF POSSIBILITY OF TERMINAL PASSWORD CHANGE THE ECRYPTION KEY
C SHOULD BE SET BEFORE EACH SIGN-ON.
C
	     IF(IAND(PRO(INPTAB,BUF_NO),TYPE_MASK).EQ.SIGN_ON) THEN
	        TRM = HPRO(TERNUM,BUF_NO)	!FIND TERMINAL NUMBER
		IF(AGTHTB(AGTPASOFF,TRM).LE.0.OR.
     *             AGTHTB(AGTPASOFF,TRM).GT.AGT_MAXPASS)
     *                    AGTHTB(AGTPASOFF,TRM) = 1
		CALL ENCINI1(AGTTAB(APSNUM+AGTHTB(AGTPASOFF,TRM)-1,
     *                       TRM),TRM)
	     ENDIF
C
C	TRY TO DECRYPT
C
	     IF (P(DESFLG_TYPE).EQ.DESFLG_HARD) THEN
D		TYPE *,'Hard Dencryption'
		CALL DESDECBF(BUF_NO,STATUS)
	     ELSE
D		TYPE *,'Soft Dencryption'
		CALL DECRPTBF(BUF_NO,STATUS)
	     ENDIF
D	     TYPE *,'AFTER DECRPTBF STATUS ',STATUS
	     IF (STATUS.NE.0) CALL ABL(BUF_NO,QUETAB(1,DIS),STATUS) !IF ERROR
	     GOTO 200
	  ENDIF
	ENDIF
	IF (AGAIN.NE.0) GOTO 100
C
C       (5) LOOP TO PRCESS DECRYPTED OR ENCRYPTED TRANSACTION:
C           - IF ENCRYPTION AND NOT 2-ND PHASE OF SIGN-ON, SEND TRANSACTION
C             TO X2X
C           - IF SIGNON
C               PROCESS SIGNON - CALL ENCSGNON
C           - IF SIMULATION ACTIVE, TRY TO PROCESS SIMULATION INPUT
C                   CALL SIMCHKINP
C           - SEND TRANSACTION TO DISPATCHER
C           - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C
C
210	CONTINUE
C
	IF (P(DESFLG_TYPE).EQ.DESFLG_HARD) THEN
	    CALL DESCHKBF(BUF_NO,ENC_TYPE,STATUS)
	ELSE
	    CALL CHKENCPT(BUF_NO,ENC_TYPE,STATUS)
	ENDIF
C
	IF (STATUS.EQ.0) THEN
D	  TYPE *,'CHKENCPT STATUS ',STATUS,ENC_TYPE
	  IF (ENC_TYPE.EQ.ENC_TYPE_ENCRYPT .AND.
     *	    HPRO(TRCODE,BUF_NO).NE.TYPPAS) THEN
C
C	ENCRYPT MESSAGE (NOT SECOND PHASE OF MULTIPASSWORD SIGNON)
C
	    AGAIN=-1
	    CALL SENDOUT(BUF_NO)
D	    TYPE *,'ATTEMPT TO SEND TO X2X ',BUF_NO
	    GOTO 210
	  ELSE		!STATUS.EQ.0, DECRYPT OR TYPPAS
C
C	DECRYPTION, OR SECOND PHASE OF SIGN ON (ENCRYPTED BACK
C	MESSAGE)
C
	    AGAIN=-1
C
C     CHECK IF IT IS NOT SIGN ON, CHECK FOR LEGAL PASSWORD
C     AND SET ENCRYPTION KEY IF NEEDED.
C
	    IF( P(CLRKACT).EQ.0 .AND.			    !**V03**
     *          IAND(PRO(INPTAB,BUF_NO),TYPE_MASK).EQ.SIGN_ON) THEN
D	    TYPE *,'PROCESS SIGNON '
	      CALL ENCSGNON(BUF_NO,STATUS)
	      IF (STATUS.NE.0) GOTO 210  !IF WENT TO DECRYPTION
C					  OR SECOND PHASE ENCRYPTION
C					  OR ENCRYPTION/DECRYPTION ERROR
	    ENDIF
C
C	CHECK IF SIMULATION ACTIVE AND THIS IS SIMULATED TRANSACTION
C
	    IF (P(SIMULATION_STATUS).EQ.SIMULATION_ON) THEN
	      IF (SIM_INTERNAL_SIMULATION.EQ.0) CALL SIMCHKINP(BUF_NO)
	    ENDIF
C
C
D	    TYPE *,'QUEUEING TO DISPAT ',BUF_NO
	    CALL ABL(BUF_NO,QUETAB(1,DIS),STATUS)
	    GOTO 210
	  ENDIF
	ENDIF
C
	IF (AGAIN.NE.0) GOTO 100
C
C       (6) LOOP IF INTERNAL SIMULATION IS ACTIVE AND TRANSACTIONS
C           IN SIMULATION QUEUE:
C           - PROCESS SIMULATION  INPUT TRANSACTIONS (CALL SIMCHKINP)
C           - SEND IT TO DISPATCHER
C           - IF ANYTHING DEQUEUED AND NO MORE TO DEQUEUE, GOTO (3)
C
C
230	CONTINUE
	IF (P(SIMULATION_STATUS).EQ.SIMULATION_ON) THEN
          IF (SIM_INTERNAL_SIMULATION.NE.0) THEN
	      BUF_NO=-1			!ASSUME NO INPUT BUF FOR INTERNAL
C					!SIMULATION
	      CALL SIMCHKINP(BUF_NO)
	      IF (BUF_NO.GT.0)  THEN
		CALL ABL(BUF_NO,QUETAB(1,DIS),STATUS)
D		TYPE *,'PROCESSING SIMULATED TRANSACTION ',BUF_NO
CCCC		CALL PRTOUT(BUF_NO)
		AGAIN=-1
		GOTO 230   !CHANGE IT TO GOTO 100 IF U WANT TO PLAY
C			    WITH TERMINAL RESPONSE TIME !!!!!!!
	      ENDIF
	  ENDIF
	ENDIF
 
	IF (AGAIN.NE.0) GOTO 100
C
	GOTO 10
C
9000	CONTINUE
	CALL GSTOP(GEXIT_SUCCESS)
	END
