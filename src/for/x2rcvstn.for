C
C SUBROUTINE X2RCVSTN
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2RCVSTN.FOV                                 $
C  $Date::   17 Apr 1996 16:29:28                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - x2rcvbuf.for;1 **
C
C V05 14-FEB-95 DAS Check if message recieved is correct length
C V04 12-DEC-94 DAS Integrate UK changes into X2X Baseline
C V03 18-JUL-94 WS MULTINETWORK CHANGES
C V02 16-FEB-94 JWE Add broadcast server code
C
C
C++++++++++++++++++++++++++++++++++++++++++++++
C
C     X2RCVSTN                 PROCESS STATION MESSAGE
C
C     X2RCVSTN(BUFFER,MESSAGE,TERMINAL_NO,STATION_NO,CONN_TYPE,MESSAGE_LEN,
C              DEST_LAYER,BUF_SSAP,STATION_LEN,STATUS)
C     IN:
C        BUFFER      -  BUFFER WITH DATA
C        BUF_SSAP    - ORIGINATION SAP, NEEDED FOR MESSAGES TO X2XPRO
C        CONN_TYPE   - CONNECTION TYPE (X.21,X.25,ASYNC,etc.)
C     OUT:
C        MESSAGE     - TERMINAL MESSAGE
C        TERMINAL_NO - TERMINAL NUMBER
C        STATION_NO  - STATION NUMBER, 0 - INVALID, -1 HAS TO BE
C                      .GT.0 IF VALID STATION_NO
C        MESSAGE_LEN - MESSAGE LENGTH IN BYTES
C        DEST_LAYER  - LAYER THAT WAS PROCESSED
C        STATION_LEN - LENGTH OF STATION MESSAGE
C        ST          - MESSAGE STATUS
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2RCVSTN(BUFFER,MESSAGE,TERMINAL_NO,STATION_NO,
     *	        CONN_TYPE,MESSAGE_LEN,DEST_LAYER,BUF_SSAP,
     *          STATION_LEN,STATUS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2STMES.DEF'
	INCLUDE 'INCLIB:X2TDBH.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2PTLMES.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	BYTE      BUFFER(0:*)     !ELIMINATE ILBYTE AND ISBYTE
	INTEGER*2 MESSAGE(*)
	INTEGER*4 STATION_NO,CONN_TYPE,TERMINAL_NO,MESSAGE_LEN,STATUS
	INTEGER*4 RESPONSE_INDEX/0/
	INTEGER*4 I, HEADER_LEN, RECEIVED_LEN, COMMAND, LAST_SAP
	INTEGER*4 CURRENT_DELAY, DELAY, DATA_OFFSET, TERMINAL_STATE
	INTEGER*4 DROP, RESPONSE_FLAG, PORT, PORT_BYTE, LAYER
	INTEGER*4 CONFIGURATION, DATA_TYPE, PROTID, STATION_LEN
	INTEGER*4 BUF_SSAP, DEST_LAYER, TMP_STATION_NO
	INTEGER*4 SUBNETWORK
	INTEGER*4 STATION_ADR(2) /0,0/, ADR_LEN
C
C
C     !!!
C     FOR DIAL UP HEADERS, CHECK HEADERS NOW
C     CHECK TERMINAL ROM ID CORRECT - PROCESS,
C     AFTER HEADER INFOR PROCESSED, SET FLAG WITH "REPLACEMENT "
C     ADDRESS (INDEX TO ADDRESS?), SO WE MAY SUBSTITUTE THE
C     ADDRESS WHEN WE SEND OUT.
C     MOVE DATA DOWN NOW AND PROCESS STATION MESSAGE
C     !!!
C
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	    TYPE *,'X2RCVSTN ',BUFFER(1)
	DEST_LAYER=DEST_LAYER+X2DEST_STATION
	PROTID = ZEXT (BUFFER(X2STMES_PROTID-1))
	IF (PROTID.NE.X2STMES_PROTID_VAL) THEN
	   STATUS=X2ERR_STTN_PROTOCOL
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	     TYPE *,'RETURN X2RCVSTN I ',STATION_NO,TERMINAL_NO,
     *	         DEST_LAYER,PROTID,X2X_PTLMES(STATUS)
	   RETURN
	ENDIF
        DATA_TYPE = ZEXT (BUFFER(X2STMES_DATATYPE-1))         !GET MESS TYPE
C
C
C     CHECK FOR RELAYS HERE AND RETURN WITH RELAY FLAG !!!
C
	ADR_LEN=0
	STATION_ADR(1)=0
	STATION_ADR(2)=0
        IF((DATA_TYPE.NE.X2STMES_DATATYPE_RESET) .AND.
     *     (DATA_TYPE.NE.X2STMES_DATATYPE_DEFAULT_CONF2) .AND.
     *     (DATA_TYPE.NE.X2STMES_DATATYPE_RESET2) .AND.
     *     (DATA_TYPE.NE.X2STMES_DATATYPE_DEFAULT_CONFIG)) THEN
	    CONFIGURATION = ZEXT (BUFFER(X2STMES_CONFCHK-1))  !IGNORE
C           SHOULD BE SAME AS X2XS_CONF(STATION_NO)
C
	   CALL MOV2TOI4(TMP_STATION_NO,BUFFER,X2STMES_STATION_NO-1)
           IF((CONN_TYPE.EQ.X2XSCT_ASYPVC    .OR.
     *         CONN_TYPE.EQ.X2XSCT_USAT_PVC) .AND.
     *       TMP_STATION_NO.NE.STATION_NO) THEN
	      STATION_NO = -1
	   ELSE
	      STATION_NO = TMP_STATION_NO
	   ENDIF
	   IF (STATION_NO.LE.0.OR.STATION_NO.GT.X2X_STATIONS) THEN
	      STATUS=X2ERR_BADSTN
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	       TYPE *,'RETURN X2RCVSTN 2: ',STATION_NO,TERMINAL_NO,
     *	          DEST_LAYER,X2X_PTLMES(STATUS)
	      STATION_NO=-1
	      RETURN
	   ENDIF
	   ADR_LEN=X2XS_ADRESS_LEN(STATION_NO)
	   STATION_ADR(1)=X2XS_ADRESS(1,STATION_NO)
	   STATION_ADR(2)=X2XS_ADRESS(2,STATION_NO)
	   CALL MOV2TOI4(MESSAGE_LEN,BUFFER,X2STMES_MESLEN-1)
	   IF (STATION_LEN.LT.MESSAGE_LEN+X2STMES_MESLEN+1 .OR.
     *	       DATA_TYPE.EQ.X2STMES_DATATYPE_RELAY_ACK .AND.
     *	       STATION_LEN.LT.X2STMES_RELAY_ACK_LEN) THEN
	      STATUS=X2ERR_STNLEN
	      STATION_NO=-1
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	       TYPE *,'RETURN X2RCVSTN 3: ',STATION_NO,TERMINAL_NO,
     *	          STATION_LEN,MESSAGE_LEN,X2X_PTLMES(STATUS)
	       RETURN
	   ENDIF
	ENDIF
C
	IF (DATA_TYPE.EQ.X2STMES_DATATYPE_UP) THEN !TERMINAL MESSAGE
	   DEST_LAYER=DEST_LAYER+X2DEST_RETURN
	   PORT_BYTE = ZEXT (BUFFER(X2STMES_PORTID-1))            !PORT #
	   PORT=IAND(PORT_BYTE,X2STMES_PORT_MASK)
	   RESPONSE_FLAG=IAND(PORT_BYTE,X2STMES_RESPONSE_TIME_FLAG)
	   PORT=PORT+1               !TRANSPORTS COUNTS PORTS FROM 0
	   DROP = ZEXT (BUFFER(X2STMES_TERMID-1))                !TERMINAL ADR
	   DROP=DROP+1
	   IF (PORT.GT.X2X_MAXPORT.OR.DROP.GT.X2X_MAXTERMS) THEN
	      STATUS=X2ERR_BADTRM
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	       TYPE *,'RETURN X2RCVSTN 4: ',STATION_NO,TERMINAL_NO,
     *	               DEST_LAYER,X2X_PTLMES(STATUS)
	      TERMINAL_NO=-1
	      DEST_LAYER=X2DEST_TRANSPORT+X2DEST_FE+X2DEST_STATION
	      RETURN
	   ENDIF
	   TERMINAL_NO=X2XS_TERMS(DROP,PORT,STATION_NO)
	   IF (TERMINAL_NO.EQ.0) THEN
C
C     THIS TERMINAL COULD HAVE BEEN DISABLED
C
	      STATUS=X2ERR_BADTRM
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVSTN 5: ',STATION_NO,TERMINAL_NO,
     *	              DEST_LAYER,X2X_PTLMES(STATUS)
	      TERMINAL_NO=-1
	      STATION_NO=-1
	      RETURN
	   ENDIF
C
	   TERMINAL_STATE=BX2XT_STATE(TERMINAL_NO)
	   IF (TERMINAL_STATE.EQ.X2XTS_DISABLED) THEN
	      STATUS=X2ERR_BADTRM
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RETURN X2RCVSTN 6: ',STATION_NO,TERMINAL_NO,
     *	              DEST_LAYER,X2X_PTLMES(STATUS)
	      TERMINAL_NO=-1
	      STATION_NO=-1
	      RETURN
	   ENDIF
	   X2XT_TIME(TERMINAL_NO)=X2X_SYSTIM
C
	   DATA_OFFSET=(((X2STMES_DATA+1)/2)*2)-2
	   IF (RESPONSE_FLAG.NE.0) THEN
	      CALL MOV2TOI4(DELAY,BUFFER,X2STMES_DATA-1)
	      DATA_OFFSET=DATA_OFFSET+2
	      X2XT_NETWORK_DELAY(TERMINAL_NO)=DELAY-X2XT_DELAY(
     *	                                            TERMINAL_NO)
	      RESPONSE_INDEX=RESPONSE_INDEX+1
	      IF (RESPONSE_INDEX.LE.0.OR.RESPONSE_INDEX.GT.
     *	              X2X_NET_RESPONSE_LEN) RESPONSE_INDEX=1
	      X2XA_NET_RESPONSE(RESPONSE_INDEX)=X2XT_NETWORK_DELAY(
     *	                                                  TERMINAL_NO)
	      CURRENT_DELAY=X2XT_NETWORK_DELAY(TERMINAL_NO)/
     *	                    X2X_DELAY_UNIT
	      IF (CURRENT_DELAY.LT.0.OR.CURRENT_DELAY.GT.
     *            X2X_MAXDELAY) CURRENT_DELAY = X2X_MAXDELAY
	      LAST_SAP=ZEXT(BX2XS_SAP(STATION_NO))		!V03
	      IF (LAST_SAP.EQ.0) LAST_SAP=BUF_SSAP
C****	      IF(X2XE_FE_TYPE(LAST_SAP).NE.X2TDBH_FE_TYPE_DIAL_UP) THEN
C****                X2XA_MIXDELAY(CURRENT_DELAY) =
C****     *                         X2XA_MIXDELAY(CURRENT_DELAY) + 1
C
C               Update delays by subnetwork type
C
		 SUBNETWORK=X2XE_SUBNETWORK(LAST_SAP)
		 IF (SUBNETWORK.GT.X2X_MAX_DELAY_SUBNET-1) SUBNETWORK=0
                 X2XA_DELAY(CURRENT_DELAY,SUBNETWORK)=
     *            X2XA_DELAY(CURRENT_DELAY,SUBNETWORK)+1
C
                 X2XA_LASTDELAY(CURRENT_DELAY,SUBNETWORK,
     *			      X2XA_LASTDELAY_INDEX)=
     *            X2XA_LASTDELAY(CURRENT_DELAY,SUBNETWORK,
     *				      X2XA_LASTDELAY_INDEX)+1
C****              ELSE
C****                 X2XA_DIALDELAY(CURRENT_DELAY)=X2XA_DIALDELAY(
C****     *                             CURRENT_DELAY)+1
C****	      ENDIF
	   ENDIF
C
           IF(MESSAGE_LEN.LE.0.OR.MESSAGE_LEN.GT.OUTLEN_MAX)THEN
             STATUS=X2ERR_STNLEN
	     LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	     CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
             STATION_NO=-1
             RETURN
           ENDIF
C
	   CALL MOVTAB2(BUFFER(DATA_OFFSET),MESSAGE,
     *	                 (MESSAGE_LEN+1)/2)
           IF (X2X_GAME_MODE.EQ.X2X_GAMEM_DAY) THEN
              STATUS=0
           ELSEIF (X2X_GAME_MODE.EQ.X2X_GAMEM_NIGHT) THEN
              STATUS=X2ERR_NAAS
           ENDIF
	ELSEIF (DATA_TYPE.EQ.X2STMES_DATATYPE_CMD_UP) THEN!CONTROL MESS
	   COMMAND = ZEXT (BUFFER(X2STMES_CODE-1))
C
C
	   IF (COMMAND.EQ.X2STMES_CONF_REQ) THEN !CONFIG REQUEST
	      STATUS=X2ERR_CONFREQ
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	   ELSEIF (COMMAND.EQ.X2STMES_STAT_REP)  THEN !STAT REPORT
	      STATUS=X2ERR_STATREP
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      RECEIVED_LEN=MESSAGE_LEN+X2STMES_DATA-1
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                RECEIVED_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	   ELSEIF (COMMAND.EQ.X2STMES_PORT_REQ) THEN !PORT CONF. REQ
	      STATUS=X2ERR_PORTREQ
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	   ELSEIF (COMMAND.EQ.X2STMES_VAL_REQ) THEN   !VALIDITY CHECK
	      STATUS=X2ERR_VALREQ
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	   ELSEIF (COMMAND.EQ.X2STMES_RELAY_REQ) THEN !RELAY CONF REQ
	      STATUS=X2ERR_RELAY_CONF
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
C V08
         ELSEIF (COMMAND.EQ.X2STMES_BCST_REQ) THEN !BCST CONF REQ
            STATUS=X2ERR_BCST_STN_CONF
            LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
            CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
C END V08
	   ELSE
	      STATUS=X2ERR_STTN_INV_CMD    ! OTHER UNKNOWN COMMAND STAT
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      STATION_NO=-1
	      TERMINAL_NO=-1
	   ENDIF
        ELSEIF ((DATA_TYPE.EQ.X2STMES_DATATYPE_RESET) .OR.
     *          (DATA_TYPE.EQ.X2STMES_DATATYPE_RESET2)) THEN
           IF(CONN_TYPE.NE.X2XSCT_ASYPVC .AND.
     *        CONN_TYPE.NE.X2XSCT_USAT_PVC) STATION_NO=0
	   STATUS=X2ERR_RESET
	   LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	   CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	              X2STMES_RESET_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
        ELSEIF ((DATA_TYPE.EQ.X2STMES_DATATYPE_DEFAULT_CONFIG) .OR.
     *         (DATA_TYPE.EQ.X2STMES_DATATYPE_DEFAULT_CONF2)) THEN
           IF(CONN_TYPE.NE.X2XSCT_ASYPVC .AND.
     *        CONN_TYPE.NE.X2XSCT_USAT_PVC)  STATION_NO=0
	   STATUS=X2ERR_DEF_CONFREQ
	   LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	   CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	              X2STMES_RESET_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	ELSEIF (DATA_TYPE.EQ.X2STMES_DATATYPE_RELAY_ACK) THEN
	   STATUS=X2ERR_RELAY
	   LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	   HEADER_LEN=STATION_LEN-MESSAGE_LEN
	   CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                  HEADER_LEN,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	ELSE
	   STATUS=X2ERR_STTN_INV_TYPE      !SOME OTHER UNKNOWN DATA TYPE
	      LAYER='00010000'X*X2X_MESTYP_CMD+256*X2X_TRATYP_STTN
	      CALL X2MSG(LAYER,STATUS,STATION_NO,TERMINAL_NO,BUFFER,
     *	                 X2STMES_DATA-1,MESSAGE,BUF_SSAP,MESSAGE_LEN,
     *                   ADR_LEN,STATION_ADR)
	      TERMINAL_NO=-1
	      STATION_NO=-1
	ENDIF
C
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	       TYPE *,'LEAVING X2RCVSTN ',STATION_NO,TERMINAL_NO,
     *	              DEST_LAYER,(MESSAGE(I),I=1,3),X2X_PTLMES(STATUS)
	RETURN
	END
