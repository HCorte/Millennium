C  GXSRC:IPSSIM.FOR
C
C V02 17-JUN-2005 FRP Modify for IPS Distribution.
C V01 20-NOV-2000 UXN Initial release (produced from REPPRO)
C
C Instant transaction simulator.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, West Greenwich, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
        PROGRAM IPSSIM
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:PROCOM.DEF'
        INCLUDE 'INCLIB:DESTRA.DEF'
        INCLUDE 'INCLIB:TASKID.DEF'
        INCLUDE 'INCLIB:QUECOM.DEF'
        INCLUDE 'INCLIB:APUCOM.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
C
	BYTE OUTBUF(1024)
C
        INTEGER*4 ST, opt, BUF,MESLEN
        INTEGER*4 SER/1/,I,IFILENAME(6)
        CHARACTER*24 CFILENAME
        EQUIVALENCE(IFILENAME,CFILENAME)
        LOGICAL   EOF
C
        CALL COPYRITE
        CALL SNIF_AND_WRKSET
C
C
	P(SIMLAT) = 1
C
C
	TYPE*,IAM(),'1 - Input from TMF file'
	TYPE*,IAM(),'2 - Input from instant tickets file'
	TYPE*,IAM()
	CALL INPNUM('Enter option',OPT,1,2,ST)
	IF(ST.NE.0) CALL GSTOP(GEXIT_OPABORT)

	CALL PRMTEXT('Enter input file name ',CFILENAME,I)
	IF(OPT.EQ.1) THEN
           CALL OPENW(1,IFILENAME,4,0,0,ST)
           CALL TOPEN(1)
      ELSEIF(OPT.EQ.2) THEN
	   OPEN(UNIT=1,FILE=CFILENAME,IOSTAT=ST,STATUS='OLD')
      	   IF(ST.NE.0) THEN
		 TYPE*,IAM(),CFILENAME,' open error, status>',ST
		 CALL GSTOP(GEXIT_FATAL)
	   ENDIF
      ELSE
	    TYPE*,IAM(),'Not implemented'
	    CALL GSTOP(GEXIT_FATAL)
      ENDIF
C
C TOP OF MAIN LOOP.  THE REAL WORK IS DONE BY 'GET_NEXT_INSTANT()', WHICH
C SCANS THROUGH THE TM AND RETURNS VALID CROSS SYSTEM INSTANT TRANSACTIONS
C TO THIS PROCESS. THIS ROUTINE ALSO GETS THE NEEDED PROCOM BUFFER.
C
10      CONTINUE
        CALL GET_NEXT_INSTANT(TRABUF,SER,EOF,ST,OPT)
        IF(EOF) CALL GSTOP(GEXIT_SUCCESS)
        IF(ST.NE.0) THEN
          TYPE *,IAM()
          TYPE *,IAM(),'Error reading the TM file, ST=',ST
          TYPE *,IAM()
          CALL GSTOP(GEXIT_FATAL)
        ENDIF
C
	CALL THROTTLER()
	CALL NEXT_INS_MSG(OUTBUF,TRABUF, MESLEN)
	
D	TYPE*,'TER',TRABUF(TTER)
D	TYPE*,'GAM',TRABUF(TIGAM1)
D	TYPE*,'PCT',TRABUF(TIPCK1)
D	TYPE*,'VRN',TRABUF(TIVRN1)
D	TYPE*,'LTX',TRABUF(TILTX1)
D	GOTO 10
C
C QUEUE TRANSACTION TO DISPAT
C
100	CONTINUE
	CALL GETBUF(BUF)
        IF(BUF.LE.0) THEN
	   CALL XWAIT(1,2,ST) 
	   GOTO 100
	ENDIF

	HPRO(SIMLTR,BUF)=TRABUF(TTER)
        HPRO(SIMHTR,BUF)=TRABUF(TTER)
        HPRO(SIMMOD,BUF)=-999
        HPRO(TERNUM,BUF)=TRABUF(TTER)
        HPRO(INPLEN,BUF)=MESLEN
        HPRO(TRCODE,BUF)=TYPREG
C
	CALL MOVBYT(OUTBUF,1,BPRO(1,BUF),BINPTAB,MESLEN)
C
110	CONTINUE
        CALL QUEINP(BUF,ST)	
	IF(ST.NE.0) THEN
	    CALL XWAIT(1,2,ST)	    
	    GOTO 110
	ENDIF

        GOTO 10
        END
C
C **************************************************************************
C
C SUBROUTINE TO ACT AS A THROTTLE FOR THIS REPLAY PROCESSING TASK.
C
        SUBROUTINE THROTTLER
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSDEFINE.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:PROCOM.DEF'
        INCLUDE 'INCLIB:QUECOM.DEF'
        INCLUDE 'INCLIB:TASKID.DEF'
        INCLUDE 'INCLIB:CRSCOM.DEF'
        INCLUDE 'INCLIB:GLIST.DEF'
C
        INTEGER*4 PENDING,ST
	INTEGER*4 ADDED, IN_QUEUE
	INTEGER*4 MAX_IN_CRSPRO
	PARAMETER(MAX_IN_CRSPRO=TCBUFMAX/2)
C
	ADDED = QUETAB(GLIST_ABL_CNT,CRS)
5	CONTINUE
	IN_QUEUE = ADDED - QUETAB(GLIST_RTL_CNT,CRS)
	IF(IN_QUEUE.GE.MAX_IN_CRSPRO) THEN
	   CALL XWAIT(50,1,ST)
	   GOTO 5
	ENDIF

50      CONTINUE
        PENDING=CRSCNT(1)-CRSCNT(2)
	IF(PENDING.LT.0) PENDING = -PENDING
        IF(PENDING + 10 .GT.P(MAXCRS)) THEN   !IF TOO MANY PENDING, WAIT 25 MSEC
          CALL XWAIT(25,1,ST)           !AND CHECK AGAIN.
          GOTO 50
        ENDIF

        IF(P(TSTNUM).NE.0) CALL XWAIT(P(TSTNUM),1,ST)
        RETURN
        END
C
C **************************************************************************
C
C SUBROUTINE TO SCAN THE TM FILE AND RETURN THE NEXT VALID CROSS SYSTEM
C INSTANT TRANSACTION.
C **************************************************************************
C
C=======OPTIONS /CHECK=NOOVERFLOW
        SUBROUTINE GET_NEXT_INSTANT(TRABUF,SER,EOF,ST,FILTYP)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:DESTRA.DEF'
        INCLUDE 'INCLIB:DESPAR.DEF'
        INCLUDE 'INCLIB:PRMLOG.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
C
	INTEGER*4 SREP_LASTPWD(NUMAGT)
	DATA SREP_LASTPWD/NUMAGT*0/
	COMMON/SREPPWD/ SREP_LASTPWD
	INTEGER*4 FILTYP
	INTEGER*4 SIGNED_ON(NUMAGT)/NUMAGT*0/
C
	INTEGER*4 CBUF(CDLEN)
        INTEGER*4 SER,ST,LOGREC(LREC*3)
        LOGICAL   EOF
C
10      CONTINUE

	IF(FILTYP.EQ.1) THEN
           CALL READTMF(LOGREC,SER,EOF)
           CALL LOGTRA(TRABUF,LOGREC)
	ELSE
	   CALL IPS_GET_TICKET(TRABUF,EOF)
	ENDIF

        IF(EOF) RETURN
C
	IF(TRABUF(TTYP).EQ.TCMD) THEN
	   IF(TRABUF(TCMTYP).EQ.TCPAR .AND.
     *        TRABUF(TCMNUM).EQ.SUPINS) THEN
              CBUF(1)=SUPINS
              CBUF(2)=TRABUF(TCMNEW)
              CBUF(3)=TCPAR
              CBUF(6)='IPSS'
20	      CONTINUE
              CALL QUECMD(CBUF,ST)
	      IF(ST.NE.0) THEN
	         CALL XWAIT(1,2,ST)
		 GOTO 20
	      ENDIF
           ENDIF
        ELSEIF(TRABUF(TTYP).EQ.TSPE .OR. 
     *         (FILTYP.EQ.2 .AND. SIGNED_ON(TRABUF(TTER)).EQ.0)) THEN
	   IF(TRABUF(TSFUN).EQ.TSON .OR.
     *         (FILTYP.EQ.2 .AND. SIGNED_ON(TRABUF(TTER)).EQ.0)) THEN
              CBUF(1)=1
              CBUF(2)=SIGNON
              CBUF(3)=TCAGT
              CBUF(5)=TRABUF(TTER)
              CBUF(6)='IPSS'
30	      CONTINUE
              CALL QUECMD(CBUF,ST)
	      IF(ST.NE.0) THEN
	         CALL XWAIT(1,2,ST)
		 GOTO 30
	      ENDIF
	      SIGNED_ON(TRABUF(TTER)) = 1
	   ELSEIF(TRABUF(TSFUN).EQ.TDLV) THEN
              IF(TRABUF(TSNEW).EQ.0) THEN
                 SREP_LASTPWD(TRABUF(TTER)) = TRABUF(TSDT3)
              ENDIF
	   ENDIF
        ENDIF
	IF(TRABUF(TTYP).NE.TCRS) GOTO 10
        RETURN
        END
C
C **************************************************************************
C BUILD TERMINAL MESSAGE
C **************************************************************************
C
	SUBROUTINE NEXT_INS_MSG(OUTBUF,TRABUF, MESLEN)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:DESTRA.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
        INCLUDE 'INCLIB:CHKSUMCM.DEF'
C

	BYTE OUTBUF(*)
C
	INTEGER*4 OPTIONS, MESLEN, I
C
	INTEGER*4 SREP_LASTPWD(NUMAGT)
	COMMON/SREPPWD/ SREP_LASTPWD
C
        BYTE TER_HEADER(7)
        DATA (TER_HEADER(I),I=1,7)/
     *  Z20,               ! 1   control and sequence
     *  Z00,               ! 2   type and subtype
     *  Z00,               ! 3   checksum
     *  Z00,               ! 4   checksum
     *  Z80,               ! 5   statistics (simulator transaction)
     *  Z00,Z00/           ! 6-7 option flags
C
	INTEGER*4 I4TEMP
	BYTE      I1TEMP(4)
	EQUIVALENCE(I4TEMP,I1TEMP)
C
        INTEGER*4 MYCHKSUM
C	

	CALL MOVBYT(TER_HEADER, 1, OUTBUF,  1, 7)
        MESLEN = 8
C
        OPTIONS = 0
C
        IF(TRABUF(TITYP).EQ.IVAL) THEN
	  OUTBUF(2) = 'DD'X
	  I4TEMP = OPTIONS
	  OUTBUF(6) = I1TEMP(1)
	  OUTBUF(7) = I1TEMP(2)
          IF(TRABUF(TIIND).EQ.0) THEN
	     OUTBUF(MESLEN) = '42'X
          ELSEIF(TRABUF(TIIND).EQ.1) THEN
	     OUTBUF(MESLEN) = '40'X
	  ELSE
	     OUTBUF(MESLEN) = '00'X
	  ENDIF
	  MESLEN = MESLEN + 1

	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIVAGT), 4)
	  MESLEN = MESLEN + 4

	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIVALM), 1)
	  MESLEN = MESLEN + 1

	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIVENV), 4)
	  MESLEN = MESLEN + 4

	  OUTBUF(MESLEN) = TRABUF(TIBCH)
	  MESLEN = MESLEN + 1
	  DO I=0,TRABUF(TIBCH)-1

	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIGAM1+I), 2)
 	     MESLEN = MESLEN + 2

	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIPCK1+I), 4)
	     MESLEN = MESLEN + 4

	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIVRN1+I), 4)
	     MESLEN = MESLEN + 4

	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TILTX1+I), 2)
	     MESLEN = MESLEN + 2

	     IF(TRABUF(TISTS1+I).EQ.89) THEN          ! VALIDATION INQUIRY
                I4TEMP = 0
	     ELSE
	        I4TEMP = TRABUF(TIPRZ1+I)
             ENDIF

	     CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 2)
	     MESLEN = MESLEN + 2

C	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TITIM1+I)/2, 2)
C	     MESLEN = MESLEN + 2

C	     CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TICDC1+I), 2)
C	     MESLEN = MESLEN + 2
	  ENDDO
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
        ELSE IF (TRABUF(TITYP).EQ.ILOT) THEN
	  OUTBUF(2) = 'D2'X
C
	  I4TEMP = 1 
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 2)
	  MESLEN = MESLEN + 2
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLREP), 4)
	  MESLEN = MESLEN + 4
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), SREP_LASTPWD(TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLCLS), 1)
	  MESLEN = MESLEN + 1
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLGAM), 2)
	  MESLEN = MESLEN + 2
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLPCK), 4)
	  MESLEN = MESLEN + 4
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLSTR), 2)
	  MESLEN = MESLEN + 2
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TLEND), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
C
        ELSE IF (TRABUF(TITYP).EQ.ICAR) THEN
	  OUTBUF(2) = 'D8'X
C
	  I4TEMP = 1 
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 2)
	  MESLEN = MESLEN + 2
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCREP), 4)
	  MESLEN = MESLEN + 4
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), SREP_LASTPWD(TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCCLS), 1)
	  MESLEN = MESLEN + 1
C
	  CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCGAM), 2)
	  MESLEN = MESLEN + 2
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCCAR), 4)
	  MESLEN = MESLEN + 4
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCSTA), 4)
	  MESLEN = MESLEN + 4
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TCEND), 4)
	  MESLEN = MESLEN + 4
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
C
        ELSE IF (TRABUF(TITYP).EQ.IQTA.OR.
     *           TRABUF(TITYP).EQ.IINV) THEN

          IF(TRABUF(TITYP).EQ.IQTA) OUTBUF(2) = 'D3'X
          IF(TRABUF(TITYP).EQ.IINV) OUTBUF(2) = 'D4'X

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCLS), 1)
	  MESLEN = MESLEN + 1

          I4TEMP = 0
          CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 1)
	  MESLEN = MESLEN + 1
	  
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TAGT), 4)
	  MESLEN = MESLEN + 4
C
	  I4TEMP = 1
          CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 2)
  	  MESLEN = MESLEN + 2
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRGAM), 1)
	  MESLEN = MESLEN + 1
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRNXT2), 4)
	  MESLEN = MESLEN + 4
	
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRNXT1), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
C
        ELSE IF (TRABUF(TITYP).EQ.IFIN) THEN
	  OUTBUF(2) = 'D5'X

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRTYP), 1)
	  MESLEN = MESLEN + 1

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRSUB), 1)
	  MESLEN = MESLEN + 1
         
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCHN), 4)
	  MESLEN = MESLEN + 4
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), SREP_LASTPWD(TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2
C
	  IF(TRABUF(TRTYP).EQ.IPSET) THEN
             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCON1), 2)
	     MESLEN = MESLEN + 2

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCON2), 4)
	     MESLEN = MESLEN + 4
	  ELSEIF(TRABUF(TRTYP).EQ.IADJR) THEN
             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCON1), 4)
	     MESLEN = MESLEN + 4

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCON2), 4)
	     MESLEN = MESLEN + 4

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TRCON3), 2)
	     MESLEN = MESLEN + 2
          ENDIF
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
        ELSEIF(TRABUF(TITYP).EQ.IEST) THEN
	  OUTBUF(2) = 'DD'X
          
	  MESLEN = 5
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TISFT), 4)
	  MESLEN = MESLEN + 4
C
	  MESLEN = MESLEN - 1
C
      	  OUTBUF(3) = 0
      	  OUTBUF(4) = 0
	  I4CCITT   = 0
      	  CALL GETCCITT(OUTBUF,1,MESLEN-1,MYCHKSUM)
      	  I4CCITT = MYCHKSUM
      	  OUTBUF(3) = I1CCITT(2)
      	  OUTBUF(4) = I1CCITT(1)
        ELSEIF(TRABUF(TITYP).EQ.ISON) THEN
	  OUTBUF(2) = 'D9'X
         
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TAGT), 4)
	  MESLEN = MESLEN + 4

          CALL HOST_TO_TERM(OUTBUF(MESLEN), AGTTAB(APSNUM,TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
C
      	  OUTBUF(3) = 0
      	  OUTBUF(4) = 0
	  I4CCITT   = 0
      	  CALL GETCCITT(OUTBUF,1,MESLEN-1,MYCHKSUM)
      	  I4CCITT = MYCHKSUM
      	  OUTBUF(3) = I1CCITT(2)
      	  OUTBUF(4) = I1CCITT(1)
        ELSEIF(TRABUF(TITYP).EQ.ISOF) THEN
	  OUTBUF(2) = 'DA'X
         
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TAGT), 4)
	  MESLEN = MESLEN + 4

          CALL HOST_TO_TERM(OUTBUF(MESLEN), AGTTAB(APSNUM,TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
        ELSE IF (TRABUF(TITYP).EQ.IMNU) THEN
	  OUTBUF(2) = 'D6'X

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TAGT), 4)
	  MESLEN = MESLEN + 4

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIBCH), 2)
	  MESLEN = MESLEN + 2

	  DO I=0,TRABUF(TIBCH)-1

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TSGAM+I), 2)
	     MESLEN = MESLEN + 2

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TSQTY+I), 2)
	     MESLEN = MESLEN + 2

	  ENDDO         
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
C
        ELSE IF (TRABUF(TITYP).EQ.IORD) THEN
	  OUTBUF(2) = 'D7'X

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TGPGAM), 2)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TGPNXT), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)
	  	  
        ELSE IF (TRABUF(TITYP).EQ.ICNF) THEN
	  OUTBUF(2) = 'DC'X

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIINV2), 2)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIINV3), 4)
	  MESLEN = MESLEN + 4
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)

        ELSE IF (TRABUF(TITYP).EQ.IGTB) THEN
	  OUTBUF(2) = 'DF'X
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIGMC), 1)
	  MESLEN = MESLEN + 1

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIGMN+0), 2)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIGMN+1), 2)
	  MESLEN = MESLEN + 2
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)

        ELSE IF (TRABUF(TITYP).EQ.IISS) THEN
	  OUTBUF(2) = 'D1'X
C
	  I4TEMP = 1 
          CALL HOST_TO_TERM(OUTBUF(MESLEN), I4TEMP, 1)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIREP), 4)
	  MESLEN = MESLEN + 4

          CALL HOST_TO_TERM(OUTBUF(MESLEN), SREP_LASTPWD(TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TINUM), 1)
	  MESLEN = MESLEN + 1

	  DO I=0,TRABUF(TINUM)-1

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIGAM+I), 2)
	     MESLEN = MESLEN + 2

             CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIPCK+I), 2)
	     MESLEN = MESLEN + 2

	  ENDDO         
C
	  MESLEN = MESLEN - 1
          CALL SETCHKSUM(OUTBUF,TRABUF(TTER),MESLEN)

        ELSE IF (TRABUF(TITYP).EQ.IFSESON) THEN
	  OUTBUF(2) = 'DB'X
C
          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIFSETYP), 1)
	  MESLEN = MESLEN + 1

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIFSEREP), 4)
	  MESLEN = MESLEN + 4

          CALL HOST_TO_TERM(OUTBUF(MESLEN), SREP_LASTPWD(TRABUF(TTER)), 2)
	  MESLEN = MESLEN + 2

          CALL HOST_TO_TERM(OUTBUF(MESLEN), TRABUF(TIFSECLS), 1)
	  MESLEN = MESLEN + 1
        ENDIF
	END
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C
C=======OPTIONS /CHECK=NOOVERFLOW
        SUBROUTINE SETCHKSUM(OUTBUF,TER,OUTLEN)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:CHKSUMCM.DEF'
C
        BYTE      OUTBUF(*)
        INTEGER*4 OUTLEN,TER
C
        INTEGER*4 MYCHKSUM, CHKLEN
C
        BASECHKSUM = IAND(DAYCDC,'FFFF'X)
        I4CCITT   = IAND(BASECHKSUM+TER,'FFFF'X)
        OUTBUF(3) = I1CCITT(2)
        OUTBUF(4) = I1CCITT(1)
        CHKLEN=OUTLEN-1
        CALL GETCCITT(OUTBUF,1,CHKLEN,MYCHKSUM)
        I4CCITT = MYCHKSUM
        OUTBUF(3) = I1CCITT(2)
        OUTBUF(4) = I1CCITT(1)
C
        RETURN
        END
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
        SUBROUTINE IPS_GET_TICKET(TRABUF,EOF)
        IMPLICIT NONE

        INCLUDE 'INCLIB:SYSDEFINE.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:DESTRA.DEF'

        LOGICAL*4 EOF
        CHARACTER*255 STR

        READ(UNIT=1,FMT='(A)',END=100) STR

        CALL FASTSET(0,TRABUF,TRALEN)

	TRABUF(TTER)   = 1 ! terminal # (can be changed)
        TRABUF(TIBCH)  = 1
        TRABUF(TITYP)  = IVAL
        TRABUF(TTYP)   = TCRS
	TRABUF(TIIND)  = 3
        TRABUF(TICDC1) = DAYCDC
        TRABUF(TITIM1) = P(ACTTIM)

        READ( STR(01:03), *) TRABUF(TIGAM1)
        READ( STR(05:11), *) TRABUF(TIPCK1)
        READ( STR(12:21), *) TRABUF(TIVRN1)
        READ( STR(22:27), *) TRABUF(TILTX1)

        RETURN

100     CONTINUE

        EOF = .TRUE.
        RETURN
        END
