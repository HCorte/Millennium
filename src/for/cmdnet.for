C
C SUBROUTINE CMDNET
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]CMDNET.FOV                                   $
C  $Date::   17 Apr 1996 12:38:32                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C *** Pre-Baseline Source - net_netsub.for ***
C
C V03 08-FEB-11 RXK RLGSER INITIALIZED
C V02 22-OCT-91 TKO Change CALL ABORT to CALL TSKABORT
C V01 01-AUG-90 XXX RELEASED FOR VAX
C  
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode Island,
C and contains confidential and trade secret information. It may not be
C transferred from the custody or control of GTECH except as authorized in
C writing by an officer of GTECH. Neither this item nor the information it
C contains may be used, transferred, reproduced, published, or disclosed,
C in whole or in part, and directly or indirectly, except as expressly
C authorized by an officer of GTECH, pursuant to written agreement.
C
C Copyright 1993 GTECH Corporation. All rights reserved.
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C Purpose: Execute network command
C
C Input:   BUF - BUFFER # WITH DATA
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
C
	SUBROUTINE CMDNET(BUF)
C
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
C
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:DESNET.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
C
C LOCAL DECLARATIONS
C
	INTEGER*4	BUF,
     *			BUF1,
     *			BUFNR,
     *			BWAY,
     *			CHECK_BUF,
     *			COMMAND,
     *			COUNT,
     *			CWAY,
     *			ENASYNC,
     *			I,
     *			OFF,
     *			PATH,
     *			REMOVED(NUMWAY),! REMOVES MASTER NODE FLAG
     *			RLGSER/0/,
     *			SER,
     *			SERMSK		/'3FFFFFFF'X/,
     *			ST,
     *			SYS1,
     *			SYS2,
     *			SYSTEM,
     *			TIMES,
     *			TRCADR,
     *			UNFREEZ(NETSYS, NUMWAY),
     *			VAL,
     *			VALUE
C
	CHARACTER*28	MESSAGE(4)	/'CHECKPOINT FILE ERROR       ',
     *					 'CANNOT FIND VALID CHECKPOINT',
     *					 'TMF ACCESS ERROR            ',
     *					 'INVALID DATE IN CHECKPOINT  '/
C
	CHARACTER*1	BELL	/Z07/	! BEEP !
C
C COMMON AREA DECLARATIONS
C
        COMMON	/TEST_CHECK/	CHECK_BUF
	COMMON	/UNFRZ/		UNFREEZ
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
	BWAY = NETBUF(WAYNR, BUF)			! CURRENT WAY
C
	CALL TSTCHG2(BUF, 0, COUNT)
	IF (COUNT .GT. 1) THEN
10	  CONTINUE
	  CALL EXTRABUF(BUF1, BWAY, ST)
	  IF (ST .EQ. 2) THEN
	    CALL XWAIT(20, 1, ST)
	    GOTO 10
	  ENDIF
C
	  DO 20 I = NCNLEN + 1, NETLEN - 1
	    NETBUF(I, BUF1) = NETBUF(I, BUF)
20	  CONTINUE
C
	  NETFROM(BUF1) = NETFROM(BUF)
	  CHECK_BUF = 101
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  BUF = BUF1
	ENDIF
C
	COMMAND = NETBUF(HDRSIZ+1, BUF)
	PATH    = NETBUF(HDRSIZ+2, BUF)
	VALUE   = NETBUF(HDRSIZ+3, BUF)
	CWAY    = NETBUF(HDRSIZ+4, BUF)
C
	IF (BWAY .NE. CWAY) CALL NOTIFY(TRCADR, NOTCROSS, BWAY, CWAY)
C
	NETBUF(PDEST, BUF) = 0				! FOR ALL SEN DATA
	NETBUF(FDEST, BUF) = 0				! FOR ALL SEN DATA
C
	VAL = VALUE
	SER = NXTSER
	IF (NETATR(BWAY) .EQ. RLG) SER = RLGSER
	IF (COMMAND .EQ. REMLINK)  VAL = SER
C
	CALL NOTIFY(TRCADR, NOTCMD,  COMMAND, CWAY)
	CALL NOTIFY(TRCADR, NOTPATH, PATH,    CWAY)
	CALL NOTIFY(TRCADR, NOTVAL,  VAL,     CWAY)
C
	IF (PATH .GT. NETSYS .OR. PATH .LE. 0) THEN	! INVALID NODE
	  CHECK_BUF = 102
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  CALL NOTIFY(TRCADR, NOTCMD, COMMAND, CWAY)
	  GOTO 9999
	ENDIF
C
	GOTO (100, 200, 300, 400, 500, 600) COMMAND 	! DISPATCH REQUEST
C
	CHECK_BUF=103
	CALL FREEBUF(BUF)				! RELEASE BUFFER
	CALL NOTIFY(TRCADR, NOTCMD, COMMAND, CWAY)	! NOTIFY ABOUT INVL CMD
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C SET SVC MODE ON THE LINK
C
100	CONTINUE
C
C NO CONNECTION OR ALREADY DROPPED
C
	IF (NETROUT(PATH, CWAY) .EQ. ROUNO .OR.
     *      NETSTAT(PATH, CWAY) .LT. 0) THEN
	  CHECK_BUF = 105
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  GOTO 9999
	ENDIF
C
C CHECK IF PHYSICAL CONNECTION DEFINED
C IF CONNECTION IS DEAD AND REQUEST ORIGINATED ON OTHER PROCESSOR
C
	IF (NETSTAT(PATH, CWAY) .LT. 0 .AND.
     *	    NETBUF(PPORG, BUF)  .NE. NODEID) THEN
	  CHECK_BUF = 106
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  GOTO 9999
	ENDIF
C
C EXECUTE COMMAND
C
	NETROUT(PATH, CWAY) = ROUACT
	NETSTAT(PATH, CWAY) = VALUE
	NETBUF(MODE,  BUF)  = DRVMD			! DRIVER COMMAND
C
	CALL TSNDNET(BUF,CWAY)				! SEND NOW TO DRIVER
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C REMOVE LINK
C
200	CONTINUE
C
C REMOVE OWN NODE - KILL THIS SYSTEM
C
	IF (PATH .EQ. NODEID .AND.
     *      VALUE .EQ. NODEID) THEN			! THIS SYSTEM DOWN
C
	  DO 210, OFF = 1, NETSYS			! JUST A LOOP ???
210	  CONTINUE
C
C ENABLE FOR ANYBODY TO GRAB HARDWARE
C
	  IF (NODEID .EQ. NETMASTER(CWAY) .AND. CWAY .EQ. WAYINP) THEN
	    IF (NETBACKUP(CWAY) .NE. 0) THEN
	      CALL OPS(BELL // '*** CMDNET - SET MASTER COMMAND ***' //
     *                 BELL, 1, 0)
	      NETBUF(MODE,     BUF) = CMDMD
	      NETBUF(HDRSIZ+1, BUF) = SETMASTER
	      NETBUF(HDRSIZ+2, BUF) = NETBACKUP(CWAY)
	      NETBUF(HDRSIZ+3, BUF) = 0			! NEW MSTR WON'T ECHO
	      CALL SNDNET(BUF, CWAY)			! SEND SET MASTER SYSTEM
	    ELSE
	      CHECK_BUF = 107
	      CALL FREEBUF(BUF)				! RELEASE BUFFER
	    ENDIF
C
C NOTIFY MASTER NODE
C
	  ELSE
	    NETBUF(PDEST,    BUF) = NODEMASTER(CWAY)
	    NETBUF(FDEST,    BUF) = NODEMASTER(CWAY)
	    NETBUF(MODE,     BUF) = CMDMD
	    NETBUF(HDRSIZ+1, BUF) = REMLINK
	    NETBUF(HDRSIZ+2, BUF) = NODEID
	    CALL SNDNET(BUF, CWAY)			! SEND TO PRIM CONNECT
	  ENDIF
C
C IF NOT ... THIS IS MASTER SYSTEM
C
	  IF (NODEID .EQ. NODEMASTER(CWAY)) THEN
	    CALL NOTIFY(TRCADR, NOTABRT, PATH, CWAY)	! ABORT THIS SYSTEM
	    CALL XWAIT(500, 1, ST)			! WAIT 500 MSEC
	    CALL TSKABORT(8HCMDPRO  , ST)		! ABORT COMMAND PRO
	    CALL TSKABORT(8HTIMER   , ST)		! ABORT TIMER
	    CALL TSKABORT(8HNETLOG  , ST)		! ABORT NETWORK LOGGER
	    CALL TSKABORT(8HDCNPRO  , ST)		! ABORT DECNET PRO
	    CALL TSKABORT(8HDISPAT  , ST)		! ABORT DISPATCHER
	    CALL GSTOP(GEXIT_FATAL)
C
C SET SYSTEM TO SPARE IF NOT MASTER SYSTEM
C
	  ELSE
	    IF (NETBACKUP(WAYINP) .GT. 0) THEN
	      WRITE(5, 9000) ((IAM(), BELL), I = 1, 5)
	      IF (NODEID .EQ. NETBACKUP(CWAY)) NETBACKUP(CWAY) = 0
	    ENDIF
	  ENDIF
	  GOTO 9999
	ENDIF
C
C GENERATE COMMAND ON MASTER SYSTEM
C
	IF (NODEID .EQ. NETMASTER(CWAY) .AND.
     *      NODEID .EQ. NETMASTER(WAYINP))
     *    CALL GAMECMD(REMLINK, PATH, 0, CWAY)
C
	IF (NETROUT(PATH, CWAY) .NE. ROUACT) THEN
	  CHECK_BUF = 108
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	ELSE
	  NETBUF(MODE,     BUF)  = DRVMD		! DRIVER COMMAND
	  NETBUF(HDRSIZ+1, BUF)  = REMLINK		! CLOSE LINK
	  NETBUF(HDRSIZ+2, BUF)  = PATH
	  NETROUT(PATH,    CWAY) = ROUIDLE		! MAKE CONNECTION IDLE
	  NETSTAT(PATH,    CWAY) = -NETSTAT(PATH, CWAY)
	  NETMODE(PATH,    CWAY) = 0
	  CALL TSNDNET(BUF, CWAY)			! SEND NOW TO DRIVER
	ENDIF
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C RESYNCHRONIZATION
C
300	CONTINUE
C
C RESYNCRONIZED SYSTEM LOGIC
C
	VALUE = IAND(VALUE, SERMSK)
	IF (PATH .EQ. NODEID) THEN			! MY OWN REQUEST ECHOED
	  SER = MOD(VALUE, SYSOFF)
	  IF (CWAY .EQ. WAYINP) THEN
		NETMODE(NODEID, CWAY) = FILMD		! SET RECOV MODE NOW
		CALL OPSTXT('!!!????!!!???Restore Being Called!!!????!!!???')
	    CALL RESTORE(SER, ST)			! LAST VALID CHECKPOINT
	    IF (ST .NE. 0) THEN
	      TYPE *, IAM(), BELL,
     *                'CANNOT RESTORE COMMONS FROM LAST GOOD CHECKPOINT'
	      TYPE *, IAM(), BELL, 'ERROR: ', ST, MESSAGE(ST)
	      CALL TSKABORT(8HDCNPRO  ,ST)
	      CALL TSKABORT(8HNETLOG  ,ST)
	      CALL GSTOP(GEXIT_FATAL)
	    ENDIF
	  ELSE
310	    CONTINUE
	    CALL EXTRABUF(BUF1, CWAY, ST)
	    IF (ST .EQ. 2) THEN
	      CALL XWAIT(20, 1, ST)
	      GOTO 310
	    ENDIF
C
	    NETBUF(MODE,     BUF1) = REMMD
	    NETBUF(WAYNR,    BUF1) = CWAY
	    NETBUF(BUFTYP,   BUF1) = RLG
	    NETBUF(HDRSIZ+1, BUF1) = SER
C
	    CALL ABL(BUF1, REMFINISH, ST)
	  ENDIF
C
	  CHECK_BUF = 109
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  GOTO 9999
	ENDIF
C
C MASTER OR INTERMEDIATE NODE LOGIC
C
	IF (NETBUF(PPORG, BUF) .NE. NETMASTER(CWAY)) THEN
C
C NOT ON MASTER ROUTE IT AHEAD
C
	  IF (NODEMASTER(CWAY) .NE. 0) THEN
	    IF (NETSTAT(NODEMASTER(CWAY), CWAY) .EQ. NSTASEC .AND.
     *          NETROUT(NODEMASTER(CWAY), CWAY) .EQ. ROUACT) THEN
	      NETBUF(MODE,     BUF) = CMDMD
	      NETBUF(HDRSIZ+1, BUF) = COMMAND
	      NETBUF(HDRSIZ+2, BUF) = PATH
	      NETBUF(HDRSIZ+3, BUF) = VALUE
	      NETBUF(PDEST,    BUF) = NODEMASTER(CWAY)
	      NETBUF(FDEST,    BUF) = NODEMASTER(CWAY)
	      CALL SNDNET(BUF, CWAY)
	      GOTO 9999
	    ENDIF
	  ENDIF
C
C THIS IS MASTER SYSTEM ...
C RESYNC ADDRESS CANNOT BE HIGHER THAN MASTER LAST COMMAND
C
	  IF (P(LSTCMD) .LT. VALUE) VALUE = P(LSTCMD)
C
	  CALL GAMECMD(RESYNC, PATH, VALUE, CWAY)
	  CALL NOTIFY(TRCADR, NOTRES, PATH, CWAY)
C
C IF SYNCHRONIZATION ENABLED, TRY TO RESYNCHRONIZE
C
	  ENASYNC = NETENA(PATH, CWAY)
	  IF (ENASYNC .EQ. 0 .OR. ENASYNC .EQ. 1) THEN	! IF SYNCH ENABLED
	    NETBUF(PDEST,    BUF) = NETBUF(PPORG, BUF)	! SEND IT TO ORIGINATOR
	    NETBUF(FDEST,    BUF) = NETBUF(PPORG, BUF)	! SEND IT TO ORIGINATOR
	    NETBUF(PPORG,    BUF) = NODEID
	    NETBUF(HDRSIZ+3, BUF) = VALUE
	    CALL SNDNET(BUF, CWAY)			! SEND IT BACK
	    IF (NETROUT(PATH, CWAY) .EQ. ROUACT) THEN	! IF ACTIVE CONNECTION
	      NETMODE(PATH,  CWAY) = FILMD
	      NETRECOV(PATH, CWAY) = RECIN		! RECOVERY IN PROGRESS
	      NETSER(PATH,   CWAY) = VALUE
	      UNFREEZ(PATH,  CWAY) = NETTIMER
     *                             + NET_START_RESYNC	! WAIT BEFORE SENDING
	    ENDIF
	  ELSE
	    CHECK_BUF = 110
	    CALL FREEBUF(BUF)				! RELEASE BUFFER
	  ENDIF
	  GOTO 9999
	ENDIF
C
	IF (NETROUT(PATH, CWAY) .NE. ROUACT) THEN	! IF NO ACTIVE CONNECT
	  CHECK_BUF=111
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  GOTO 9999
	ENDIF
C
C THIS SYSTEM HAS TO RESYNCHRONIZE SYSTEM "PATH"
C
	NETBUF(PDEST,  BUF)  = PATH
	NETBUF(FDEST,  BUF)  = PATH
	NETSER(PATH,   CWAY) = VALUE
	NETMODE(PATH,  CWAY) = FILMD
	NETRECOV(PATH, CWAY) = RECIN
	NETTIM(PATH,   CWAY) = NETTIMER
	UNFREEZ(PATH,  CWAY) = NETTIMER + NET_START_RESYNC
	CALL SNDNET(BUF, CWAY)
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C SET SYSTEM TO MASTER
C
400	CONTINUE
C
	IF (NETMASTER(CWAY) .EQ. PATH) THEN
	  CHECK_BUF = 112
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
	  GOTO 9999
	ENDIF
C
	IF (NODEID .NE. PATH) THEN			! NOT YOUR SYSTEM
C
C SHOULD SWITCH ANY NODES THAT ARE IDLE ON THAT SYSTEM AND
C PREVIOUS MASTER WAS CONNECTED TO YOUR SYSTEM
C
	  CHECK_BUF = 113
	  CALL FREEBUF(BUF)				! RELEASE BUFFER
C
C ON OLD MASTER DISCONNECT ALL CONECTIONS
C
	  IF (NODEID .EQ. NETMASTER(CWAY)) NETMASTER(CWAY) = PATH
C
	  SYS1 = NETMASTER(CWAY)
	  SYS2 = NETMASTER(CWAY)
	  IF (NETMASTER(CWAY) .EQ. PATH) THEN		! ON OLD MASTER
	    SYS1 = 1
	    SYS2 = NETSYS
	  ENDIF
C
	  DO 420 BWAY = 1, NUMWAY
	    REMOVED(BWAY) = 0
	    DO 410 SYSTEM = SYS1, SYS2
	      IF (NETROUT(SYSTEM, BWAY) .GE. ROUIDLE) THEN	! IF CONN ACT
		IF (SYSTEM .EQ. NETMASTER(CWAY)) THEN
		  REMOVED(BWAY) = NETOPN(SYSTEM, BWAY)
		  IF (NODEID .EQ. NETMASTER(BWAY) .AND.
     *                SYSTEM .EQ. PATH) NETMASTER(BWAY) = PATH
C
C IF CAME ON LOG WAY, DO NOT MARK AS REMOVED IF YOU ARE NOT MASTER LOG WAY
C
		  IF (NETATR(CWAY) .EQ. RLG .AND. WAYLOG .GT. 0) THEN
		    IF (NODEID .NE. NETMASTER(WAYLOG)) REMOVED(BWAY) = 0
		  ENDIF
		ENDIF
C
C IF CAME ON LOG WAY AND YOU ARE NOT MASTER OF LOG WAY,  DO NOT CONNECT BACK
C
		NETSTAT(SYSTEM,BWAY)=IABS(NETSTAT(SYSTEM,BWAY))
C
		IF (NETROUT(SYSTEM, BWAY) .EQ. ROUACT) THEN
405		  CONTINUE
		  CALL EXTRABUF(BUF, BWAY, ST)
		  IF (ST .EQ. 2) THEN
		    CALL XWAIT(10, 1, ST)
		    GOTO 405
		  ENDIF
C
C REMEMBER CONNECTIONS THAT HAVE TO BE REOPENED TO NEW MASTER
C
		  NETREM(SYSTEM,   BWAY) = -1
		  NETBUF(MODE,     BUF)  = DRVMD
		  NETBUF(HDRSIZ+1, BUF)  = REMLINK
		  NETBUF(HDRSIZ+2, BUF)  = SYSTEM
		  NETBUF(HDRSIZ+4, BUF)  = BWAY
C
		  CALL SNDNET(BUF, BWAY)		! SND VIA ALL PRIM LINKS
		  NETROUT(SYSTEM, BWAY) = ROUIDLE	! MAKE CONNECTION IDLE
		ENDIF
	      ENDIF
410	    CONTINUE
420	  CONTINUE
C
C IF ANYTHING REMOVED, ADD LINK TO THE SYSTEM IT WAS REMOVED FROM
C
	  TIMES = 0					! T/O CNT FOR REM LINK
C
	  DO 430 BWAY = 1, NUMWAY
	    IF (REMOVED(BWAY) .NE. 0) THEN		! CONNECTION WAS DROPPED
425	      CONTINUE
	      CALL EXTRABUF(BUFNR, BWAY, ST)
	      IF (ST .EQ. 2) THEN
		CALL XWAIT(50, 1, ST)
		GOTO 425
	      ENDIF
C
C WAIT BEFORE ADDLINK (AFTER REMLINK)
C
426	      CONTINUE
	      IF (NETREM(NETMASTER(CWAY), BWAY) .NE. 0 .AND.
     *            TIMES .LE. 50) THEN
		CALL XWAIT(100, 1, ST)
		TIMES = TIMES + 1
		GOTO 426
	      ENDIF
C
	      NETBUF(MODE,     BUFNR) = DRVMD
	      NETBUF(HDRSIZ+1, BUFNR) = ADDLINK
	      NETBUF(HDRSIZ+2, BUFNR) = PATH
	      NETBUF(HDRSIZ+4, BUFNR) = BWAY
C
	      IF (NETATR(CWAY) .EQ. INP) THEN		! IF CAME ON INPUT WAY
		NETSTAT(PATH, BWAY) = NSTASEC
	      ELSE					! SAME STAT AS PREV MSTR
		NETSTAT(PATH, BWAY) = NETSTAT(NETMASTER(CWAY), BWAY)
	      ENDIF
C
	      NETBUF(HDRSIZ+3, BUFNR) = NETSTAT(PATH, BWAY)
	      NETROUT(PATH,    BWAY)  = ROUACT
	      CALL SNDNET(BUFNR, BWAY)			! SWITCH MODE
	    ENDIF
430	  CONTINUE
C
	  IF (NETBACKUP(CWAY) .EQ. PATH) NETBACKUP(CWAY) = 0
C
	  NETMASTER(CWAY) = PATH			! TO LET 'NOT MASTER'
C							! WHO'S NOT EITHER
C							! BECOMING THE MASTER
C							! WHICH NODE IS NOW NEW
							! MASTER
	  GOTO 9999
	ENDIF
C
C SWITCH YOUR SYSTEM TO PRIMARY ON THE INPUT PATH
C
	CHECK_BUF = 114
	CALL FREEBUF(BUF)				! RELEASE BUFFER
C
	IF (NETATR(CWAY) .EQ. INP)
     *    CALL GRABNET(0, VALUE, CWAY)			! TAKEOVER ON INP WAY
C							! AND IF VALUE =1 SEND
C							! SETMASTER TO OLD MAST
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C BROADCAST (REMOVED)
C
500	CONTINUE
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C REMOTE CLOSED COMMAND
C
600	CONTINUE
C
	REMCLOSED(NETFROM(BUF)) = -1
C
	CHECK_BUF = 115
	CALL FREEBUF(BUF)				! RELEASE BUFFER
C
	GOTO 9999
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C FORMAT STATEMENTS
C
9000	FORMAT(X, A, A, '*******************************************',/,
     *         X, A, A, '*    DUE TO NETWORK DIFFICULTIES THE      *',/,
     *         X, A, A, '*   TAKEOVER FEATURE HAS BEEN DISABLED    *',/,
     *         X, A, A, '*  THIS SYSTEM IS NO LONGER A HOT BACKUP  *',/,
     *         X, A, A, '*******************************************')
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C RETURN & END
C
9999	CONTINUE
C
	RETURN
	END
