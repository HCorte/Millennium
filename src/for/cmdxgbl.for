C
C SUBROUTINE CMDXGBL
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]CMDXGBL.FOV                                  $
C  $Date::   17 Apr 1996 12:39:34                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - cmdxsub.for;1 **
C
C CMDXSUB.FOR
C
C	 3-MAR-94   JWE	Add broadcast server code
C
C V06 21-AUG-95 DAS Added changes for Background loads.
C V05 29-DEC-94 WJK MOVE UNSOLICITED STATION CONNECT AND DISCONNECT FROM GLOBAL
C                   TO STATION CLASS
C V04 20-DEC-94 GPR Integrate UK changes into X2X Baseline
C V03 01-NOV-94 GPR Get rid X2XGBL_COMTYP
C V02 25-JUL-94 SCD Allow configuration of new GVTs during an online game
C V01 01-DEC-91 DAS RELEASED FOR VAX (NETHERLANDS)
C
C This module contains the routines which are utilized to
C load the X2X distributed network values into memory (only
C if issued through CMDPRO).
C
C Modules contained:
C
C     CMDXGBL(FIELD,ALLREC,ADDFLG)
C     CMDXNPC(FIELD,ALLREC,ADDFLG)				
C     CMDXLPC(FIELD,ALLREC,ADDFLG)
C     CMDXSTN(FIELD,ALLREC,ADDFLG)				
C     CMDXTER(FIELD,ALLREC,ADDFLG)				
C     CMDXBRO(FIELD,ALLREC,ADDFLG)
C     CMDXSCL(FIELD,ALLREC,ADDFLG)				
C     CMDXTTN(FIELD,ALLREC,ADDFLG)
C     CMDXGRP(FIELD,ALLREC,ADDFLG)
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE CMDXGBL(FIELD,ALLREC,ADDFLG)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PRMPRO.DEF'
	INCLUDE 'INCLIB:X2XREL.DEF'
	INCLUDE 'INCLIB:X2XGBL.DEF'
C
	INTEGER*4   FIELD       !Modified field
	INTEGER*4   ALLREC(128)  !Record buffer
	INTEGER*4   ADDFLG      !Addition of new terminal
	INTEGER*4   MASK
	INTEGER*4   START_LOC	!%Loc OF FIRST field in Global record	!V04
	INTEGER*4   BYTES_PER_FIELD	!Bytes in a field		!V04
	PARAMETER   (BYTES_PER_FIELD=4)
C
C STORE THE INFORMATION INTO COMMON.
C
	CALL FASTMOV(ALLREC,X2XGBL_REC,128)
C
C	***** Start V04 changes *****
C
	START_LOC = %LOC(X2XGBL_SAP)
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_SAP)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_GAME_SAP = X2XGBL_SAP
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DEBUG)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_DEBUG = X2XGBL_DEBUG
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_STNDIS)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_GLOBAL_STATION_DISCONNECT = X2XGBL_STNDIS
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_FEDIS)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_GLOBAL_FE_DISCONNECT = X2XGBL_FEDIS
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DELACK)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_DELIVERY_ACK = X2XGBL_DELACK
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DELERR)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_DELIVERY_ERR = X2XGBL_DELERR
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_RTYLIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XPN_OUT_RETRY_LIMIT = X2XGBL_RTYLIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_RTYTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XPN_OUT_RETRY_INTERVAL = X2XGBL_RTYTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_OUTTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XPN_OUT_DURATION_TIMOUT = X2XGBL_OUTTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_INTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XPN_IN_DURATION_TIMOUT = X2XGBL_INTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_XMAXSIZ)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XE_MAX_SIZE = X2XGBL_XMAXSIZ
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_XMAXCNT)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XE_MAX_CNT = X2XGBL_XMAXCNT
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_XSNDINT)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XE_SEND_INTERVAL = X2XGBL_XSNDINT
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MAINT_OPTIONS)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XE_MAINT_OPTIONS = X2XGBL_MAINT_OPTIONS
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_XSNDBEG)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XE_RESEND_BEGIN = X2XGBL_XSNDBEG
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_UNSFECON)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_UNSOLICIT_FE_CONNECT = X2XGBL_UNSFECON
C
C V05	IF(FIELD.EQ.
C V05 *	  ((%LOC(X2XGBL_UNSSTCON)-START_LOC)/BYTES_PER_FIELD)+1)  
C V05 *	  X2X_UNSOLICIT_STATION_CONNECT = X2XGBL_UNSSTCON
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_UNSFEDIS)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_UNSOLICIT_FE_DISCONNECT = X2XGBL_UNSFEDIS
C
C V05	IF(FIELD.EQ.
C V05 *	  ((%LOC(X2XGBL_UNSSTDIS)-START_LOC)/BYTES_PER_FIELD)+1)  
C V05 *	  X2X_UNSOLICIT_STATION_DISCONNEC  = X2XGBL_UNSSTDIS
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_UNSDEL)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_UNSOLICIT_DELIVER = X2XGBL_UNSDEL
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MAXMES)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_MAXMES_CNT = X2XGBL_MAXMES
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MESLEN)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_MAXMES_LEN = X2XGBL_MESLEN
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DELAY)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_SEND_DELAY = X2XGBL_DELAY
C
        IF((FIELD.EQ.
     *	    ((%LOC(X2XGBL_GAMSTAT)-START_LOC)/BYTES_PER_FIELD)+1)
     *     .AND.(X2XGBL_GAMSTAT.EQ.X2X_GAMES_SHUTDOWN.OR.
     *	         P(SYSTYP).EQ.LIVSYS)) 
     *    X2X_GAME_STATE = X2XGBL_GAMSTAT
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_PROTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XPRO_FLUSH_INT = X2XGBL_PROTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MGRTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_LOOP_DELAY = X2XGBL_MGRTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_SAPTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_LOOP_SAP_DELAY = X2XGBL_SAPTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MANTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_LOOP_MAINTENANCE_DELAY = X2XGBL_MANTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_STSTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XS_STATS_TIME = X2XGBL_STSTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_THRES1)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_THRESHOLD(1) = X2XGBL_THRES1
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_THRES2)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_THRESHOLD(2) = X2XGBL_THRES2
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_THRES3)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_THRESHOLD(3) = X2XGBL_THRES3
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_THRES4)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_THRESHOLD(4) = X2XGBL_THRES4
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_GAMQUE)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_GAME_QUE = X2XGBL_GAMQUE
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_NETSTAT)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  THEN
	  IF(X2XGBL_NETSTAT.EQ.0) THEN
	    X2X_STATION_ATRIBUTES=
     *	      IOR(X2X_STATION_ATRIBUTES,X2XSA_STATS)
	  ELSE
	    MASK=X2XSA_AUTO_STATS
	    X2X_STATION_ATRIBUTES=
     *	      IAND(X2X_STATION_ATRIBUTES,MASK)
	  ENDIF
	ENDIF
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_AUTOUPD)-
     *	    START_LOC)/BYTES_PER_FIELD)+1) THEN
	  IF(X2XGBL_AUTOUPD.EQ.0) THEN
	    X2X_STATION_ATRIBUTES=
     *	      IOR(X2X_STATION_ATRIBUTES,X2XSA_AUTO_STATS)
	  ELSE
	    MASK=X2XSA_STATS
	    X2X_STATION_ATRIBUTES=
     *	      IAND(X2X_STATION_ATRIBUTES,MASK)
	  ENDIF
	ENDIF
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_MAXSEG)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XG_MAXSEG = X2XGBL_MAXSEG
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_RTYCNT)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XG_RTYCNT = X2XGBL_RTYCNT
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_RTYINT)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XG_RTYINT = X2XGBL_RTYINT
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_ACKTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XG_ACKTIM = X2XGBL_ACKTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_FWDTIM)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2XG_FWDTIM = X2XGBL_FWDTIM
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_CHK_NEW_STATIONS_CONNECT)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_CHK_NEW_STATIONS_CONNECT=
     *	    X2XGBL_CHK_NEW_STATIONS_CONNECT
C
        IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_NUMNODES)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_NUM_NODES = X2XGBL_NUMNODES
C
        IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DEFCHK)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_DEF_CHKSUM = X2XGBL_DEFCHK
C
        IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DISMESS)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_FE_SEND_DISCONNECT_FLAG = X2XGBL_DISMESS
C
        IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_DISMESS_TIMOUT)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_FE_DISCONNECT_TIMOUT = X2XGBL_DISMESS_TIMOUT
C
        IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_RELPRI)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_REL_PRI = X2XGBL_RELPRI
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_BCST_ENABLE)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_BCST_ENABLE = X2XGBL_BCST_ENABLE                 !V11
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_BCST_RETRY_INTERVAL)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_BCST_RETRY_INTERVAL = X2XGBL_BCST_RETRY_INTERVAL !V11
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_BCST_RETRY_LIMIT)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_BCST_RETRY_LIMIT = X2XGBL_BCST_RETRY_LIMIT       !V11
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_BCST_AUTO_REPORT)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_BCST_AUTO_REPORT = X2XGBL_BCST_AUTO_REPORT       !V11
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_BCST_ROUTE)-START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_BCST_ROUTE = X2XGBL_BCST_ROUTE                   !V11
C
	IF(FIELD.EQ.
     *	  ((%LOC(X2XGBL_GVT_CFG_ENABLE)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_GVT_CFG_ENABLE = X2XGBL_GVT_CFG_ENABLE		 !V02
C
	IF (FIELD.EQ.
     *	  ((%LOC(X2XGBL_X2X_LOG_ENABLE)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_LOG_ENABLE = X2XGBL_X2X_LOG_ENABLE
C
	IF (FIELD.EQ.
     *	  ((%LOC(X2XGBL_RELAY_LOG_ENABLE)-
     *	    START_LOC)/BYTES_PER_FIELD)+1)  
     *	  X2X_RELAY_LOG_ENABLE = X2XGBL_RELAY_LOG_ENABLE
C
C	***** End V04 changes *****
C V05
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_DLL_USE_ENVELOPE)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_DLL_USE_ENVELOPE=X2XGBL_DLL_USE_ENVELOPE
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_REQ_BACKGROUND_DELAY)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_REQ_BACKGROUND_DELAY=X2XGBL_REQ_BACKGROUND_DELAY
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_DLL_ENABLE_BACKGROUND)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_DLL_ENABLE_BACKGROUND=X2XGBL_DLL_ENABLE_BACKGROUND
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_DLL_BACKGROUND_FLAG)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_DLL_BACKGROUND_FLAG=X2XGBL_DLL_BACKGROUND_FLAG
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_ENABLE_TEST_DLL)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_ENABLE_TEST_DLL=X2XGBL_ENABLE_TEST_DLL
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_REQ_FORGROUND_DELAY)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_REQ_FORGROUND_DELAY=X2XGBL_REQ_FORGROUND_DELAY
C
        IF (FIELD.EQ.
     *    ((%LOC(X2XGBL_DLL_ENABLE_FORGROUND)-
     *      START_LOC)/BYTES_PER_FIELD)+1)
     *    X2X_DLL_ENABLE_FORGROUND=X2XGBL_DLL_ENABLE_FORGROUND
C
C
C
C V05
C
	RETURN
	END
