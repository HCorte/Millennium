C
C SUBROUTINE FILSRV
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]FILSRV.FOV                                   $
C  $Date::   17 Apr 1996 13:10:12                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - net_filsrv.for;1 **
C
C FILSRV.FOR
C
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C V01 01-FEB-89 XXX INITIAL RELEASE FOR SWEDEN
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE FILSRV(BUF,NODE)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C+
C  NAME: FILSRV.FTN   REV MAY/86 FOR CALIF MK- GTECH
C
C  INPUT: BUF, BUFFER # OF THE CURRENT JOB I AM PROCESSING.
C
C  OUTPUT: BUFFER FILLED
C
C
C-
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:DESNET.DEF'
	INCLUDE 'INCLIB:PRMLOG.DEF'
	INCLUDE 'INCLIB:DESLOG.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
C
	INTEGER*4 BUF       ! BUFFER #
	INTEGER*4 STATUS
	INTEGER*4 LBUF(LMUREC)  !LOG RECORD
	INTEGER*4 LSTSND(NETSYS)
C
	INTEGER*4 DONTCARE, TKNXT, LENGTH, NXTREC, SERIAL, NODE
C
	INTEGER*4  REPORT
	PARAMETER (REPORT=-50000)    !REPRORT EVERY 50,000 TRANS
	DATA LSTSND/NETSYS*REPORT/
C
C
C
	IF (BUF.LE.0.OR.BUF.GT.NETNUM) RETURN !ASHES TO ASHES
C
C
C     DISPLAY SERIAL # SENT
C
	IF (LSTSND(NODE).LE.NETSER(NODE,WAYINP)+REPORT) THEN   !SHOULD REPORT?
	   SERIAL=NETSER(NODE,WAYINP)
C***     IF(NETSTAT(NODE,WAYINP).NE.NSTAPRIM)SERIAL=NETBUF(HDRSIZ+1,BUF)
	   IF(NODE.EQ.NODEID)SERIAL=NETBUF(HDRSIZ+1,BUF)
	   LSTSND(NODE)=IAND('3FFFFFFF'X,SERIAL)
	   LSTSND(NODE)=MOD(LSTSND(NODE),SYSOFF)
	   CALL NOTIFY1(NODE,NOTSER,LSTSND(NODE),WAYINP)
	ENDIF
C
C***  IF (NETSTAT(NODE,WAYINP).EQ.NSTAPRIM) THEN  ;THIS IS MASTER CONNECTION
	IF (NODE.NE.NODEID) THEN  !THIS IS MASTER CONNECTION
	   NETBUF(NEXT,BUF)=NETLEN-1
	   NETBUF(MODE,BUF)=FILMD
C
C
C     GET RECORDS FROM TMF AND PUT THEM IN BUFFER
C     REPEAT TILL NO MORE TO DO OR BUFFER FULL
C
10	   CONTINUE
	   NETSER(NODE,WAYINP)=IAND(NETSER(NODE,WAYINP),'3FFFFFFF'X)
C
	   IF (MOD(NETSER(NODE,WAYINP),SYSOFF).GE.NXTSER) THEN
D	      TYPE *,'PSTATE ALMOST SET TO FILNMR ',FILNMR
	      CALL ENDRST(BUF,STATUS) !CLEAR REST OF BUFFER
D	      TYPE *,'AFTER ENDRST'
	      NETBUF(PSTATE,BUF)=FILNMR
D	      TYPE *,'PSTATE SET TO FILNMR:  ',NETBUF(PSTATE,BUF),BUF
	      LSTSND(NODE)=REPORT
C
C        INSERT ANY CONTROL CODE
C
	      NETRECOV(NODE,WAYINP)=RECDONE
	      RETURN
	   ENDIF
	   CALL RLOG(NETSER(NODE,WAYINP),LBUF,NTM,STATUS) !GET RECORD
	     IF (STATUS.NE.0.AND.NETTST.EQ.-2)THEN
	        TYPE*,IAM(),CHAR(7),'Unsuccessful read of ',
	1	    NETSER(NODE,WAYINP),CHAR(7)
	     ENDIF
	   IF (STATUS.NE.0) NETSER(NODE,WAYINP)=NETSER(NODE,WAYINP)+1
	   IF (STATUS.NE.0) GOTO 10 !ASKED FOR 'MIDDLE' RECORD
C
	   NXTREC=IAND(LBUF(LSER),'3FFFFFFF'X)
	   IF(NXTREC.EQ.0)NETSER(NODE,WAYINP)=NETSER(NODE,WAYINP)+1
	   IF (NXTREC.EQ.0) THEN
D	    TYPE *,'EXITING FILSRV BECAUSE NXTREC=0'
	    GOTO 10!EMPTY
	   ENDIF
	   CALL FILPUT(BUF,NETSER(NODE,WAYINP),LBUF,STATUS) !PUT REC IN BUF
	   IF (STATUS.NE.0) THEN !IF NO MORE ROOM
D	      TYPE *,'PSTATE SET TO FILCNT ',FILCNT
	      NETBUF(PSTATE,BUF)=FILCNT  !WILL BE MORE
	      RETURN
	   ENDIF
	   CALL TMFRLN(LBUF,LENGTH)   !GET RECORD LENGTH
D	   TYPE*,'OF LENGTH ',LENGTH
	   TKNXT=NETSER(NODE,WAYINP)
	   CALL GSERIAL(TKNXT,DONTCARE,LENGTH/LREC)
	   NETSER(NODE,WAYINP)=TKNXT
D	   TYPE*,'NEXT TO READ IS ',NETSER(NODE,WAYINP)
	   GOTO 10
C
C     SECONDARY SYSTEM LOGIC
C
	ELSE
	   CALL FILFBF(BUF) !GET RECORDS FROM BUFFER
	   IF (NETBUF(PSTATE,BUF).EQ.FILNMR) THEN   !IF LAST RECORD
C                    ;OF TRANSACTIONS
	      NETMODE(NODEID,WAYINP)=TRNMD
	      CALL NOTIFY1(NODE,NOTFIN,NXTSER,WAYINP)
	      LSTSND(NODEID)=REPORT
	      RETURN
	   ENDIF
	ENDIF
	RETURN
	END
