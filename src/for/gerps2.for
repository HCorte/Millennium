C 
C PROGRAM GERPS2
C  
C V05 25-NOV-2010 FRP Remove previous change:
C                     Add in TOTVALPAS the amount corresponding to apresentante=3
C                     (cash payments to player from normal non-privileged terminal).
C V04 09-SEP-2010 FRP Do not add in TOTVALPAS the amount corresponding to apresentante=3
C                     (cash payments to player from normal non-privileged terminal).
C V03 16-JUN-2010 FRP Use VPNBNK in validation transactions
C V02 27-APR-2010 FRP ePassive
C V01 12-ABR-01 CS  INITIAL RELEASE FOR PORTUGAL
C
C GERPS2.FOR
C
C PROGRAM TO CREATE ALL PS2 BANK FILES WITH ALL AGENTS INVOICE DATA
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1995 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS  /CHECK=NOOVERFLOW/EXT
	PROGRAM  GERPS2
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:STOPCOM.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
CC	INCLUDE 'INCLIB:PRMAGT.DEF'
        INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:RECAGT.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
	INCLUDE 'INCLIB:STANDARD.DEF'
	INCLUDE 'INCLIB:BANK_REC.DEF'
	INCLUDE 'INCLIB:INTERFACES_REC.DEF'
C
C LOCAL PARAMETERS
C
	INTEGER*4     PASFIL
	PARAMETER    (PASFIL = 10)
C
C FUNCTIONS
C
	INTEGER*4    FIND_BNKID
C
C LOCAL VARIABLES
C
	LOGICAL	     ACHOU
	INTEGER*2    DATE(DATLEN)
	INTEGER*4    TOT_AMTDUE(2)
C
	INTEGER*4    MSG_LUN /6/
	INTEGER*4    AGT,GAM,TOTVALPAS
	INTEGER*4    INDBNK,ST,I4_BANK,NUM_AGENT,NUM_AGENT_SAP,GTYP
	INTEGER*4    PAGE,LINCNT,TOTCR,TOTDEB,REPLUN,I
	INTEGER*4    INVCDC,WEEK,YEAR,TERMTYP
C
	INTEGER*8    I8_AUX
C
        CHARACTER    CZERO/Z0/
	CHARACTER*33 BNK_NAME
	CHARACTER*15 REPNAM/'FILE:BNKRPT.REP'/ 
	CHARACTER*41 HEAD_REP
	CHARACTER*4  BNKCHAR
	CHARACTER*8  DATECRED,DATEDEBT
	CHARACTER*21 CONTA_NIB
C
	STRUCTURE   /STCBNKRPT/
	    INTEGER*4	 CREAMT		    !CREDITS AMOUNT
	    INTEGER*4	 DEBAMT		    !DEBITS AMOUNT
	END STRUCTURE
	RECORD	/STCBNKRPT/ REGBNKRPT(2,MAXBANKS)
        COMMON	/COMBNKRPT/ REGBNKRPT
C
	STRUCTURE   /STCSALES/
	    INTEGER*4    VALUE
	    INTEGER*4    AGENTE
	    INTEGER*4    SAPNBR
	    CHARACTER*21 NIB
	    BYTE         FILLER(3)
	END STRUCTURE
	RECORD	/STCSALES/ REGAGT(2,NUMAGT)
C
C
	CALL FASTSET(0,REGBNKRPT,SIZEOF(REGBNKRPT)/4)
	CALL FASTSET(0,REGAGT,SIZEOF(REGAGT)/4)
C
C	LOAD BANK FILE TO A TABLE
C
	CALL FASTSET(48, BANK_TAB, SIZEOF(BANK_TAB)/4)	    !'0' IN ASCII
	CALL LOAD_BANK_TABLE(ST)
      	IF  (ST.NE.0) THEN
	    CALL DISPERR (MSG_LUN, 'Error loading BANK TABLE', 0, 'STATUS = ', ST, ' ', 0)
      	    CALL GPAUSE()
      	ENDIF
C
C	FILL OUT ALL HEADER FIELDS
C
	DATE(VCDC) = DAYCDC+1	    !PROC DATE FOR TOMORROW (DAILY CREDITS)
	CALL CDATE(DATE)

	WRITE(DATECRED,FMT='(I4.4,I2.2,I2.2)') DATE(VYEAR)+2000,
     *					       DATE(VMON),
     *					       DATE(VDAY)
C
	WEEK = 0
	YEAR = 0
C
	IF  ( INVOICE_DAY ) THEN
C
	    INVCDC     = DAYCDC			!INVOICE DATE FOR WEEK DATE
	    CALL FIGWEK (INVCDC, WEEK, YEAR)	!WEEK/YEAR INVOICE DATE (AS WEEK DATE)
C
	    DATE(VCDC) = DAYCDC+5		!PROC DATE FOR 5 DAYS AFTER INVOICE DATE (WEEKLY DEBITS)
	    CALL CDATE(DATE)
C
	    WRITE(DATEDEBT,FMT='(I4.4,I2.2,I2.2)') DATE(VYEAR)+2000,
     *					           DATE(VMON),
     *					           DATE(VDAY)
C
C	    OPEN ALL WEEKLY ONLINE GAMES AND DAILY PASSIVE PS2 FILES FOR CREDITS (REG. TYPE 12)
C
	    CALL OPEN_BNK(9999,'E','PSD', ST)	!OPEN ALL BANKS
	ELSE
C
C	    OPEN ONLY DAILY PASSIVE PS2 FILE FOR CREDITS (REG. TYPE 12)
C
	    CALL OPEN_BNK(PASFIL,'E','PSP', ST)	!OPEN PASSIVE CREDITS BANK
	ENDIF
	IF  (ST.NE.0) THEN
            TYPE*, IAM(), BNK_REC.ERRSTR
	    CALL GPAUSE()
      	ENDIF
C
C       OPEN ALL BANKS FOR CREDITS
C
	DO  INDBNK = 1, MAXBANKS
	    READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

      	    IF  (I4_BANK .GT. 0) THEN
		IF  (I4_BANK .EQ. PASFIL .AND. .NOT.INVOICE_DAY) THEN
		    CALL GET_NIB_INFO (BANK_TAB(INDBNK).BANK, TPAS, CONTA_NIB, ACHOU)
		    BNK_REC.DATA_PROC            = DATECRED
		    BNK_REC.NIB_HD               = CONTA_NIB
		    BNK_REC.REF_ORDENANTE        = '00000000000000000000'
		    BNK_REC.TIPO_OPERACAO_HD     = 12
		    BNK_REC.SITUACAO_CONTA_HD    = 0
		    BNK_REC.SITUACAO_REGISTRO_HD = 0
		    CALL WRITE_BNK (I4_BANK,'HD',ST)
		    IF  (ST.NE.0) THEN
		        TYPE*,BNK_REC.ERRSTR
C		        CALL GPAUSE()
      	  	    ENDIF
		ELSEIF ( INVOICE_DAY ) THEN
		    CALL GET_NIB_INFO (BANK_TAB(INDBNK).BANK, TLTO, CONTA_NIB, ACHOU)
		    BNK_REC.DATA_PROC            = DATEDEBT
		    BNK_REC.NIB_HD               = CONTA_NIB
		    BNK_REC.REF_ORDENANTE        = '00000000000000000000'
		    BNK_REC.TIPO_OPERACAO_HD     = 64
		    BNK_REC.SITUACAO_CONTA_HD    = 0
		    BNK_REC.SITUACAO_REGISTRO_HD = 0
		    CALL WRITE_BNK (I4_BANK,'HD',ST)
		    IF  (ST.NE.0) THEN
		        TYPE*,BNK_REC.ERRSTR
C		        CALL GPAUSE()
      	  	    ENDIF
		ENDIF
	    ENDIF	    
	ENDDO
C
	CALL OPENASF(ASF)
	IF(ST.NE.0) CALL FILERR(GFNAMES(1,ASF),OPEN_ERROR,ST,0)
C
	DO  AGT=1,NUMAGT

	    IF(MOD(AGT,1000).EQ.0) TYPE *,IAM(),AGT,' terminais processados'

	    CALL READASF(AGT,ASFREC,ST)
	    IF(ST.NE.0) CALL FILERR(GFNAMES(1,ASF),READ_ERROR,ST,AGT)

            DO I=1,ALENGTH
               IF(ASFBYT(I).EQ.CZERO) ASFBYT(I) = ' '
	    ENDDO
C
C SENDING DAILY PASSIVE VALIDATION AMOUNTS (ALL AGENT TYPES - EXCLUDING PRIVILEGED TERMINALS)
C FOR ONLINE GAMES WE DO NOT HAVE SALES/PAYMENTS USING PROVILEGED TERMINALS
C
	    TOTVALPAS  = 0
      	    CALL ASCBIN (ASFINF, STTYP, LTTYP, TERMTYP, ST)
	    IF	( (.NOT. TSBIT(TERMTYP,AGTPRV)) .OR.
     *            (TSBIT(TERMTYP,AGTBNK))            ) THEN
		DO  GAM = 1, MAXGAM
		    GTYP = GNTTAB(GAMTYP,GAM)
		    IF  (GTYP.EQ.TPAS) THEN
			IF ( TSBIT(TERMTYP,AGTBNK) ) THEN  !apresentante=2 (bank term can only be privileged)
			   TOTVALPAS = TOTVALPAS + AGTGAM(GVAMT,GAM,AGT)          !BANKS TERMINALS ARE OFFLINE AND DAYEND
			ELSE  !apresentante=3 (non-bank term and non-privileged)  !DID NOT UPDATE THEM....
		   	   TOTVALPAS = TOTVALPAS + ASFDAY(GVAMT,GAM,1)		  !GET DAILY VALIDATIONS FOR PASSIVE GAMES
			ENDIF
		    ENDIF
     		ENDDO
	    ENDIF
C
C IF WE HAVE PRIZES AMOUNT, SEND IT USING AGENT NIB #
C
      	    CALL ASCBIN(ASFINF, SAGNO, LAGNO, NUM_AGENT,ST)
            CALL ASCBIN(ASFINF, SSAPN, LSAPN, NUM_AGENT_SAP,ST)
C
C SENDING PASSIVE VALIDATIONS
C
	    IF	(TOTVALPAS .GT. 0) THEN
		IF  ( .NOT. INVOICE_DAY ) THEN
		    BNK_REC.VALUE             = TOTVALPAS	    !ONLY DAILY PAYMENTS
	            BNK_REC.TIPO_OPERACAO     = 12
		    BNK_REC.AGENTE            = NUM_AGENT
		    BNK_REC.SEMANA            = 0
		    BNK_REC.ANO               = 0
		    CALL MOVBYT(%REF(ASFBYT), SPANB, %REF(BNK_REC.NIB_DT), 1, EPANB-SPANB+1)
		    BNK_REC.SITUACAO_CONTA    = 0
		    BNK_REC.SITUACAO_REGISTRO = 0
		    BNK_REC.CODIGO_SAP        = NUM_AGENT_SAP
		    BNK_REC.REF_TRANSF        = '               '
C
C UPDATE BANK REPORT AMOUTS (IF IT EXISTS...)
C
		    WRITE(BNKCHAR,FMT='(I4.4)') PASFIL
		    INDBNK = FIND_BNKID(BNKCHAR)
		    IF  (INDBNK.GT.0)   REGBNKRPT(2,INDBNK).CREAMT  = REGBNKRPT(2,INDBNK).CREAMT + TOTVALPAS
C
C WRITE DEFAULT PASSIVE BANK CODE (ONLY ONE FILE)
C
		    CALL WRITE_BNK (PASFIL,'DT',ST)
		    IF  (ST.NE.0) THEN
		        TYPE*,BNK_REC.ERRSTR
C		        CALL GPAUSE()
      	            ENDIF
	        ELSE
C
C SEND ALL PASSIVE CREDIT INVOICE INFORMATION
C
C KEEP ON MEMORY THIS PS2 RECORD FOR THIS ONLINE AGENT
C
		    REGAGT(2,AGT).VALUE  = TOTVALPAS			    !TOTAL OF CREDITS
		    REGAGT(2,AGT).AGENTE = NUM_AGENT
		    CALL MOVBYT(%REF(ASFBYT), SPANB, %REF(CONTA_NIB), 1, EPANB-SPANB+1)
		    REGAGT(2,AGT).NIB    = CONTA_NIB
		    REGAGT(2,AGT).SAPNBR = NUM_AGENT_SAP
		ENDIF
            ENDIF
C
C SENDING ONLINE DEBITS (TODAY IS AN INVOICE DAY)
C
	    IF	( INVOICE_DAY .AND. INT(NUM_AGENT/100000).GT.0 ) THEN
		I8_AUX = 0
		CALL FASTSET(0,TOT_AMTDUE,SIZEOF(TOT_AMTDUE)/4)
		CALL ADDI8I8(TOT_AMTDUE,ASFINV(ASFDUEU,1),BETUNIT)
		I8_AUX = TOT_AMTDUE(1)*DYN_BETUNIT + TOT_AMTDUE(2)
		IF  ( I8_AUX.GT.0  ) THEN                                   !DO NOT SEND SPECIAL AGENTS
		    BNK_REC.VALUE             = I8_AUX			    !WEEKLY PAYMENTS
		    BNK_REC.TIPO_OPERACAO     = 64
		    BNK_REC.AGENTE            = NUM_AGENT
		    BNK_REC.SEMANA            = WEEK			    !WW
		    BNK_REC.ANO               = YEAR			    !YYYY (FROM FIGWEK)
		    CALL MOVBYT(%REF(ASFBYT), SWANB, %REF(BNK_REC.NIB_DT), 1, EWANB-SWANB+1)
		    BNK_REC.SITUACAO_CONTA    = 0
		    BNK_REC.SITUACAO_REGISTRO = 0
		    BNK_REC.CODIGO_SAP        = NUM_AGENT_SAP
		    BNK_REC.REF_TRANSF        = '               '
C
C UPDATE BANK REPORT AMOUTS (IF IT EXISTS)
C
		    BNKCHAR = BNK_REC.NIB_DT(1:4)
		    INDBNK  = FIND_BNKID(BNKCHAR)
		    IF  (INDBNK.GT.0)   REGBNKRPT(1,INDBNK).DEBAMT  = REGBNKRPT(1,INDBNK).DEBAMT + I8_AUX
C
C
C GET ONLINE AGENT BANK CODE FROM NIB #
C
		    READ(BNKCHAR,FMT='(I4)') I4_BANK
C
		    CALL WRITE_BNK (I4_BANK,'DT',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
      		    ENDIF
		ELSEIF(I8_AUX .LT. 0) THEN
C
C SEND ALL CREDIT INVOICE INFORMATION
C
C KEEP ON MEMORY THIS PS2 RECORD FOR THIS ONLINE AGENT
C
		    REGAGT(1,AGT).VALUE  = I8_AUX *(-1)			    !TOTAL OF CREDITS
		    REGAGT(1,AGT).AGENTE = NUM_AGENT
		    CALL MOVBYT(%REF(ASFBYT), SWANB, %REF(CONTA_NIB), 1, EWANB-SWANB+1)
		    REGAGT(1,AGT).NIB    = CONTA_NIB
		    REGAGT(1,AGT).SAPNBR = NUM_AGENT_SAP
		ENDIF
	    ENDIF

	ENDDO
C
	CALL CLOSASF()
C
C SEND DAILY PAYMENTS BY BANK TRANSFER DIRECTLY TO THE PLAYER
C
        IF(.NOT. INVOICE_DAY) CALL SEND_BANK_TRANSFER_TO_PLAYER(PASFIL)
C
C 	WRITE TRAILER FOR ALL PS2 BANK FILES
C
	DO  INDBNK = 1, MAXBANKS
	    READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

            IF	(I4_BANK .GT. 0) THEN
		IF  (I4_BANK .EQ. PASFIL .OR. INVOICE_DAY) THEN
		    CALL WRITE_BNK (I4_BANK,'TL',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
		    ENDIF
		ENDIF
	    ENDIF	    
	ENDDO
C
C	CLOSE ALL PS2 BANK FILES
C
	IF  ( INVOICE_DAY ) THEN
	    CALL CLOSE_BNK(9999,ST)
C
C EURO MIL PROJECT - DELETE PSD*.ASC FILES BECAUSE EURO MIL WILL CREATE THEM
C
        CALL DFILX('PSD*E.ASC', 0, 0, ST)
	ELSE
	    CALL CLOSE_BNK(PASFIL,ST)
	ENDIF
	IF  (ST.NE.0) THEN
	    TYPE*,BNK_REC.ERRSTR
	    CALL GPAUSE()
	ENDIF
C
C IF INVOICE DAY, WRITE ALL PS2 ONLINE GAME FILES (TO AGENTS WITH ONLY CREDITS)
C
	IF  ( INVOICE_DAY ) THEN
C
C	    OPEN ALL PS2 FILES FOR CREDITS (REG. TYPE 12)
C
	    CALL OPEN_BNK(9999,'E','PSC', ST)	!OPEN ALL BANKS
	    IF	(ST.NE.0) THEN
		TYPE*, IAM(), BNK_REC.ERRSTR
		CALL GPAUSE()
      	    ENDIF

	    DO  INDBNK = 1, MAXBANKS
		READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

      	        IF  (I4_BANK .GT. 0) THEN
		    CALL GET_NIB_INFO (BANK_TAB(INDBNK).BANK, TLTO, CONTA_NIB, ACHOU)
		    BNK_REC.DATA_PROC            = DATEDEBT
		    BNK_REC.NIB_HD               = CONTA_NIB
		    BNK_REC.REF_ORDENANTE        = '00000000000000000000'
		    BNK_REC.TIPO_OPERACAO_HD     = 12
		    BNK_REC.SITUACAO_CONTA_HD    = 0
		    BNK_REC.SITUACAO_REGISTRO_HD = 0
		    CALL WRITE_BNK (I4_BANK,'HD',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
      		    ENDIF
	        ENDIF	    
	    ENDDO
C
C READ ALL AGENT CREDITS
C
	    DO  AGT = 1, NUMAGT
		IF  (REGAGT(1,AGT).VALUE .GT. 0) THEN
		    BNK_REC.VALUE             = REGAGT(1,AGT).VALUE
		    BNK_REC.TIPO_OPERACAO     = 12
		    BNK_REC.AGENTE            = REGAGT(1,AGT).AGENTE
		    BNK_REC.SEMANA            = WEEK			!WW
		    BNK_REC.ANO               = YEAR			!YYYY (FROM FIGWEK)
		    BNK_REC.NIB_DT            = REGAGT(1,AGT).NIB
		    BNK_REC.SITUACAO_CONTA    = 0
		    BNK_REC.SITUACAO_REGISTRO = 0
		    BNK_REC.CODIGO_SAP        = REGAGT(1,AGT).SAPNBR
		    BNK_REC.REF_TRANSF        = '               '
C
C UPDATE BANK REPORT AMOUTS (IF IT EXISTS)
C
		    BNKCHAR = BNK_REC.NIB_DT(1:4)
		    INDBNK  = FIND_BNKID(BNKCHAR)
		    IF	(INDBNK.GT.0)	REGBNKRPT(1,INDBNK).CREAMT  = REGBNKRPT(1,INDBNK).CREAMT + BNK_REC.VALUE
C
C GET ONLINE AGENT BANK CODE FROM NIB #
C
		    READ(BNK_REC.NIB_DT(1:4),FMT='(I4)') I4_BANK
C
		    CALL WRITE_BNK (I4_BANK,'DT',ST)
		    IF  (ST.NE.0) THEN
		        TYPE*,BNK_REC.ERRSTR,'-',BNK_REC.AGENTE
C		        CALL GPAUSE()
      	            ENDIF
		ENDIF
	    ENDDO
C
C 	    WRITE TRAILER FOR ALL PS2 BANK FILES
C
	    DO  INDBNK = 1, MAXBANKS
		READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

      		IF  (I4_BANK .GT. 0) THEN
		    CALL WRITE_BNK (I4_BANK,'TL',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
		    ENDIF
		ENDIF	    
	    ENDDO
C
C	    CLOSE ALL PS2 BANK FILES
C
	    CALL CLOSE_BNK(9999,ST)
	    IF (ST.NE.0) TYPE*,BNK_REC.ERRSTR
C
C EURO MIL PROJECT - DELETE PSC*.ASC FILES BECAUSE EURO MIL WILL CREATE THEM
C
            CALL DFILX('PSC*E.ASC', 0, 0, ST)	    
C
C           DO NOW FOR PASSIVE...
C
C	    OPEN ONLY DAILY PASSIVE PS2 FILE FOR CREDITS (REG. TYPE 12)
C
	    CALL OPEN_BNK(PASFIL,'E','PSP', ST)	!OPEN PASSIVE CREDITS BANK
	    IF	(ST.NE.0) THEN
		TYPE*, IAM(), BNK_REC.ERRSTR
		CALL GPAUSE()
      	    ENDIF
C
	    DO  INDBNK = 1, MAXBANKS
		READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

	        IF  (I4_BANK .EQ. PASFIL) THEN
		    CALL GET_NIB_INFO (BANK_TAB(INDBNK).BANK, TPAS, CONTA_NIB, ACHOU)
		    BNK_REC.DATA_PROC            = DATECRED
		    BNK_REC.NIB_HD               = CONTA_NIB
		    BNK_REC.REF_ORDENANTE        = '00000000000000000000'
		    BNK_REC.TIPO_OPERACAO_HD     = 12
		    BNK_REC.SITUACAO_CONTA_HD    = 0
		    BNK_REC.SITUACAO_REGISTRO_HD = 0
		    CALL WRITE_BNK (I4_BANK,'HD',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
		   ENDIF
	        ENDIF
	    ENDDO
C
C READ ALL AGENT CREDITS
C
	    DO  AGT = 1, NUMAGT
		IF  (REGAGT(2,AGT).VALUE .GT. 0) THEN
		    BNK_REC.VALUE             = REGAGT(2,AGT).VALUE
		    BNK_REC.TIPO_OPERACAO     = 12
		    BNK_REC.AGENTE            = REGAGT(2,AGT).AGENTE
		    BNK_REC.SEMANA            = 0
		    BNK_REC.ANO               = 0
		    BNK_REC.NIB_DT            = REGAGT(2,AGT).NIB
		    BNK_REC.SITUACAO_CONTA    = 0
		    BNK_REC.SITUACAO_REGISTRO = 0
		    BNK_REC.CODIGO_SAP        = REGAGT(2,AGT).SAPNBR
		    BNK_REC.REF_TRANSF        = '               '
C
C UPDATE BANK REPORT AMOUTS (IF IT EXISTS)
C
		    WRITE(BNKCHAR,FMT='(I4.4)') PASFIL
		    INDBNK  = FIND_BNKID(BNKCHAR)
		    IF	(INDBNK.GT.0)	REGBNKRPT(2,INDBNK).CREAMT  = REGBNKRPT(2,INDBNK).CREAMT + BNK_REC.VALUE
C
C WRITE DEFAULT PASSIVE BANK CODE (ONLY ONE FILE)
C
		    CALL WRITE_BNK (PASFIL,'DT',ST)
		    IF  (ST.NE.0) THEN
		        TYPE*,BNK_REC.ERRSTR
C		        CALL GPAUSE()
      	            ENDIF
		ENDIF
	    ENDDO
C
C SEND DAILY PAYMENTS BY BANK TRANSFER DIRECTLY TO THE PLAYER
C
            CALL SEND_BANK_TRANSFER_TO_PLAYER(PASFIL)
C
C 	    WRITE TRAILER FOR THE PASSIVE PS2 BANK FILE
C
	    DO  INDBNK = 1, MAXBANKS
		READ(BANK_TAB(INDBNK).BANK,FMT='(I4)') I4_BANK

      		IF  (I4_BANK.EQ.PASFIL) THEN
		    CALL WRITE_BNK (I4_BANK,'TL',ST)
		    IF  (ST.NE.0) THEN
			TYPE*,BNK_REC.ERRSTR
C			CALL GPAUSE()
		    ENDIF
		ENDIF
	    ENDDO
	    CALL CLOSE_BNK(PASFIL,ST)
	ENDIF
C
C OPEN REPORT
C
	CALL FIND_AVAILABLE_LUN(REPLUN,ST) 
	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'Erro alocando logical unit para arquivo: ',REPNAM
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF

	OPEN(REPLUN,
     *       FILE = REPNAM,
     *       STATUS = 'NEW',
     *       IOSTAT = ST)

	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'Erro ao abrir arquivo: ',REPNAM,' st = ',ST
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF
C
C WRITE REPORT
C
        DATE(VCDC) = DAYCDC
        CALL CDATE(DATE)

        WRITE(HEAD_REP,5)

	CALL TITLE(HEAD_REP,'GERPS2',1,REPLUN,PAGE,DAYCDC)
	WRITE(REPLUN,10)

	LINCNT = 6
	TOTCR  = 0
	TOTDEB = 0
	TYPE*,IAM(),'>>> Gerando relatorio: ',REPNAM

	DO  INDBNK=1,MAXBANKS
	    IF (REGBNKRPT(1,INDBNK).DEBAMT.GT.0 .OR.
     *          REGBNKRPT(1,INDBNK).CREAMT.GT.0 .OR.
     *          REGBNKRPT(2,INDBNK).CREAMT.GT.0     ) THEN

		  IF (LINCNT.GT.52) THEN
		     CALL TITLE(HEAD_REP,'GERPS2',1,REPLUN,PAGE,DAYCDC)
		     WRITE(REPLUN,10)
		     LINCNT = 6
		  ENDIF

		  CALL GET_BNK_NAME(BANK_TAB(INDBNK).BANK, BNK_NAME, ACHOU)
		  WRITE(REPLUN,11) BNK_NAME,
     *                             CMONY(REGBNKRPT(1,INDBNK).CREAMT,13,BETUNIT),
     *                             CMONY(REGBNKRPT(1,INDBNK).DEBAMT,13,BETUNIT)
		  IF  (REGBNKRPT(2,INDBNK).CREAMT .GT. 0) THEN
		      LINCNT = LINCNT + 2
		      WRITE(REPLUN,FMT='(T53,A13)') CMONY(REGBNKRPT(2,INDBNK).CREAMT,13,BETUNIT)
		  ELSE
		      LINCNT = LINCNT + 1
		  ENDIF
	          TOTCR  = TOTCR  + REGBNKRPT(1,INDBNK).CREAMT + REGBNKRPT(2,INDBNK).CREAMT
		  TOTDEB = TOTDEB + REGBNKRPT(1,INDBNK).DEBAMT  

	    ENDIF

	ENDDO
C
C WRITE TOTALS
C
        IF (LINCNT.GT.49) THEN
	    CALL TITLE(HEAD_REP,'PS2REP',1,REPLUN,PAGE,DAYCDC)
	    WRITE(REPLUN,10)
	ENDIF
	WRITE(REPLUN,12) CMONY(TOTCR,13,BETUNIT),CMONY(TOTDEB,13,BETUNIT)
C
C CLOSE REPORT
C
	CLOSE (REPLUN)
C
	CALL GSTOP(GEXIT_SUCCESS)
C
5       FORMAT('RELACAO DOS RECIBOS REFERENTES AOS BANCOS')
10	FORMAT(132('-'),/,T10,'BANCO',T59,'CREDITO',T83,'DEBITO',/,132('-'))
11	FORMAT(T10,A33,T53,A13,T76,A13)
12	FORMAT(T10,//,'TOTAIS:',T53,A13,T76,A13)

	END
C
C	***********************************************************
C=======OPTIONS    /CHECK=NOOVERFLOW
	SUBROUTINE GET_NIB_INFO (BANK, GTYP, CONTA_NIB, ACHOU)
	IMPLICIT   NONE
C	***********************************************************
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:BANK_REC.DEF'

	CHARACTER*(*) BANK
        INTEGER*4     GTYP
        CHARACTER*(*) CONTA_NIB
	LOGICAL       ACHOU
C
	INTEGER*4     INDBNK

        ACHOU  = .FALSE.
	INDBNK = 1
	DO WHILE (INDBNK.LE.MAXBANKS .AND. .NOT.ACHOU)
           IF (BANK_TAB(INDBNK).BANK.EQ.BANK) THEN
	      IF (GTYP.EQ.TPAS) THEN
		 CONTA_NIB = BANK//BANK_TAB(INDBNK).NIB_PASSIVE	    !ONLY FOR PASSIVE
	      ELSE
		 CONTA_NIB = BANK//BANK_TAB(INDBNK).NIB_MUTUAS	    !DEFAULT FOR ONLINE GAMES
	      ENDIF
              ACHOU = .TRUE.
	   ELSE
	      INDBNK = INDBNK + 1
           ENDIF
	ENDDO
C
C DEFAULT FOR CONTA_NIB ERROR !!
C
	IF  ( .NOT. ACHOU ) CONTA_NIB = '000000000000000000000'
C
	RETURN
	END
C
C	***********************************************************
C=======OPTIONS    /CHECK=NOOVERFLOW
	SUBROUTINE GET_BNK_NAME (BANK, BNK_NAME, ACHOU)
	IMPLICIT   NONE
C	***********************************************************
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:BANK_REC.DEF'

	CHARACTER*(*) BANK
        CHARACTER*(*) BNK_NAME
	LOGICAL	      ACHOU
C
	INTEGER*4     INDBNK

        ACHOU  = .FALSE.
	INDBNK = 1
	DO WHILE (INDBNK.LE.MAXBANKS .AND. .NOT.ACHOU)
           IF (BANK_TAB(INDBNK).BANK.EQ.BANK) THEN
	      BNK_NAME = BANK_TAB(INDBNK).LONG_NAME
              ACHOU = .TRUE.
	   ELSE
	      INDBNK = INDBNK + 1
           ENDIF
	ENDDO
C
C DEFAULT FOR ERROR
C
	IF  ( .NOT. ACHOU ) BNK_NAME = '                                 '

	RETURN
	END
C
C	***********************************************************
C=======OPTIONS    /CHECK=NOOVERFLOW
	INTEGER*4  FUNCTION FIND_BNKID (BANK)
	IMPLICIT   NONE
C	***********************************************************
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:BANK_REC.DEF'

	CHARACTER*(*) BANK
C
	LOGICAL	      ACHOU
	INTEGER*4     INDBNK

        ACHOU  = .FALSE.
	INDBNK = 1
	DO  WHILE (INDBNK.LE.MAXBANKS .AND. .NOT.ACHOU)
	    IF	( BANK_TAB(INDBNK).BANK.EQ.BANK ) THEN
		ACHOU = .TRUE.
            ELSE
      	        INDBNK = INDBNK + 1
	    ENDIF
	ENDDO
C
	FIND_BNKID = 0
	IF  ( ACHOU )	FIND_BNKID = INDBNK

	RETURN
	END
C
C****************************************
C SUBROUTINE SEND_BANK_TRANSFER_TO_PLAYER
C****************************************
C SEND IN 'PSP' FILES ALL PAYMENTS BY BANK TRANSFER DIRECTLY TO THE PLAYERS
C
C=====OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE SEND_BANK_TRANSFER_TO_PLAYER(PASFIL)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:PASCOM.DEF'
      INCLUDE 'INCLIB:DESTRA.DEF'
      INCLUDE 'INCLIB:PRMLOG.DEF'
      INCLUDE 'INCLIB:BANK_REC.DEF'
      INCLUDE 'INCLIB:INTERFACES_REC.DEF'
C
      INTEGER*4 ST,SER,SERCNT
      INTEGER*4 GIND,TCKS,EMIS,EIND,ECNT,WEEK,YEAR
      INTEGER*4 LOGREC(LMUREC)
      LOGICAL*1 EOF
C
      INTEGER*4 PASFIL,INDBNK,FIND_BNKID
      CHARACTER BNKCHAR*4
C
	STRUCTURE   /STCBNKRPT/
	    INTEGER*4	 CREAMT		    !CREDITS AMOUNT
	    INTEGER*4	 DEBAMT		    !DEBITS AMOUNT
	END STRUCTURE
	RECORD	/STCBNKRPT/ REGBNKRPT(2,MAXBANKS)
        COMMON	/COMBNKRPT/ REGBNKRPT
C
C Open MTM File
      CALL OPENW(PTMF,SFNAMES(1,PTMF),4,0,0,ST)
      IF(ST .NE. 0) CALL FILERR(SFNAMES(1,PTMF),1,ST,0)
      CALL TOPEN(PTMF)
C
C Read MTM File
      SER = 1
      SERCNT = 0
      EOF = .FALSE.
C
1000  CONTINUE
      CALL READTMF(LOGREC,SER,EOF)
      IF(EOF) GOTO 2000
C
      IF(MOD(SERCNT,1000000) .EQ. 0) TYPE*,IAM(),SERCNT,' records read from MTM'
      SERCNT = SERCNT+1
C
      CALL LOGTRA(TRABUF,LOGREC)  
C
      IF(TRABUF(TCDC) .NE. DAYCDC)  GOTO 1000
C
      IF(TRABUF(TGAMTYP) .NE. TPAS)  GOTO 1000
C
      IF(TRABUF(TTYP) .NE. TVAL)  GOTO 1000
C
      IF(TRABUF(TSTAT) .NE. GOOD) GOTO 1000
C
      IF(TRABUF(TERR) .NE. NOER) GOTO 1000
C
      IF(TRABUF(TVTYPE) .NE. VPNBNK) GOTO 1000  !xTicket Bank Transfers
C
      GIND = TRABUF(TGAMIND)
C
      DO TCKS=1,TRABUF(TPTCK)
        IF(TRABUF(TPSTS1 + OFFTRA*(TCKS-1)) .EQ. VWINNER) THEN
C
          EIND = -1
          EMIS = TRABUF(TPEMIS1 + OFFTRA*(TCKS-1))
          DO ECNT = 1,PAGEMI
            IF(PASEMIS(ECNT,GIND) .EQ. EMIS) THEN
              EIND = ECNT
              EXIT
            ENDIF
          ENDDO
          IF(EIND .LT. 0) THEN
            TYPE*,IAM(),'ERROR GETTING MEMORY OFFSET, SERIAL ',TRABUF(TSER)
            CALL GPAUSE()
          ENDIF
C
          WEEK = PASDRAW(EIND,GIND)/10000
          YEAR = MOD(PASDRAW(EIND,GIND),10000)
          YEAR = YEAR - 2000
C
          BNK_REC.TIPO_OPERACAO = 12
          BNK_REC.SITUACAO_CONTA = 0
          BNK_REC.SITUACAO_REGISTRO = 0
          WRITE(BNK_REC.NIB_DT,FMT='(I4.4,I4.4,I9.9,I2.2,I2.2)')
     *      TRABUF(TVNIBBB),TRABUF(TVNIBBO),TRABUF(TVNIBBA1),TRABUF(TVNIBBA2),TRABUF(TVNIBCD)
          BNK_REC.VALUE = TRABUF(TPPAY1 + OFFTRA*(TCKS-1))
          BNK_REC.AGENTE = TRABUF(TVPLCARD)
          WRITE(BNK_REC.REF_TRANSF,FMT='(I2.2,A1,I2.2,A1,I5.5,I2.2,I2.2)')
     *      WEEK,'/',YEAR,' ',
     *      TRABUF(TPNUM1 + OFFTRA*(TCKS-1)),
     *      TRABUF(TPTEN1 + OFFTRA*(TCKS-1)),
     *      TRABUF(TPSER1 + OFFTRA*(TCKS-1))
C
          WRITE(BNKCHAR,FMT='(I4.4)') PASFIL
          INDBNK = FIND_BNKID(BNKCHAR)
          IF(INDBNK .GT. 0) REGBNKRPT(2,INDBNK).CREAMT = REGBNKRPT(2,INDBNK).CREAMT + BNK_REC.VALUE
C
          CALL WRITE_BNK(PASFIL,'BT',ST)
          IF(ST .NE. 0) THEN
            TYPE*,BNK_REC.ERRSTR
C            CALL GPAUSE()
          ENDIF
C
        ENDIF
      ENDDO
C
      GOTO 1000
C
2000  CONTINUE
C
C Close MTM File
      CALL USRCLOS1(PTMF)
C
      RETURN
      END
