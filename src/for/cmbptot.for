C
C SUBROUTINE CMBPTOT
C $Log:   GXAFXT:[GOLS]CMBPTOT.FOV  $
C  
C     Rev 1.0   17 Apr 1996 12:37:42   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C  
C     Rev 1.0   21 Jan 1993 15:55:16   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - cmbptot.for **
C
C CMBPTOT.FOR
C
C     08-APR-91 MP  ELIMINATED NON-USED VARIABLE 'BASE'
C
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C V01 04-DEC-89 MGM INITIAL RELEASE FOR FINLAND POOLTOT.FTN BASED
C
C SUBROUTINE TO DETERMINE THE TOTAL NUMBER OF COMBINATIONS
C PLAYED FOR ANY GAME.
C
C MODIFIED TO READ POOLOVR1.FIL
C ================================================================
C
C     CMBPTOT(TOTAL,GAME,BUFFER,BUFFER_SIZE)
C
C     FILE        > 1 IF ON LINE SET OF FILES, 2 IF POOLOVR1.FIL USED
C     GAME        > GAME #
C     BUFFER_SIZE > BUFFER SIZE
C     BUFFER      > BUFFER FOR I/O
C     OUT         > TOTAL # BET
C
C     USES LOGICAL UNIT 1
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE CMBPTOT(TOTAL,GAM,BUFFER,BUFFER_SIZE)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:POOLLTO.DEF'
C
	INTEGER*4   ADDSIZE
	PARAMETER  (ADDSIZE=8)
C
	INTEGER*4   OVERFLOWS(2,MAXOVR),FDB(7)
	INTEGER*4   TOT, ADDCMB, OFFSET, NUMPAGES, PAGE_RATIO
	INTEGER*4   ST1, RECN1, RECN, OVERFLOW_BLOK, F_INDEX, OFF
	INTEGER*4   MAXCMB, FASTBIN, INWORD, BASE_PAGE, FIL
	INTEGER*4   NUMCMB, ST, BUFFER_SIZE, GAM
	INTEGER*4   BUFFER(BUFFER_SIZE),TOTAL, ACT_SECT
C
	INTEGER*4   I4
	INTEGER*2   I2(2)
	EQUIVALENCE(I4,I2)
C
C OPEN LOTTO POOL FILE
C
	CALL OPENQW(1,SFNAMES(1,LPR),4,0,0,ST)
	IF (ST.NE.0) THEN
	  CALL FILERR(SFNAMES(1,LPR),1,ST,0)
	ENDIF
	CALL IOQINIT(FDB,1,LTOSEC*256)
C
	TOTAL=0
	NUMCMB=0
	FIL = 1
	BASE_PAGE = LTPOOL_GAMPAG(GAM)
	INWORD = LTPOOL_INWORD(BASE_PAGE)
C
	MAXCMB = FASTBIN(LTPOOLNR(GAM),LTPOOLBET(GAM))
	DO 10, OFF=1,MAXIND
	   IF (LTPOOL_GAMENR(TSPT,OFF).EQ.GAM) MAXCMB=3**LTPOOLNR(GAM)
10	CONTINUE
C
C READ OVERFLOWS AND NUMBER OF OVERFLOW BLOCKS IN THE FILE
C
	IF (FIL.EQ.1) THEN
	   CALL FASTMOV(LTOVR(1,1,GAM),OVERFLOWS(1,1),MAXOVR*2)
	   F_INDEX=LO1
	   OVERFLOW_BLOK=OVRBLK
	ELSE
	   ACT_SECT=LTOSEC*256/SECSIZE	!ACTUAL # OF SECTORS
C***	   RECN=LTOSEC*LTNUMPAG+1+(GAM-1)*MAXOVR*8/256
	   RECN=ACT_SECT*LTNUMPAG+1+(GAM-1)*MAXOVR*8/SECSIZE
	   CALL READQIO(FDB,RECN,OVERFLOWS,MAXOVR*8,ST)
C
C***	   RECN1=LTOSEC*LTNUMPAG+1+LTNUMGAMES*MAXOVR*8/256
	   RECN1=ACT_SECT*LTNUMPAG+1+LTNUMGAMES*MAXOVR*8/SECSIZE
	   CALL READQIO(FDB,RECN1,OVERFLOW_BLOK,4,ST1)
C
	   IF (ST.NE.0.OR.ST1.NE.0) THEN
	      TYPE *,'Cannot read overflows ',ST,ST1,RECN,RECN1
	      CALL GPAUSE
	      RETURN
	   ENDIF
	   F_INDEX=LO2
	ENDIF
C
C     READ ALL PAGES
C
	PAGE_RATIO=PAGESIZE/BUFFER_SIZE
	NUMPAGES=PAGE_RATIO*LTNUMPAG
	DO 70 RECN=1,NUMPAGES              !READ PAGES
	  IF (LTPOOL_PAGGAM((RECN-1)/PAGE_RATIO+1).NE.GAM) GOTO 70
	  CALL READQW(FDB,RECN,BUFFER,ST)
	  IF (ST.NE.0) THEN
	  CALL FILERR(SFNAMES(1,F_INDEX),2,ST,RECN)
	    CALL GPAUSE
	  ENDIF
	  OFFSET=1
	  ADDCMB=ADDSIZE*INWORD
	  IF (INWORD.EQ.8) THEN
	    DO 40, OFFSET=1,BUFFER_SIZE,ADDSIZE
	      CALL POOLADD(BUFFER(OFFSET),ADDSIZE,TOT)
	      IF(TOT.GT.0) TOTAL = TOTAL + 1
	      NUMCMB=NUMCMB+ADDCMB
	      IF (NUMCMB.GE.MAXCMB) GOTO 80   !ALL READ
40	    CONTINUE
	  ELSEIF (INWORD.EQ.4) THEN
	    DO 50, OFFSET=1,BUFFER_SIZE,ADDSIZE
	      CALL BYTADD32(BUFFER(OFFSET),TOT)
	      IF(TOT.GT.0) TOTAL = TOTAL + 1
	      NUMCMB=NUMCMB+ADDCMB
	      IF (NUMCMB.GE.MAXCMB) GOTO 80   !ALL READ
50	    CONTINUE
	  ELSEIF (INWORD.EQ.2) THEN
	    DO 60, OFFSET=1,BUFFER_SIZE
	      I4=BUFFER(OFFSET)
	      IF(I2(1).GT.0) TOTAL = TOTAL + 1
	      IF(I2(2).GT.0) TOTAL = TOTAL + 1
	      NUMCMB=NUMCMB+2
	      IF (NUMCMB.GE.MAXCMB) GOTO 80   !ALL READ
60	    CONTINUE
	  ENDIF
C
70	CONTINUE
C
80	CONTINUE
C
	CALL CLOSEQFIL(FDB)
C
	RETURN
	END
