C
C LODPLAN.FOR
C
C V01 11-MAR-2010 FRP Initial Release for Portugal ePassive
C
C LOAD PASSIVE PLAN FROM ORACLE INTERFACE AND UPDATE LOTTERY PLAN FILE
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode Island,
C and contains confidential and trade secret information. It may not be
C transferred from the custody or control of GTECH except as authorized in
C writing by an officer of GTECH. Neither this item nor the information it
C contains may be used, transferred, reproduced, published, or disclosed,
C in whole or in part, and directly or indirectly, except as expressly
C authorized by an officer of GTECH, pursuant to written agreement.
C
C Copyright 1993 GTECH Corporation. All rights reserved.
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
      PROGRAM LODPLAN
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
      INCLUDE 'INCLIB:DPPREC.DEF'
C
      INTEGER*4 ST,UNIT,FDB(7)
      INTEGER*4 GIND,GNUM,PLAN
      LOGICAL*1 ISTHERE
C
      COMMON /DPPCOM/ DPPREC,GIND
C
      TYPE*,IAM(),'*******************************************************'
      TYPE*,IAM(),'PROCESS PASSIVE PRIZES PLAN FILE (ORCPLO_<C/P>####.ASC)'
      TYPE*,IAM(),'*******************************************************'
      TYPE*,IAM()
C
C Check if System Is Up
      CALL CHCKDIS(ST)
      IF(ST .EQ. 0) THEN
        TYPE*,IAM()
        TYPE*,IAM(),'System is ACTIVE!'
        TYPE*,IAM()
        CALL GSTOP(GEXIT_FATAL)
      ENDIF
C
C Ask Passive Type
      CALL INPNUM('Enter 1:Classica or 2:Popular: ',GIND,1,NUMPAS,ST)
      IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
      GNUM  = GTNTAB(TPAS,GIND)
      IF(GNUM.LE.0) THEN
        TYPE*,IAM(),'GAME NOT ACTIVE'
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
C Ask Plan Id Number
      CALL INPNUM('Enter Plan Id number: ',PLAN,1,9999,ST)
      IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
C Open Passive Plan File
      CALL FIND_AVAILABLE_LUN(UNIT,ST)
      IF(ST .NE. 0) THEN
        TYPE*,IAM(),'ERROR GETTING LOGICAL UNIT FOR PASSIVE PLAN FILE'
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
      CALL OPENW(UNIT,SFNAMES(1,PPF),4,0,0,ST)
      CALL IOINIT(FDB,UNIT,DPPSEC*256)
      IF(ST .NE. 0) THEN
        TYPE*,IAM(),'ERROR OPENING PASSIVE PLAN FILE STATUS ',ST
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
C Read previous Plan Id Number
      CALL READW(FDB,PLAN-1,DPPREC,ST)
      IF(ST .NE. 0) THEN
        TYPE*,IAM(),'ERROR READING PASSIVE PLAN FILE STATUS ',ST
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
      IF(DPPPLAN .EQ. 0 .AND. DPPCHGCDC .EQ.0) THEN
        TYPE*,IAM(),'ERROR: PREVIOUS PLAN ',PLAN-1,' IS EMPTY IN PASSIVE PLAN FILE'
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
C Read input Plan Id Number
      CALL READW(FDB,PLAN,DPPREC,ST)
      IF(ST .NE. 0) THEN
        TYPE*,IAM(),'ERROR READING PASSIVE PLAN FILE STATUS ',ST
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
      IF(DPPPLAN .NE. 0 .OR. DPPCHGCDC .NE.0) THEN
        TYPE*,IAM(),'ERROR: PLAN ',PLAN,' ALREADY CONFIGURED IN PASSIVE PLAN FILE'
        CALL GSTOP(GEXIT_FATAL) 
      ENDIF
C
C Set Plan Id Number and Last Change CDC
      DPPPLAN = PLAN
      DPPCHGCDC = DAYCDC
C
C Inquire for Oracle File
      WRITE(ORCNAM,100) STRTYP(GIND),PLAN
      INQUIRE(FILE=ORCNAM,EXIST=ISTHERE)
      IF(.NOT. ISTHERE) THEN
        TYPE*,IAM(),'ERROR: FILE ',ORCNAM,' NOT FOUND'
        CALL GSTOP(GEXIT_FATAL)
      ENDIF
C
C Open Oracle File
      CALL OPEN_ORC_FILE
C
C Open Log File
      WRITE(LOGNAM,200) STRTYP(GIND),PLAN
      CALL OPEN_LOG_FILE
C
C Load Oracle File
      CALL LOAD_ORC_FILE
      IF(ORC_ERR_CNT .NE. 0) THEN
        TYPE*,IAM()
        TYPE*,IAM(),ORC_ERR_CNT,' ERRORS FOUND'
        TYPE*,IAM(),'SEE LOG FILE - ',LOGNAM
        TYPE*,IAM(),'FILE WILL NOT BE PROCESSED'
        TYPE*,IAM()
        CALL GSTOP(GEXIT_FATAL)
      ENDIF
C
C Write Passive Plan File
      CALL WRITEW(FDB,PLAN,DPPREC,ST)
      IF(ST .NE. 0) THEN
        TYPE*,IAM(),'ERROR WRITING PASSIVE PLAN FILE STATUS ',ST
        CALL GSTOP(GEXIT_FATAL)
      ENDIF
C
C Close Passive Plan File
      CALL CLOSEFIL(FDB)
C
C Close Oracle File
      CLOSE(ORCLUN)
C
C Close Log File
      CLOSE(LOGLUN)
C
C Formats
100   FORMAT('SYSX:ORCPLO_',A1,I4.4,'.ASC')
200   FORMAT('SYSX:ORCPLO_',A1,I4.4,'.LOG')
C
C End
      CALL GSTOP(GEXIT_SUCCESS)
      END
C
C*************************
C SUBROUTINE LOAD_ORC_FILE
C*************************
C LOAD ORACLE INTERFACE FILE
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_ORC_FILE
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
C
      ORC_LIN_CNT = 0
      ORC_ERR_CNT = 0
      ORC_ERR_STR = ' '
C
      CALL LOAD_ORC_HEADER(ST)
      IF(ST .EQ. EOF) RETURN
C
      CALL LOAD_ORC_BODY(ST)
      IF(ST .EQ. EOF) RETURN
C
      CALL LOAD_ORC_TRAILER(ST)
      IF(ST .EQ. EOF) RETURN
C
      RETURN
      END
C
C***************************
C SUBROUTINE LOAD_ORC_HEADER
C***************************
C READ ORACLE INTERFACE FILE HEADER RECORD
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_ORC_HEADER(ST)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
      INTEGER*4 POS
      CHARACTER REC_TYPE*2
C
      CALL READ_ORC_FILE(ST)
      IF(ST .EQ. EOF) THEN
        ORC_ERR_STR = IAM()//' INVALID EOF. SHOULD BE A HEADER RECORD'
        CALL WRITE_LOG_FILE
        RETURN
      ENDIF
C
      POS=1
C
      CALL GET_REC_TYPE(POS,REC_TYPE)
      IF(REC_TYPE .NE. 'HP') THEN
        ORC_ERR_STR = IAM()//' HEADER RECORD INVALID. SHOULD BE TYPE HP'
        CALL WRITE_LOG_FILE
      ENDIF
C
      CALL GET_GEN_DATE(POS)
C
      RETURN
      END
C
C****************************
C SUBROUTINE LOAD_ORC_TRAILER
C****************************
C READ ORACLE INTERFACE FILE TRAILER RECORD
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_ORC_TRAILER(ST)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
      INTEGER*4 POS
      CHARACTER REC_TYPE*2
C
      CALL READ_ORC_FILE(ST)
      IF(ST .EQ. EOF) THEN
        ORC_ERR_STR = IAM()//' INVALID EOF. SHOULD BE A TRAILER RECORD'
        CALL WRITE_LOG_FILE
        RETURN
      ENDIF
C
      POS=1
C
      CALL GET_REC_TYPE(POS,REC_TYPE)
      IF(REC_TYPE .NE. 'TP') THEN
        ORC_ERR_STR = IAM()//' TRAILER RECORD INVALID. SHOULD BE TYPE TP'
        CALL WRITE_LOG_FILE
      ENDIF
C
      CALL GET_VALUE(POS,8,ORC_TOT_LIN,ORC_REC)
      IF(ORC_TOT_LIN .NE. ORC_LIN_CNT) THEN
        ORC_ERR_STR = IAM()//' TOTRECS IN TRAILER NOT EQUAL TO TOTRECS IN FILE'
        CALL WRITE_LOG_FILE
      ENDIF
C
      RETURN
      END
C
C*************************
C SUBROUTINE LOAD_ORC_BODY
C*************************
C READ ORACLE INTERFACE FILE BODY RECORDS
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_ORC_BODY(ST)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
C
      CALL LOAD_REC_01(ST)
      IF(ST .EQ. EOF) RETURN
C
      CALL LOAD_REC_02(ST)
      IF(ST .EQ. EOF) RETURN
C
      RETURN
      END
C
C***********************
C SUBROUTINE LOAD_REC_01
C***********************
C READ ORACLE INTERFACE FILE BODY RECORD '01'
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_REC_01(ST)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
      INTEGER*4 POS
      CHARACTER REC_TYPE*2
C
      CALL READ_ORC_FILE(ST)
      IF(ST .EQ. EOF) THEN
        ORC_ERR_STR = IAM()//' INVALID EOF. SHOULD BE A RECORD 01'
        CALL WRITE_LOG_FILE
        RETURN
      ENDIF
C
      POS=1
C
      CALL GET_REC_TYPE(POS,REC_TYPE)
      IF(REC_TYPE .NE. '01') THEN
        ORC_ERR_STR = IAM()//' BODY RECORD INVALID. SHOULD BE TYPE 01'
        CALL WRITE_LOG_FILE
      ENDIF
C
      CALL GET_REC_01(POS)
C
      RETURN
      END
C
C***********************
C SUBROUTINE LOAD_REC_02
C***********************
C READ ORACLE INTERFACE FILE BODY RECORD(S) '02'
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE LOAD_REC_02(ST)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:STANDARD.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
C
      INTEGER*4 ST
      INTEGER*4 POS,CNT,IND
      CHARACTER REC_TYPE*2
C
      CNT = 1
      DO WHILE(CNT .LE. ORC_TOT_REC_02)
C
        CALL READ_ORC_FILE(ST)
        IF(ST .EQ. EOF) THEN
          ORC_ERR_STR = IAM()//' INVALID EOF. SHOULD BE '//ITOC(ORC_TOT_REC_02,IND)//' RECORD(S) 02'
          CALL WRITE_LOG_FILE
          RETURN
        ENDIF
C
        POS=1
C
        CALL GET_REC_TYPE(POS,REC_TYPE)
        IF(REC_TYPE .NE. '02') THEN
          ORC_ERR_STR = IAM()//' BODY RECORD INVALID. SHOULD BE TYPE 02'
          CALL WRITE_LOG_FILE
        ENDIF
C
        CALL GET_REC_02(POS)
C
        CNT = CNT+1
      ENDDO
C
      RETURN
      END
C
C**********************
C SUBROUTINE GET_REC_01
C**********************
C GET ORACLE INTERFACE FILE BODY RECORD '01'
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE GET_REC_01(POS)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
      INCLUDE 'INCLIB:PASNAM.DEF'
      INCLUDE 'INCLIB:DPPREC.DEF'
C
      INTEGER*4 POS
      INTEGER*4 IND,YESNO
      INTEGER*4 PLAN,PTYP
      INTEGER*4 PIND,GIND
      INTEGER*4 EXTDIV
      INTEGER*4 MAXNUMTCK,MAXNOFFRA,MAXEXTDIV
      CHARACTER ETYP*20
      INTEGER*4 ETYP_LEN/20/
C
      COMMON /DPPCOM/ DPPREC,GIND
C
C Prize Plan
      CALL GET_VALUE(POS,4,PLAN,ORC_REC)
      IF(PLAN .NE. DPPPLAN) THEN
        ORC_ERR_STR = IAM()//' PLAN NUMBER NOT EQUAL TO PLAN NUMBER IN FILE NAME'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Passive Lottery Type
      CALL GET_VALUE(POS,1,PTYP,ORC_REC)
      IF(PTYP.NE.0 .AND. PTYP.NE.5) THEN
        ORC_ERR_STR = IAM()//' INVALID PASSIVE TYPE. SHOULD BE 0 OR 5'
        CALL WRITE_LOG_FILE
      ENDIF
C
      IF(PTYP .EQ. 0) PIND = PSBCLA
      IF(PTYP .EQ. 5) PIND = PSBPOP
      IF(PIND .NE. GIND) THEN
        ORC_ERR_STR = IAM()//' PASSIVE TYPE NOT EQUAL TO PASSIVE TYPE IN FILE NAME'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Numbers per Serie
      CALL GET_VALUE(POS,6,DPPNUMTCK,ORC_REC)
C
      MAXNUMTCK = 0
      IF((PIND .EQ. PSBCLA) .AND.
     *   (DPPNUMTCK .LT. 1 .OR. DPPNUMTCK .GT. (pmaxnumcla+1))) MAXNUMTCK = pmaxnumcla+1
      IF((PIND .EQ. PSBPOP) .AND.
     *   (DPPNUMTCK .LT. 1 .OR. DPPNUMTCK .GT. (pmaxnumpop+1))) MAXNUMTCK = pmaxnumpop+1
      IF(MAXNUMTCK .NE. 0) THEN
        ORC_ERR_STR = IAM()//' INVALID NUMBER OF BILLETS. SHOULD BE UP TO '//ITOC(MAXNUMTCK,IND)
        CALL WRITE_LOG_FILE
      ENDIF
C
C Filler
      POS = POS+2
C
C Number of Fractions
      CALL GET_VALUE(POS,2,DPPNOFFRA,ORC_REC)
C
      MAXNOFFRA = 0
      IF((PIND .EQ. PSBCLA) .AND.
     *   (DPPNOFFRA .LT. 1 .OR. DPPNOFFRA .GT. pmaxfracla)) MAXNOFFRA = pmaxfracla
      IF((PIND .EQ. PSBPOP) .AND.
     *   (DPPNOFFRA .LT. 1 .OR. DPPNOFFRA .GT. pmaxfrapop)) MAXNOFFRA = pmaxfrapop
      IF(MAXNOFFRA .NE. 0) THEN
        ORC_ERR_STR = IAM()//' INVALID NUMBER OF FRACTIONS. SHOULD BE UP TO '//ITOC(MAXNOFFRA,IND)
        CALL WRITE_LOG_FILE
      ENDIF
C
C Sales Price
      CALL GET_VALUE(POS,6,DPPPRC,ORC_REC)
C
C Emission Type
      ETYP = ORC_REC(POS:(POS+ETYP_LEN-1))
      POS = POS+ETYP_LEN
C
      DO IND = 1,MAXPLTYP
        IF(ETYP .EQ. NAMPLANTYP(IND)) THEN
          DPPPLT = IND
          GOTO 1000
        ENDIF
      ENDDO
C
      ORC_ERR_STR = IAM()//' INVALID EMISSION TYPE. SHOULD BE ORD, EXT OR ESP'
      CALL WRITE_LOG_FILE
C
C Show Warning if ORDINARIA Emission Type
      IF(DPPPLT .NE. EM_ORD) THEN
        TYPE*,IAM()
        TYPE*,IAM(),'**** WARNING! ****'
        TYPE*,IAM(),'Emission Type is different from ORDINARIA.'
        TYPE*,IAM(),'Emission Type is ',ETYP,'.'
        TYPE*,IAM()
        CALL PRMYESNO('Do you want to continue [Y/N] ?',YESNO)
        IF(YESNO.NE.1) CALL GSTOP(GEXIT_OPABORT)
      ENDIF
C
C Number of Divisions
1000  CONTINUE
      CALL GET_VALUE(POS,2,DPPDIV,ORC_REC)
      IF(DPPDIV .LT. 1 .OR. DPPDIV .GT. PAGDIV) THEN
        ORC_ERR_STR = IAM()//' INVALID NUMBER OF DIVISIONS. SHOULD BE UP TO '//ITOC(PAGDIV,IND)
        CALL WRITE_LOG_FILE
      ENDIF
C
C Number Left Prizes per Serie
      CALL GET_VALUE(POS,2,EXTDIV,ORC_REC)
C
      MAXEXTDIV = 0
      IF(EXTDIV .LT. 0 .OR. EXTDIV .GT. PAGEDV) MAXEXTDIV = PAGEDV
      IF(DPPPLT .EQ. EM_ESP .AND. EXTDIV .NE. 1) MAXEXTDIV = 1
      IF(MAXEXTDIV .NE. 0) THEN
        ORC_ERR_STR = IAM()//' INVALID NUMBER OF EXTRA DIVS. SHOULD BE UP TO '//ITOC(MAXEXTDIV,IND)
        CALL WRITE_LOG_FILE
      ENDIF
C
C Set Total Number of Body Record(s) '02'
      ORC_TOT_REC_02 = DPPDIV+EXTDIV
C
      RETURN
      END
C
C**********************
C SUBROUTINE GET_REC_02
C**********************
C GET ORACLE INTERFACE FILE BODY RECORD '02'
C
C=======OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE GET_REC_02(POS)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:ORCCOM.DEF'
      INCLUDE 'INCLIB:PASNAM.DEF'
      INCLUDE 'INCLIB:DPPREC.DEF'
C
      INTEGER*4 POS,IND,GIND
      INTEGER*4 PLAN,EXTDIV,SHR,DIG,DTYP
      INTEGER*4 DIV,CNT_DIV/0/,CNT_EDIV/0/
      CHARACTER DS_FLG*1,PTYP*20
      INTEGER*4 DS_FLG_LEN/1/,PTYP_LEN/20/
      INTEGER*8 SHV
C
      COMMON /DPPCOM/ DPPREC,GIND
C
C Prize Plan
      CALL GET_VALUE(POS,4,PLAN,ORC_REC)
      IF(PLAN .NE. DPPPLAN) THEN
        ORC_ERR_STR = IAM()//' PLAN NUMBER NOT EQUAL TO PLAN NUMBER IN FILE NAME'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Division Number
      CALL GET_VALUE(POS,2,DIV,ORC_REC)
C
C Drawn Serie Flag
      DS_FLG = ORC_REC(POS:(POS+DS_FLG_LEN-1))
      POS = POS+DS_FLG_LEN
C
C Check Division Number based on Drawn Serie Flag
      IF(DS_FLG .EQ. 'Y') THEN
        CNT_DIV = CNT_DIV+1
C
        IF(DIV .NE. CNT_DIV) THEN
          ORC_ERR_STR = IAM()//' INVALID DIVISION NUMBER. SHOULD BE '//ITOC(CNT_DIV,IND)
          CALL WRITE_LOG_FILE
        ENDIF
C
        IF(CNT_DIV .GT. DPPDIV) THEN
          ORC_ERR_STR = IAM()//' INVALID NUMBER OF DIVISIONS. SHOULD BE '//ITOC(DPPDIV,IND)
          CALL WRITE_LOG_FILE
        ENDIF
C
      ELSEIF(DS_FLG .EQ. 'N') THEN
        CNT_EDIV = CNT_EDIV+1
C
        IF(DIV .NE. CNT_EDIV) THEN
          ORC_ERR_STR = IAM()//' INVALID EXTRA DIVISION NUMBER. SHOULD BE '//ITOC(CNT_EDIV,IND)
          CALL WRITE_LOG_FILE
        ENDIF
C
        EXTDIV = ORC_TOT_REC_02-DPPDIV
        IF(CNT_EDIV .GT. EXTDIV) THEN
          ORC_ERR_STR = IAM()//' INVALID NUMBER OF EXTRA DIVISIONS. SHOULD BE '//ITOC(EXTDIV,IND)
          CALL WRITE_LOG_FILE
        ENDIF
C
      ELSE
        ORC_ERR_STR = IAM()//' INVALID DRAWN SERIE FLAG. SHOULD BE Y OR N'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Amount of Winners
      CALL GET_VALUE(POS,6,SHR,ORC_REC)
      IF(DS_FLG .EQ. 'Y') DPPSHR(DIV) = SHR
      IF(DS_FLG .EQ. 'N') DPPEXSHR(DIV) = SHR
C
C Prize Value
      CALL GET_VALUE8(POS,12,SHV,ORC_REC)
      IF(DS_FLG .EQ. 'Y') DPPSHV(DIV) = SHV
      IF(DS_FLG .EQ. 'N') DPPEXSHV(DIV) = SHV
C
C Keep loading only for Drawn Serie
      IF(DS_FLG .EQ. 'N') RETURN
C
C Type of Prize
      PTYP = ORC_REC(POS:(POS+PTYP_LEN-1))
      POS = POS+PTYP_LEN
C
      DO IND = 1,MAXPRZTYP
        IF(PTYP .EQ. NAMPRZTYP(IND)) THEN
          DPPTYP(DIV) = IND
          GOTO 1000
        ENDIF
      ENDDO
C
      ORC_ERR_STR = IAM()//' INVALID PRIZE TYPE. SHOULD BE APR, CEN, SEQ OR DIG'
      CALL WRITE_LOG_FILE
C
C Draw Balls Extracted
1000  CONTINUE
      CALL GET_VALUE(POS,2,DPPWNUM(DIV),ORC_REC)
      IF(DPPTYP(DIV) .EQ. PR_SEQ .AND. DPPWNUM(DIV) .EQ. 0) THEN
        ORC_ERR_STR = IAM()//' INVALID DRAW BALLS EXTRACTED. CANNOT BE 0 FOR SEQUENCIA'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Digits
      CALL GET_VALUE(POS,2,DIG,ORC_REC)
      IF(DIG .LT. 1 .OR. DIG .GT. 5) THEN
        ORC_ERR_STR = IAM()//' INVALID DIGITS NUMBER. SHOULD BE 01,02,03,04 OR 05'
        CALL WRITE_LOG_FILE
      ENDIF
      IF(DPPTYP(DIV) .EQ. PR_CENT .AND. DIG .NE. 3) THEN
        ORC_ERR_STR = IAM()//' INVALID DIGITS NUMBER. SHOULD BE 03 FOR CENTENAS'
        CALL WRITE_LOG_FILE
      ENDIF
      DPPDIG(DIV) = FATOR(DIG)
C
C Do
      CALL GET_VALUE(POS,2,DPPIDNUM(DIV),ORC_REC)
      IF(DPPIDNUM(DIV) .LT. 0 .OR. DPPIDNUM(DIV) .GT. 4) THEN
        ORC_ERR_STR = IAM()//' INVALID DO NUMBER. SHOULD BE FROM 00,01,02,03 OR 04'
        CALL WRITE_LOG_FILE
      ENDIF
      IF(DPPTYP(DIV) .EQ. PR_SEQ .AND. DPPIDNUM(DIV) .NE. 0) THEN
        ORC_ERR_STR = IAM()//' INVALID DO NUMBER. SHOULD BE 0 FOR SEQUENCIA'
        CALL WRITE_LOG_FILE
      ENDIF
C
C Draw Type
      CALL GET_VALUE(POS,1,DTYP,ORC_REC)
      IF(DTYP .NE. DPPTYP(DIV)) THEN
        ORC_ERR_STR = IAM()//' INVALID DRAW TYPE. SHOULD BE FROM 1,2,3 OR 4'
        CALL WRITE_LOG_FILE
      ENDIF
C
      RETURN
      END
