C PROGRAM ROLPOL
C
C V04 22-MAR-2000 OXK SPTROLL added
C V03 14-MAY-1999 UXN Super Triple added.
C V02 21-JAN-1993 DAB Initial Release
C                     Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                     DEC Baseline
C V01 25-NOV-1991 GCAN INITIAL RELEASE FOR THE NETHERLANDS
C
C PROGRAM TO TRANSFER FUNDS FROM GAME TO GAME
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW

        PROGRAM ROLPOL
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:RECSCF.DEF'
	INCLUDE 'INCLIB:RECRDF.DEF'
	INCLUDE 'INCLIB:DSCREC.DEF'
	INCLUDE 'INCLIB:DWIREC.DEF'
	INCLUDE 'INCLIB:DDBREC.DEF'
	INCLUDE 'INCLIB:DCPREC.DEF'
	INCLUDE 'INCLIB:DTRREC.DEF'
	INCLUDE 'INCLIB:DSSREC.DEF'
	INCLUDE 'INCLIB:DSTREC.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'
C
C
	INTEGER*4   CONLU
	PARAMETER   (CONLU=6)		!Default Console Logical Unit.
C
	INTEGER*4   GFDB(7)		!Game File Descriptor Block.
	INTEGER*4   RFDB(7)		!Roll File Descriptor Block.
	INTEGER*4   GLUN		!Game Lun
	INTEGER*4   RLUN		!RDF file Lun
	INTEGER*4   FNUM		!Game # to Move From.
	INTEGER*4   TNUM		!Game # to Move To.
	INTEGER*4   AMOUNT		!Amount to Move.
	INTEGER*4   GNUM		!Game #.
	INTEGER*4   GTYP		!Game Type to Modify.
	INTEGER*4   GIND		!Game Index.
	INTEGER*4   DRAW		!Draw # to Add Mony to.
	INTEGER*4   ST			!Subroutine Return Status.
	INTEGER*4   REV			!Program Revision
	INTEGER*4   SEDFLG		!= 1 if Pool will be Seeded.
C
	LOGICAL	    TYPFLG		!Game Type Found Flag.
C
	DATA	    REV/02/
C
C DISPLAY COPY WRITE MESSAGE
C
	CALL COPYRITE
C
C DISPLAY NAME AND REVISION INFORMATION
C
	WRITE(CONLU,8010) IAM(),REV
C
C GET SYSTEM CONFIGURATION INFO.
C
        CALL GETSCONF(SCFREC,ST)
        IF(ST.NE.0) THEN
           TYPE*,IAM(),'Unable to get System Configuration Info. ',
     *		       ' Status>',ST
           CALL GSTOP(GEXIT_FATAL)
        ENDIF
C
C DISPLAY AVAILABLE GAME TYPES TO MODIFY 
C
50	CONTINUE
	WRITE(CONLU,9000) IAM()
C
	DO 200 GTYP = 1,MAXTYP
	   TYPFLG = .FALSE.
	   DO 100 GIND = 1,MAXIND
	      GNUM = GTNTAB(GTYP,GIND)
	      IF(TYPFLG)                      GOTO 100	    !IF TYPE FOUND
	      IF(GNUM.LT.1.OR.GNUM.GT.MAXGAM) GOTO 100	    !INVALID GAME #
	      TYPFLG = .TRUE.
100	   CONTINUE
	   IF(TYPFLG) WRITE(CONLU,9010) IAM(),GTYP,GTNAMES(GTYP)
200	CONTINUE
C
C GET GAME TYPE TO MODIFY
C
	WRITE(CONLU,8000) IAM()
	CALL INPNUM('Enter Game Type to Modify or (E)xit: ',GTYP,1,MAXTYP,ST)
	IF(ST.NE.0) GOTO 1000			!GOTO PROGRAM EXIT
C
C OPEN ROLL FILE
C
	RLUN = 1
	CALL OPENW(RLUN,SCFSFN(1,RDF),4,0,0,ST)
	CALL IOINIT(RFDB,RLUN,RDFSEC*256)
	IF(ST.NE.0) THEN
	   CALL FILERR(SCFSFN(1,RDF),1,ST,0)
	   CALL CLOSEFIL(RFDB)
	   CALL GSTOP(GEXIT_FATAL)
	ENDIF
C
C READ ROLL FILE RECORD AND DISPLAY THE ROLPOL STATUS FOR THIS GAME TYPE
C
250	CONTINUE
	SEDFLG = 0
	CALL READW(RFDB,1,RDFREC,ST)
	IF(ST.NE.0) THEN
	   CALL FILERR(SCFSFN(1,RDF),2,ST,1)
	   CALL CLOSEFIL(RFDB)
	   CALL GSTOP(GEXIT_FATAL)
	ENDIF

	IF (GTYP.EQ.TSPT) THEN
	    CALL SPTROLL(RDFREC)
	    GOTO 900
	ENDIF
C
C LOOP FOR ALL GAME INDEXES WITHIN THIS GAME TYPE
C
	WRITE(CONLU,9015)
	WRITE(CONLU,9020)
	DO 300 GIND = 1,MAXIND
	    GNUM = GTNTAB(GTYP,GIND)
	    IF(GNUM.LT.1.OR.GNUM.GT.MAXGAM) GOTO 300
	    WRITE(CONLU,9030) GIND,GTNAMES(GTYP),
     *			      CMONY(RDFPOL(GNUM),10,BETUNIT),
     *			      RDFADW(GNUM),CMONY(RDFADR(GNUM),10,BETUNIT),
     *			      RDFDRW(GNUM),CMONY(RDFUSD(GNUM),10,BETUNIT)
300	CONTINUE
C
C GET GAME INDEX TO MOVE FROM 
C
	WRITE(CONLU,8000) IAM()
	CALL INPNUM('Enter index # to move FROM: ',
     *		     FNUM,1,MAXIND,ST)
	IF(ST.EQ.-1) GOTO 50
	IF(ST.NE.0) CALL GSTOP(GEXIT_OPABORT)
	FNUM = GTNTAB(GTYP,FNUM)
	IF(FNUM.LT.1.OR.FNUM.GT.MAXGAM) THEN
	   WRITE(CONLU,9040) IAM(),FNUM
	   GOTO 250
	ENDIF
C
C GET AMOUNT TO MOVE
C
	CALL INPMONY('Enter Amount to move          : ',
     *		      AMOUNT,BETUNIT,ST)
	IF(ST.NE.0) GOTO 50
C
C CHECK AMOUNT / CHECK FOR SEED
C
	IF(AMOUNT.GT.RDFPOL(FNUM)) THEN
	   WRITE(CONLU,9045) IAM()
	   CALL INPYESNO('Do you want continue anyway  ? ',SEDFLG)
	   IF(SEDFLG.NE.1) THEN
	      WRITE(CONLU,9050) IAM(),CMONY(AMOUNT,10,BETUNIT),
     *				CMONY(RDFPOL(FNUM),10,BETUNIT)
	      GOTO 250
	   ENDIF
	ENDIF
C
C GET GAME INDEX TO MOVE TO
C
	CALL INPNUM('Enter index # to move TO            : ',
     *		     TNUM,1,MAXIND,ST)
	IF(ST.NE.0) GOTO 50
	TNUM = GTNTAB(GTYP,TNUM)
	IF(TNUM.LT.1.OR.TNUM.GT.MAXGAM) THEN
	   WRITE(CONLU,9040) IAM(),TNUM
	   GOTO 250
	ENDIF
C
C GET DRAW TO MOVE TO
C
	CALL INPNUM('Enter Draw # to move to       : ',
     *		     DRAW,1,99999,ST)
	IF(ST.NE.0) GOTO 50
C
C OPEN GAME FILE TO MOVE TO
C
	GLUN = 2
        CALL OPENW(GLUN,SCFGFN(1,TNUM),4,0,0,ST)
        IF(GTYP.EQ.TWIT) THEN
           CALL IOINIT(GFDB,GLUN,DWISEC*256)
        ELSEIF(GTYP.EQ.TSCR) THEN
           CALL IOINIT(GFDB,GLUN,DSCSEC*256)
        ELSEIF(GTYP.EQ.TDBL) THEN
           CALL IOINIT(GFDB,GLUN,DDBSEC*256)
        ELSEIF(GTYP.EQ.TCPL) THEN
           CALL IOINIT(GFDB,GLUN,DCPSEC*256)
        ELSEIF(GTYP.EQ.TSSC) THEN
           CALL IOINIT(GFDB,GLUN,DSSSEC*256)
        ELSEIF(GTYP.EQ.TTRP) THEN
           CALL IOINIT(GFDB,GLUN,DTRSEC*256)
        ELSEIF(GTYP.EQ.TSTR) THEN
           CALL IOINIT(GFDB,GLUN,DSTSEC*256)
        ELSE
           WRITE(CONLU,9040) IAM(),TNUM
           CALL CLOSEFIL(RFDB)
           CALL CLOSEFIL(GFDB)
           CALL GSTOP(GEXIT_FATAL)
        ENDIF
C
C READ GAME FILE AT SPECIFIED DRAW, UPDATE POOL AMOUNT AND WRITE RECORD BACK
C
	IF(GTYP.EQ.TWIT) THEN
	   CALL READW(GFDB,DRAW,DWIREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DWISTS.LT.GAMINF).OR.(DWISTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DWISTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DWIPOL(1) = DWIPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DWIREC,ST)
           IF(ST.NE.0) THEN
              CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
              CALL CLOSEFIL(GFDB)
              CALL GSTOP(GEXIT_FATAL)
           ENDIF

	ELSEIF(GTYP.EQ.TSCR) THEN
	   CALL READW(GFDB,DRAW,DSCREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DSCSTS.LT.GAMINF).OR.(DSCSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DSCSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DSCPOL(1) = DSCPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DSCREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF

	ELSEIF(GTYP.EQ.TDBL) THEN
	   CALL READW(GFDB,DRAW,DDBREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DDBSTS.LT.GAMINF).OR.(DDBSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DDBSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DDBPOL(1) = DDBPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DDBREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF

	ELSEIF(GTYP.EQ.TCPL) THEN
	   CALL READW(GFDB,DRAW,DCPREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DCPSTS.LT.GAMINF).OR.(DCPSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DCPSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DCPPOL(1) = DCPPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DCPREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF

	ELSEIF(GTYP.EQ.TSSC) THEN
	   CALL READW(GFDB,DRAW,DSSREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DSSSTS.LT.GAMINF).OR.(DSSSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DSSSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DSSPOL(1) = DSSPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DSSREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF

	ELSEIF(GTYP.EQ.TTRP) THEN
	   CALL READW(GFDB,DRAW,DTRREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DTRSTS.LT.GAMINF).OR.(DTRSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DTRSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DTRPOL(1) = DTRPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DTRREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF

	ELSEIF(GTYP.EQ.TSTR) THEN
	   CALL READW(GFDB,DRAW,DSTREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),2,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
C CHECK GAME STATUS
C
	   IF((DSTSTS.LT.GAMINF).OR.(DSTSTS.GT.GAMBFD)) THEN
	      WRITE(CONLU,9060) IAM(),DSTSTS
	      CALL CLOSEFIL(GFDB)
	      CALL CLOSEFIL(RFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
C
	   DSTPOL(1) = DSTPOL(1) + AMOUNT
C
	   CALL WRITEW(GFDB,DRAW,DSTREC,ST)
	   IF(ST.NE.0) THEN
	      CALL FILERR(SCFGFN(1,TNUM),3,ST,DRAW)
	      CALL CLOSEFIL(GFDB)
	      CALL GSTOP(GEXIT_FATAL)
	   ENDIF
	ENDIF
	CALL CLOSEFIL(GFDB)
C
C UPDATE ROLL POOL FILE (ONLY IF NOT SEEDED)
C
	IF(SEDFLG.NE.1) RDFPOL(FNUM) = RDFPOL(FNUM) - AMOUNT
	RDFDRW(TNUM) = DRAW
	RDFADR(TNUM) = AMOUNT
	RDFUSD(TNUM) = AMOUNT
C
C WRITE UPDATED RECORD BACK 
C
900	CONTINUE
	CALL WRITEW(RFDB,1,RDFREC,ST)
	IF(ST.NE.0) THEN
	   CALL FILERR(SCFSFN(1,RDF),3,ST,1)
	   CALL CLOSEFIL(RFDB)
	   CALL GSTOP(GEXIT_FATAL)
	ENDIF
C
C GO BACK AND DISPLAY VALUES
C
	IF (GTYP.EQ.TSPT) GOTO 50
	GOTO 250
C
C CLOSE ALL FILES
C
1000	CONTINUE
	CALL CLOSEFIL(RFDB)
	CALL CLOSEFIL(GFDB)
	CALL GSTOP(GEXIT_SUCCESS)
C

8000	FORMAT(1X,A)
8010	FORMAT(1X,A,'<<<<< ROLPOL  V',I2.2,1X
     *  'Rollover for Oddset games >>>>>'/)
9000	FORMAT(1X,A,'Available Game Types to be Modified:',/)
9010	FORMAT(1X,A,'Type - ',I2,' Name - ',A8)
9015	FORMAT(/,32X,'Last Drw',13X,'Curr Drw')
9020	FORMAT(1X,'Index',1X,'Game Name',4X,'Total Amt',4X,
     *		    'Added',3X,'Amt Added',4X,'Added',4X,'Amt Used'/)
9030	FORMAT(2X,I2,3X,A8,4X,A10,5X,I4,2X,A10,5X,I4,2X,A10)
9040	FORMAT(1X,A,'Invalid Game selected , Game # ',I2)
9045	FORMAT(1X,A,'The entered amount is greater then the Poll ')
9050	FORMAT(/,1X,A,'Selected Amount   ',A10,
     *                ' is greater then the',/,18X,'Total Pool Amount ',A10)
9060	FORMAT(/,1X,A,'Invalid event, no use moving money here! ST = ',I4)
	END
