C PROGRAM POOLPRO
C
C V13 26-JUL-2000 UXN NRUNTSK() replaced with START() 
C V12 15-FEB-2000 OXK # of rows as argument to POOLSPT (Vakio changes)
C V11 17 Apr 1996 HXK Release of Finland for X.25, Telephone Betting, 
C		      Instant Pass Thru Phase 1
C V10 21 Jan 1993 DAB Initial Release
C  		      Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  		      DEC Baseline
C V09 09-MAY-1991 MP  ADDED CALL TO 'SNIF_AND_WRKSET
C V08 16-JUN-1991 -   CHANGES TO DEFINE THE QUEUES EARLIER DURING SUSPENSION
C V07 10-APR-1991 MP  ELIMINATED USAGE OF THE VOLUME NAME 'XRAM'
C V07 08-APR-1991 MP  ELIMINATED NON-USED VARIABLE 'CLOSED'
C V05 07-APR-1991 M.P MOVED 'POOLINI' ROTINE TO 'RESET' PROGRAM
C		      MOVED LTOPOL_RAM TO 'P' ARRAY - SEE DESPAR.DEF
C V04 07-JAN-1991 M.P MODIFIED TO USE RAM-RESIDENT POOL PAGES.
C V03 01-AUG-1990 XXX RELEASED FOR VAX
C V02 03-MAY-1990 WO&WS SPORT SYSTEM BET SIZE INCREASED
C V01 01-FEB-1989 WS  INITIAL RELEASE FOR SWEDEN
C
C     POOLPRO.FTN
C     ___________
C
C DESCRIPTION  :
C
C   POOLPRO.FTN-THIS PROGRAM WILL REMOVE DATA FROM LTOQ1 AND
C                 PUT THE DATA INTO ONE OF THREE OTHER QUEUES THAT
C                 WILL CONTAIN ONLY THE LOTTO OFFSETS FOR THAT DATA
C                 PAGE OF THE LOTTO POOLS FILE.
C                 IF OFFSET BELONGS TO CURRENT PAGE IN MEMORY THEN
C                 UPDATE MEMORY ELSE INSERT OFFSET TO THE BANK QUEUE
C                 FOR THAT DATA PAGE.
C
C     REV. HISTORY:
C     4/21/88 - MODIFIED TO BE GENERIC FOR ANY GAME
C                     SUPRESSED
C
C     1/07/91 - M.P.
C		DEC-VAX BASE LEVEL 0 RELEASE.
C		MODIFIED TO USE RAM-RESIDENT POOL PAGES.
C		  THE FIRST SET OF PAGES FROM 'LTOPOL.FIL' ARE ASSUMED
C		TO RESIDE IN 'LTOPOL' COMMON AREA . THE AREA IS LARGE
C		ENOUGH TO CONTAIN A FULL SET OF POOL PAGES
C		(CURRENTLY ~12MB). DURING FIRST CUT, 'PAGEUPD' ROUTINE
C		JUST COPIES DATA FROM 'ACTIVE' PAGE TO ONE OF THESE
C		PAGES, IMMITATING THE PROCESS OF SWAPPING PAGES WITH
C		THE DISK FILE. IN THE NEXT RELEASE UPDATES COULD BE
C		DONE DIRECTLY INTO THE AREA WHERE POOL PAGES RESIDE,
C		THUS AVOIDING NEED TO SWAP PAGES.
C		  THE CODE THAT SUPPORTS FILE-BASED PAGE SWAPPING IS
C		PRESERVED TO BE USED BY THE SYSTEM IN ENVIRONMENTS
C		WITH RAM DISK (OR WITH 'LTOPOL.FIL' FILE ON A REGULAR
C		DISK). THE RAM-BASE PAGING OF POOLS IS DONE WHEN
C 10-APR-91 MP  P(LTOPOL_RAM) VARIABLE IS NOT EQUAL TO
C		LTOPOL_FIL_VALUE
C		VOLUME NAME FOR THE LOTO POOLS FILE HAS TO BE DEFINED
C		SINCE THE FILE IS STILL USED AT TIME OF CHECKPOINTS
C		FOR ROUTINES ACCESSING 'LTOPOL.FIL'.
C		  AT TIME OF CHECKPOINT THE 'LTOPOL' COMMON AREA IS WRITTEN
C		TO 'LTOPOL.FIL' AND ONE OF CHECKPOINT FILES (CHK2 OR CHK4).
C		TWO WRITE STATEMENTS ARE DONE SIMULTANEOUSLY, MAKING THE
C		TOTAL TIME OF POOL AREA BEING NON-ACCESSIBLE IN THE
C		RANGE OF 10-20 SECONDS FOR THE 12MB POOL AREA (IN THE TEST
C		FILES RESIDED ON RA-90 DISKS ON HSC). 'LTOPOL.FIL' AND
C		CHECKPOINT FILES SHOULD RESIDE ON DIFFERENT DISK VOLUMES.
C		
C
C====================================================================
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM POOLPRO
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:POOLLTO.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:LTOPOL.DEF'
C
C
	INTEGER*4 BNK, NOPAGEUPD, BASE_PAGE, QUEUE, GAM, ADD
	INTEGER*4 OFF, ON_THE_QUEUE, SYSNR, STATUS, SAVEQUE
	INTEGER*4 SAVEOFF, OFFSET, WT, REMSTAT, ST, PHASE
	INTEGER*4 NOCHECK0, INDX
C
	REAL*8 R8_OVERPROTSK/'OVERPRO '/
	INTEGER*4 SYSTEM_BOARD(5)        !TO STORE SYSTEM BOARD
	COMMON /QUEINDEX/ INDX
C
	INTEGER*4 FDB(7)
	COMMON /FDBCOM/ FDB
C
C INITIALIZE LOCAL AND GLOBAL VARIABLES
C
	COMMON /NOCHECK0/ NOCHECK0
C
	CALL COPYRITE
C V02
	CALL SNIF_AND_WRKSET
C
	NOCHECK0=-1
C
C	APR 7,91. M.P.:
C	INITIALIZATION OF QUEUES IS DONE BY RESET
C***	CALL POOLINI                     !INITIALIZE ALL POOL QUEUES
C
	LCHKSTOP=0
	LCHKPNT=0
	LCHKFIL=0
	LCHKSER=0
	PHASE=1                      !CHEKPOINT PHASE
	LTQNUM=1
	INDX=LTQNUM                      !INITIALIZE LTOQ1 INDEX
	CALL START(R8_OVERPROTSK)
	LTSKSTAT=2                     !SET POOLPRO ACTIVE TASK FLAG.
C
C======================== OPEN LOTTO POOL FILE ======================
5	CONTINUE
C
C	'LPR' FILE IS WRITTEN BY POOLPRO AT CHECKPOINT TIME
C
	CALL OPENQW(2,SFNAMES(1,LPR),4,0,0,ST)
	IF(ST.NE.0) THEN
	    CALL POOL_FILERR(LPR, 3, ST, 0)
	    CALL GPAUSE
	    GOTO 5
	ENDIF
	CALL IOQINIT(FDB,2,LTOSEC*256)
C
	LTCURPAG=0
	CALL PAGEUPD(FDB,0,PHASE)    !INITIALISE 1-ST PAGE
C
	REMSTAT=0
C====================================================================
10	CONTINUE
	WT=0
C
C   REMOVE DATA FROM LTOQ1 AND DETERMINE WHICH QUEUE IT BELONGS IN.
C
20	CONTINUE
	CALL RTL(OFFSET,LTOQ1(1,INDX),REMSTAT)
	IF (REMSTAT.EQ.2) THEN
C
C     IF CHECKPOINT STARTED OR VERY LONG TIME WITH NO ACTIVITY
C     GOTO REFRESH PAGES AND PROCESS CHECKPOINT (IF NEEDED)
C
	  SAVEOFF=0
	  SAVEQUE=1            !TO SHUT COMPILER UP
	  IF(LCHKSTOP.EQ.LSUSPPOL.OR.
     *	      WT.GT.50.OR.LCHKPNT.EQ.LCMDCHK) GOTO 50
	  WT=WT+1
	  CALL XWAIT(500,1,STATUS)
	  GOTO 20
	ENDIF
	WT=0
C
	SYSNR=ABS(OFFSET)-OFFSIZE*LTNUMPAG
	IF (SYSNR.GT.0)    THEN  !IF SYSTEM BET
C*
C*    V02, INCREASED SIZE FOR SPORTS BETS
C*
25	   CONTINUE
	   CALL RTL(ON_THE_QUEUE,LTOQ1(1,INDX),ST)
	   IF (ST.EQ.2)    THEN  !IF NOT READY YET
	      CALL XWAIT(100,1,ST)
	      GOTO 25
	   ENDIF
C*
	   DO 40, OFF=1,ON_THE_QUEUE
30	      CONTINUE
	      CALL RTL(SYSTEM_BOARD(OFF),LTOQ1(1,INDX),ST)
	      IF (ST.EQ.2) THEN
	         CALL XWAIT(50,1,ST)
	         GOTO 30
	      ENDIF
40	   CONTINUE
	   ADD=0
	   IF (OFFSET.LT.0) ADD=-1
	   IF (SYSNR.LT.OFFSIZE) THEN
	      CALL POOLSYS(SYSNR,SYSTEM_BOARD,ADD)
	   ELSE
	      SYSNR=SYSNR-OFFSIZE
	      GAM=SYSTEM_BOARD(1)     !1-ST OFFSET - GAME NR
	      CALL POOLSPT(SYSNR,SYSTEM_BOARD(2),GAM,ADD,LTPOOLBET(GAM))
	   ENDIF
	   GOTO 20
	ENDIF
C
	QUEUE=((ABS(OFFSET)-1)/OFFSIZE)+1  !DATA PAGE OF OFFSET
C
	BASE_PAGE=LTPOOL_PAGBASE(QUEUE)
	IF (LTPOOL_INWORD(QUEUE).EQ.4) THEN  !IF BYTE OFFSETS
	   QUEUE=(ABS(OFFSET)-1-LTPOOL_OFFSETBASE(QUEUE))/(OFFSIZE/2)
     *	         +BASE_PAGE
	ELSEIF (LTPOOL_INWORD(QUEUE).EQ.2) THEN  !IF I2 OFFSETS
	   QUEUE=(ABS(OFFSET)-1-LTPOOL_OFFSETBASE(QUEUE))/(OFFSIZE/4)
     *	         +BASE_PAGE
	ENDIF
C
	IF (QUEUE.EQ.1) THEN                     !UPDATE PAGE IN MEM
	  CALL POOLUPD(OFFSET,INDX,STATUS)     !UPDATE OF PAGE # 1
	  GOTO 20
	ENDIF
C
C     COMBINATIONS NOT IN MEMORY LOAD TO OTHER BANK QUEUES
C
C
	CALL ABL(OFFSET,BANK(1,QUEUE-1),ST)
	IF (ST.EQ.0) GOTO 20
	SAVEOFF=OFFSET
	SAVEQUE=QUEUE
	PHASE=1                !FORCE NO CHECKPOINTING PHASE
C====================================================================
C   UPDATE THE THREE OTHER DATA PAGES.SWITCH DATA PAGES FROM
C   MEMORY AND SSD.
C
50	CONTINUE
	IF (P(SUPPUD).EQ.1) THEN     !POOL UPD SUSPENDED DO NOTHING
C                                  ;IF POOLS UPDATE SUSPENDED
	  IF (LCHKSTOP.EQ.LSUSPPOL) GOTO 90  !IMMEDIATE SUSPEND
	  IF (LCHKPNT.EQ.LCMDCHK) INDX=LTQNUM
	  IF (LCHKPNT.EQ.LCMDCHK) LCHKPNT=LOVRCHK
C
	  IF (LCHKSTOP.EQ.LSTOP) GOTO 200
	  GOTO 10
	ENDIF
C
C     UPDATE ALL PAGES WITH OUTSTANDING QUEUES
C     FOR CHECKPOINT FORCE WRITING TO 2-ND SET OF PAGES
C
	NOPAGEUPD=0
D	IF(PHASE .EQ. 2) TYPE *, IAM(), 'START WRITING PAGES AT PHASE 2'
D	IF(PHASE .EQ. 2) CALL LIB$INIT_TIMER ()
	DO 80 BNK=1,BANKSORT
	  CALL RTL(OFFSET,BANK(1,BNK),ST)
	  IF (ST.NE.2) THEN
C
C     WRITE CURRENT PAGE AND READ NEXT PAGE
C
	    CALL PAGEUPD(FDB,BNK,PHASE)
	    NOPAGEUPD=-1
70	    CONTINUE
	    CALL POOLUPD(OFFSET,INDX,STATUS)  !UPDATE OF PAGE # BNK
	    CALL RTL(OFFSET,BANK(1,BNK),ST)
	    IF (ST.NE.2) GOTO 70
	  ELSE
	    IF (PHASE.EQ.2) THEN      !FOR CHECKPOINT
	        CALL PAGEUPD(FDB,BNK,PHASE)
	        NOPAGEUPD=-1
	     ENDIF
	  ENDIF
80	CONTINUE
C
C	IF POOLS ARE RAM-BASED AND THIS IS PHASE 2, WRITE DATA TO THE
C	CHECKPOINT (!) FILE.
C
	IF(P(LTOPOL_RAM)  .NE. LTOPOL_FIL_VALUE .AND. PHASE .EQ. 2) THEN
	    CALL POOLPRO_CHKP(FDB)
	ENDIF
D	IF(PHASE .EQ. 2) TYPE *, IAM(), 'ENDED WRITING PAGES AT PHASE 2'
D	IF(PHASE .EQ. 2) CALL LIB$SHOW_TIMER ()
C
C     RESTORE FIRST PAGE, FOR CHECKPOINT AND 1 PAGE SYSTEM
C     FORCE WRITING TO 2-ND SET OF PAGES
C
C
	IF (NOPAGEUPD.NE.0.OR.(NOPAGEUPD.EQ.0.AND.PHASE.EQ.2))
     *	     CALL PAGEUPD(FDB,0,PHASE)
C
C     UPDATE REMAINING OFFSET
C
	IF(SAVEOFF.NE.0) CALL ABL(SAVEOFF,BANK(1,SAVEQUE-1),ST)
C
C      PROCESS CHECKPOINT REQUEST
C
	IF (PHASE.EQ.2) THEN            !IF CHECKPOINT PHASE FINISHED
	  PHASE=1
	  INDX=LTQNUM
	  LCHKPNT=LOVRCHK
	ELSE
	  IF (LCHKPNT.EQ.LCMDCHK.AND.REMSTAT.EQ.2) PHASE=2
	ENDIF
C
	IF (REMSTAT.EQ.2.AND.LCHKSTOP.EQ.LSTOP) GOTO 200  !TERMINATE
C
	IF(LCHKSTOP.NE.LSUSPPOL.OR.PHASE.NE.1) GOTO 10    !CONTINUE
C
C--------------------------------------------------------
C
C     PROCESS POOLS SUSPENSION
C
90	CONTINUE
C
C	REDIFNE THE QUEUES AT THE BEGINNIG OF SUSPEND
C
	CALL DEFLST(LTOQ1(1,1),LQUE1-QHEDSZ)
	CALL DEFLST(LTOQ1(1,2),LQUE1-QHEDSZ)
	DO 95, BNK=1,BANKSORT
	  CALL DEFLST(BANK(1,BNK),BNKQ-QHEDSZ)
95	CONTINUE
	LCHKSTOP=LSUSPOVR
110	CONTINUE
	IF (LCHKSTOP.NE.0.AND.LCHKSTOP.NE.LSTOP) THEN
	  IF (LCHKPNT.EQ.LCMDCHK) INDX=LTQNUM
	  IF (LCHKPNT.EQ.LCMDCHK) LCHKPNT=LOVRCHK
C	  THE FOLLOWING MESSAGE COULD BE HELPFULL, BUT
C	  'POOLSAV' MAY SPEND TOO MUCH TIME BEFORE STOPING POOLPRO...
D	  TYPE *,IAM(),'WAITING FOR OVERPRO TO CHNAGE LCHKSTOP'
	  CALL XWAIT(2,2,ST)
	  GOTO 110
	ENDIF
C
C   READ 1-ST PAGE IF POOLS WERE SUSPENDED
C
	PHASE=1
C****	CALL DEFLST(LTOQ1(1,1),LQUE1-QHEDSZ)
C****	CALL DEFLST(LTOQ1(1,2),LQUE1-QHEDSZ)
C****	DO 120, BNK=1,BANKSORT
C****	  CALL DEFLST(BANK(1,BNK),BNKQ-QHEDSZ)
C****120	CONTINUE
	LTCURPAG=0
	CALL PAGEUPD(FDB,0,PHASE)
	GOTO 10
C
C-----------------------------------------------------
C
C     TERMINATE POOLPRO
C
200	CONTINUE
	LTSKSTAT=0
	CALL CLOSEQFIL(FDB)
	CALL GSTOP(GEXIT_SUCCESS)
	END
