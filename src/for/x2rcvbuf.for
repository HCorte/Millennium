C
C SUBROUTINE X2RCVBUF
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2RCVBUF.FOV                                 $
C  $Date::   17 Apr 1996 16:29:04                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - x2rcvbuf.for;1 **
C
C X2RCVBUF.FOR
C
C V09 12-SEP-95 DAS Integrate CHANGES FROM LEIPZIG (BUG FIXES)
C V08 12-DEC-94 DAS Integrate UK changes into X2X Baseline
C V07 20-OCT-94 DXG ADD MESSAGE COUNTER AND UPDATE STATS MSGS PER FRAME
C V06 18-JUL-94 WS MULTINETWORK CHANGES
C V05 05-APR-94 GPR USE X2X_I4_STATION TO DETERMINE STATION AND TERNUM
C V04  5-JUN-92 JWE Change format statement for OPS1...
C V03 19-MAY-92 JWE Don't setaddress of dial station from received message...
C V02 14-MAY-92 JWE Clear station address out to MAXLEN
C		    Fix binary search as per DAS intructions...
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C
C     X2RCVBUF.FTN
C     ___________
C
C     PROCESS INPUT BUFFER, THIS ROUTINE WILL PROCEESS INPUT BUFFERS,
C     IT WILL ALSO CALL ROUTINE TO PROCESS OUTPUT BUFFERS
C
C     ENTRY POINTS:
C     X2RCVBUF(BUF)                ;RECEIVE TRANSPORT BUFFER
C     X2ERROR(ERROR,SAP,PAR1,PAR2) ;ERROR REPORT SUBROUTINE
C     X2ADDLST(BUFFER,POINTER)     ;ADD TO THE WAIT LIST
C     X2REMLST(BUFFER,POINTER)     ;REMOVE FROM THE WAIT LIST
C     X2RCVMSG    - GET SINGLE MESSAGE FROM TDBH BUFFER
C     X2RCVFE    - GET SINGLE MESSAGE FROM FRONT-END FORMAT
C     X2RCVSTN    - GET SINGLE MESSAGE FROM STATION FORMAT
C     X2CHKFLG    - CHECK TDBH HEADER FLAGS
C     X2TDCMD     - CHECK FOR TDBH COMMAND
C     X2MSG       - PREPARE MESSAGE FOR X2XPRO
C     X2MSGSTN    - SET STATION # IN RESET MESSAGE REQUEST
C     X2GETSTN    - GET STATION NO
C
C     X2RCVBUF(BUF)
C     IN:
C        LAN BUFFER NUMBER
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2RCVBUF(BUF)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:AGTCOM.DEF'
	INCLUDE 'INCLIB:LANCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2PTLMES.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
        INCLUDE 'INCLIB:TASKID.DEF'
C
	INTEGER*4 BUF, DUMMY, HOST_ID, DEST_LAYER, STATION_NO
	INTEGER*4 TERMINAL_NO, MES_LEN, ST, DSAP, SSAP, PORT
	INTEGER*4 LOCAL_PORT
	INTEGER*4 DATA_LEN, POINTER, STATUS
	INTEGER*4 PROBUF/0/
	INTEGER*4 SUBNETWORK
	INTEGER*4 MSG_COUNTER	      !V07
C
	MSG_COUNTER = 0		      !V07
C
	CALL X2SNDBUF(STATUS)         !TRY TO PROCESS OUTPUT FIRST
C

	IF (BUF.LE.0) THEN   !IF NO BUFFER ON INPUT RELEASE GAME BUFFER
	   IF (PROBUF.NE.0) CALL X2RELBUF(PROBUF)
	   PROBUF=0
	   RETURN
	ENDIF
	POINTER=0
C
	IF (LANBUF(LANBTYP,BUF).EQ.LTYPDATA) THEN
	   DATA_LEN=LANBUF(LANDLEN,BUF)
	   SSAP=LANBUF(LANDORG,BUF)
	   DSAP=LANBUF(LANDDES,BUF)
C
	   IF (PROBUF.NE.0) GOTO 20
10	   CONTINUE
	   CALL  GETBUF(PROBUF)
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'IN X2RCVBUF, PROBUF ',PROBUF
	   IF (PROBUF.LE.0) THEN      !COULD BE DEADLOCK???
C
C     TO AVOID DEADLOCK, TRY TO GET BUFFERS TO OUTPUT WHEN NO BUFFERS
C     ARE AVAILABLE
C
	      CALL X2SNDBUF(STATUS)   !TRY TO DEQUE BUFFERS TO OUTPUT
	      IF (STATUS.NE.0) THEN
	         CALL XWAIT(50,1,ST)
	         X2X_LOOP_TIME=X2X_LOOP_TIME+50
	      ENDIF
	      GOTO 10                 !TRY AGAIN
	   ENDIF
C
20	   CONTINUE
C
	  CALL X2RCVMSG(LANBUF(LANDATAF,BUF),PRO(INPTAB,PROBUF),MES_LEN
     *	  ,TERMINAL_NO,STATION_NO,POINTER,SSAP,DSAP,DATA_LEN,
     *	   DEST_LAYER,HOST_ID,STATUS)
C

C          ***** Start V04 changes *****

           IF (X2X_I4_STATION) THEN
	      PRO(TERNUM,PROBUF)=TERMINAL_NO
	      PRO(LINENO,PROBUF)=STATION_NO
	   ELSE
	      HPRO(TERNUM,PROBUF)=TERMINAL_NO
	      HPRO(LINENO,PROBUF)=STATION_NO
	   ENDIF

C          ***** End V04 changes *****

	   HPRO(PRCSRC,PROBUF)=X2X_COM
	   HPRO(PRCDST,PROBUF)=0
	   HPRO(X2X_CONNCTL_OVR,PROBUF)=0
	   HPRO(X2X_DELIVER_OVR,PROBUF)=0
	   HPRO(X2X_HOST_ID,PROBUF)=HOST_ID
	   HPRO(TRCODE,PROBUF)=TYPREG
	   HPRO(QUENUM,PROBUF)=QIN
	   HPRO(MSGNUM,PROBUF)=0
	   PRO(TIMOFF,PROBUF)=X2X_LOOP_TIME
	   HPRO(INPLEN,PROBUF)=MES_LEN
	   HPRO(X2X_DEST,PROBUF)=DEST_LAYER
	   HPRO(X2X_LINK,PROBUF)=0

C          ***** Start V04 changes *****

           IF (X2X_I4_STATION) THEN
	      IF (IAND(DEST_LAYER,X2DEST_STATION).EQ.0)
     *	      PRO(LINENO,PROBUF)=SSAP !LINE # IS SSAP FOR XPORT
	   ELSE
	      IF (IAND(DEST_LAYER,X2DEST_STATION).EQ.0)
     *	      HPRO(LINENO,PROBUF)=SSAP !LINE # IS SSAP FOR XPORT
	   ENDIF

C          ***** End V04 changes *****

C
	   IF (MES_LEN.NE.0) THEN ! ANY MESSAGE TO GAME/X2X ?
	      MSG_COUNTER = MSG_COUNTER + 1				!V07
	      IF (STATUS.EQ.0) THEN       !IF TERMINAL MESSAGE RECEIVED
C
C	LOGIC TO DROP MESSAGES IF THE SUBNETWORK IS CONGESTED

		 SUBNETWORK=X2XE_SUBNETWORK(SSAP)
		 IF (X2XSN_MAX_THRUPUT(SUBNETWORK).NE.0) THEN
C
C	IF THROTTLE LOGIC ACTIVE
		    X2XSN_CURRENT_VOLUME(
     *		    X2XSN_CURRENT_UPDATE_POINTER,SUBNETWORK)=
     *			  X2XSN_CURRENT_VOLUME(
     *			  X2XSN_CURRENT_UPDATE_POINTER,SUBNETWORK)+1
		    IF (X2XSN_FLUSH_RATIO(SUBNETWORK).NE.0) THEN
		      X2XSN_CURRENT_FLUSH(SUBNETWORK)=
     *			  X2XSN_CURRENT_FLUSH(SUBNETWORK)-1
C
C	IF SHOULD FLUSH
		      IF (X2XSN_CURRENT_FLUSH(SUBNETWORK).LE.0) THEN
			CALL X2RELBUF(PROBUF)
			PROBUF=0
			X2XSN_CURRENT_FLUSH(SUBNETWORK)=
     *				  X2XSN_FLUSH_RATIO(SUBNETWORK)
			X2XS_TIMES_MESSAGE_FLUSHED(STATION_NO)=
     *			  	X2XS_TIMES_MESSAGE_FLUSHED(STATION_NO)+1
			IF (MOD(X2XSN_TOTAL_FLUSHED(SUBNETWORK),1000).EQ.0)
     *			  CALL OPS('Subnetwork congested ',SUBNETWORK,
     *				  X2XSN_FLUSH_RATIO(SUBNETWORK))
			X2XSN_TOTAL_FLUSHED(SUBNETWORK)=
     *			  X2XSN_TOTAL_FLUSHED(SUBNETWORK)+1
			GOTO 10
		      ENDIF
		    ENDIF
		 ENDIF
C
                 IF(BTEST(AGTTAB(AGTTYP,TERMINAL_NO),AGTMXT)) THEN
                   CALL X2RELBUF(PROBUF)
                   CALL OPS('WARNING MXT TERMINAL COMING THROUGH X2X:',TERMINAL_NO,0)
                   PROBUF=0
                 ELSE
	           IF (X2XT_PRO(TERMINAL_NO).NE.0) THEN !IF BUF. IN GAME
C
C BUFFER STUCK IN GAME.
C
C
	              CALL X2RELBUF(PROBUF)
C
C LET OPS KNOW THE FIRST TIME THIS HAPPENS ONLY
C
		      IF(X2XT_PRO(TERMINAL_NO).EQ.1) THEN
	                CALL OPS('WARNING-WAITING BUFFER IN GAME',0,0)
	                CALL OPS('WARNING-TERMINAL NUM',TERMINAL_NO,0)
		      ENDIF
C
C KEEP TRACK OF HOW MANY TIMES THIS HAS HAPPENED.
C (NOTE: X2XT_PRO() WAS FORMALLY USED AS POINTER TO NEXT BUFFER IN WAIT.
C  NOW USED AS ACCUMULATOR FOR NUMBER OF OCCURENCES)
C
		      X2XT_PRO(TERMINAL_NO) = X2XT_PRO(TERMINAL_NO) + 1
		      PROBUF=0					!V06
	           ELSE
 		      X2X_IN_WAIT_ADD=X2X_IN_WAIT_ADD+1
	              X2XT_PRO(TERMINAL_NO)=1
	              HPRO(X2X_LINK,PROBUF)=-1
                      IF (X2X_GAME_MODE.EQ.X2X_GAMEM_DAY) THEN
                        CALL QUEINP(PROBUF,ST)
                      ELSEIF (X2X_GAME_MODE.EQ.X2X_GAMEM_NIGHT) THEN
                        CALL QUETRA(X2P,PROBUF)
                      ELSE
                        CALL OPS(' Invalid Game Mode ',X2X_GAME_MODE,0)
                        RETURN
                      ENDIF
	             PROBUF=0
	           ENDIF
                 ENDIF
	      ELSE
	         HPRO(TRCODE,PROBUF)=TYPX2X_PRO  !CHECK FOR RELAY !!!!
C                                      ;AND RELAY DELIVERY ERR AND ACK
                 IF (X2X_GAME_MODE.EQ.X2X_GAMEM_DAY) THEN
                    CALL QUEINP(PROBUF,ST)
                 ELSEIF (X2X_GAME_MODE.EQ.X2X_GAMEM_NIGHT) THEN
                    CALL QUETRA(X2P,PROBUF)
                 ELSE
                    CALL OPS(' Invalid Game Mode ',X2X_GAME_MODE,0)
                    RETURN
                 ENDIF
	         PROBUF=0
	      ENDIF
	   ELSE
	      IF (STATUS.EQ.X2ERR_NOMORE) THEN
C
C	********** START V07 CHANGES **********
		 MSG_COUNTER = MIN0(MSG_COUNTER,
     *		     X2X_MAX_MSGS_PER_FRAME_INTERVAL)
                 IF(MSG_COUNTER.GT.0) THEN
	            X2XE_MSGS_PER_FRAME(MSG_COUNTER,SSAP) = 
     *		       X2XE_MSGS_PER_FRAME(MSG_COUNTER,SSAP) + 1
                 ELSE
                    CALL OPS('X2RCVBUF -- FRAME EMPTY ',SSAP,BUF)
                 ENDIF  
C	********** END V07 CHANGES **********
C
	         IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	          TYPE *,'RETURN X2RCVBUF, NO MORE'
	         RETURN
	      ELSEIF (IAND(STATUS,X2ERR_FATAL).NE.0) THEN !REALY BAD
	         CALL X2ERROR(STATUS,SSAP,DSAP,DUMMY)
	      ELSE
	         CALL X2ERROR(STATUS,SSAP,DSAP,DUMMY)
	      ENDIF
	      IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	          TYPE *,'RETURN RCVBUF 1: ',X2X_PTLMES(STATUS),MES_LEN
	      RETURN
	   ENDIF
	   IF (POINTER.LT.0) RETURN      !INVALID
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'NEXT MESSAGE IN RCVBUF, POINTER ',POINTER
	   GOTO 10
	ELSEIF (LANBUF(LANBTYP,BUF).EQ.LTYPCMD) THEN  !IF COMMAND
	   SSAP=LANBUF(LANDATAF+2,BUF)       !SOURCE SAP
	   DSAP=LANBUF(LANDATAF+3,BUF)       !DEST. SAP
	   CALL X2ERROR(X2ERR_DLL,SSAP,DSAP,LANBUF(LANDATAF,BUF))
           CALL X2ERROR(X2ERR_DLL,SSAP,DSAP,LANBUF(LANDATAF+1,BUF))
C
C
	   IF (LANBUF(LANDATAF+1,BUF).EQ.CCOMMAND) THEN !CAME ON LAN
C
	      IF (LANBUF(LANDATAF,BUF).EQ.CCONNIND) THEN !CONN INDICATN
C
C     CLEAR SAP FIRST, AND THEN INITIALISE IT
C
	         CALL X2CLRSAP(SSAP)
	         IF (X2XE_DEF_STATUS(SSAP).EQ.X2XES_NOTUP)
     *	            X2XE_ACTIVE=X2XE_ACTIVE+1
	         X2XE_DEF_STATUS(SSAP)=X2XES_ONLINE !KICK IT UP
	         X2XE_ACT_STATUS(SSAP)=X2XES_NOTUP !KICK IT UP
	         X2XE_FE_ID(SSAP)=0
	         X2XE_CAPACITY(SSAP)=0
	         X2XE_MAX_CAPACITY(SSAP)=0
	         X2XE_SEQ_XMIT(SSAP)=0
	         X2XE_SEQ_RECV(SSAP)=0
	      ELSEIF (LANBUF(LANDATAF,BUF).EQ.CDISIND) THEN !DISCONNECT
	         IF (X2XE_DEF_STATUS(SSAP).NE.X2XES_NOTUP) THEN
	            X2XE_ACTIVE=X2XE_ACTIVE-1
	            CALL X2CLRSAP(SSAP)               !CLEAR THIS SAP
	            X2XE_ACT_STATUS(SSAP)=X2XES_NOTUP !MAKE IT DOWN
	            X2XE_DEF_STATUS(SSAP)=X2XES_NOTUP !MAKE IT DOWN
C
C IF CONNECTION IS CLOSED FOR A SAP MARK ITS ASSOCIATED
C PORTS AS BAD.
C
                    DO 30 PORT=1,X2X_SAP_PORTS
		      LOCAL_PORT = X2XE_LOCAL_PORT(PORT,SSAP)
		      IF(LOCAL_PORT.NE.0) 
     *                   X2XPL_STATE(LOCAL_PORT) = X2XPS_DOWN
30                  CONTINUE
	         ENDIF
	      ENDIF
C
	   ELSEIF (LANBUF(LANDATAF+1,BUF).EQ.CREPLYOK) THEN !FROM DLL
	      IF (LANBUF(LANDATAF,BUF).EQ.CCONREQ) THEN
C
C           CLEAR SAP FIRST AND THEN INITIALISE IT
C
	         CALL X2CLRSAP(DSAP)
	         IF (X2XE_DEF_STATUS(DSAP).EQ.X2XES_NOTUP)
     *	            X2XE_ACTIVE=X2XE_ACTIVE+1
	         X2XE_DEF_STATUS(DSAP)=X2XES_ONLINE!MAKE ACTIVE
	         X2XE_ACT_STATUS(DSAP)=X2XES_NOTUP!MAKE ACTIVE
	         X2XE_FE_ID(SSAP)=0
	         X2XE_CAPACITY(SSAP)=0
	         X2XE_MAX_CAPACITY(SSAP)=0
	         X2XE_SEQ_XMIT(SSAP)=0
	         X2XE_SEQ_RECV(SSAP)=0
	      ELSEIF (LANBUF(LANDATAF,BUF).EQ.CDISREQ) THEN !DISCONNECT
	         IF (X2XE_DEF_STATUS(DSAP).NE.X2XES_NOTUP) THEN
	               X2XE_ACTIVE=X2XE_ACTIVE-1
	               CALL X2CLRSAP(DSAP)
	               X2XE_DEF_STATUS(DSAP)=X2XES_NOTUP  !MARK IT DOWN
	               X2XE_ACT_STATUS(DSAP)=X2XES_NOTUP  !MARK IT DOWN
	         ENDIF
	      ELSEIF (LANBUF(LANDATAF,BUF).EQ.CCLOSE) THEN !CLOSE SAP
	         IF (X2XE_DEF_STATUS(SSAP).NE.X2XES_NOTUP) THEN
	               X2XE_ACTIVE=X2XE_ACTIVE-1
	         ENDIF
	      ELSEIF (LANBUF(LANDATAF,BUF).EQ.COPEN) THEN !OPEN SAP
	         IF (X2XE_DEF_STATUS(SSAP).EQ.X2XES_NOTUP) THEN
	               X2XE_ACTIVE=X2XE_ACTIVE+1
	         ENDIF
	      ENDIF
	   ENDIF
C
C
	ELSE               !UNKNOWN TYPE
	   DSAP=LANBUF(LANDORG,BUF)
	   SSAP=LANBUF(LANDDES,BUF)
	   CALL X2ERROR(X2ERR_BUF,SSAP,DSAP,LANBUF(LANDATAF,BUF))
	ENDIF
C
	IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	        TYPE *,'LEAVING  X2RCVBUF '
	RETURN
	END
