C OIEST.FOR
C
C V27 15-JUN-2000 OXK CLEANUP W/ WARNINGS=ALL
C V26 05 Feb 1997 WPW Changes to have GVT dial-in and get the load.
C V25 28 Jan 1997 HXK IPS LOTGEN release
C V24 17 Apr 1996 HXK Release of Finland for X.25, Telephone Betting, 
C			Instant Pass Thru Phase 1
C V23 26 Jan 1995 DJO Made a temporary fixed to get around a terminal problem.
C V22 23 Jan 1995 DJO Added a GET_TTIME routine for calculating callback 
C			times for testing.
C V21 21 Jan 1995 DJO Changes made to support the test feature of the 
C			callback system.
C V20 16 Jan 1995 DJO Changed to not send back a call with no lock as 
C			the GVTRST logic default.
C V19 15 Jan 1995 CONSOLE Changed to pass 2 byte variables to the GET_CTIME 
C			routine.
C V18 14 Jan 1995 DJO Removed the potential for range errors when checking 
C			dummy station range.
C V17 13 Jan 1995 DJO Changed to use the new installation callback logic.
C V16 11 Jan 1995 DJO CHANGED TO UPDATE THE AGTLCDC VARIABLE FOR LAST TALKED 
C			TO LOGIC.
C V15 10 Jan 1995 SHEATHCOCK Fixed problems with callback logic.
C V14 27 Dec 1994 DJO Updates as a result of shakedown testing for install 
C			system.
C V13 10 Feb 1994 MTK REMOVED GVTPHN GLOBAL COMMON.
C V12 03 Jan 1994 SYSTEM Applying PVCS header for automatic revision history
C V11 21 Dec 1993 SYSTEM Initial revision.
C V10 04-MAY-1993 MCM RELEASED FOR GEORGIA
C V09 21-Jan-1993 ceb Added ability to better track ESTAB. Message. 
C V08 11-Jan-1993 ceb Modified per RFSS TX1107-65
C V07 20-Nov-1992 ceb Added GVTPHN as shared segment.
C V06 04-SEP-1992 NJA ADDED (RETRY COUNTS FOR PHONE NUMBERS)
C V05 12-AUG-1992 NJA ADDED (2ND PHONE NUMBER)
C V04 10-FEB-1992 JPJ ADDED (GVT)
C V03 05-FEB-1992 NJA ADDED (GVT REVBYT)
C V02 04-FEB-1992 NJA ADDED (2 BYTE CHECKSUM)
C V01 13-NOV-1991 JPJ RELEASED FOR VAX (INSTANTS)
C
C SUBROUTINE TO BUILD INSTANT ESTABLISHMENT OUTPUT MESSAGES.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXT
	SUBROUTINE OIEST(TRABUF,OUTTAB,OUTLEN)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PRMPRO.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
	INCLUDE 'INCLIB:CRSCOM.DEF'
	INCLUDE 'INCLIB:DESTRA.DEF'
	INCLUDE 'INCLIB:CHKSUMCM.DEF'
        INCLUDE 'INCLIB:X2XCOM.DEF'
        INCLUDE 'INCLIB:X2XSTN.DEF'
C
        INTEGER*4 MYCHKSUM, CHKLEN, IND
        INTEGER*4 ERRTYP, TER, TMPTIM, PLEN, ST
	INTEGER*4 DWNTBL(600), I, OFFSET, OFFSET_2
        INTEGER*4 TERNO, HOURS, MINS, CALLTIME

	LOGICAL   NOLINE,TESTOPT_OVERRIDE
C
	BYTE      OUTTAB(*)
	INTEGER*2 OUTLEN,I2CCITT(2)
	EQUIVALENCE (I4CCITT,I2CCITT)
C
C
	INTEGER*4   I4TEMP, CBUF(CDLEN)
	INTEGER*2   I2TEMP(2)
	BYTE	    I1TEMP(4)
	EQUIVALENCE (I4TEMP,I2TEMP,I1TEMP)
C
	DATA ERRTYP/Z90/
C
C CONTROL AND SEQUENCE NUMBER
C
	OUTTAB(1) = '20'X+TRABUF(TTRN)

C
C IF TRANSACTION STATUS IS NOT GOOD
C BUILD ERROR MESSAGE.
C
	IF(TRABUF(TSTAT).NE.GOOD.AND.
     *    (TRABUF(TERR).EQ.CBAD.OR.TRABUF(TERR).EQ.DESMOD.OR.
     *     TRABUF(TERR).EQ.NOTON)) THEN
	   OUTTAB(2) = ERRTYP
	   OUTTAB(5) = TRABUF(TERR)
	   IF(TRABUF(TERR).EQ.CBAD) OUTTAB(5)=NOTON
	   OUTLEN=5
	   GOTO 1000
	ENDIF

        TERNO = TRABUF(TTER)

C
C TYPE AND SUBTYPE
C
	OUTTAB(2) = 'D0'X
C
C TIME
C
	IND=5
	I4TEMP=TRABUF(TTIM)
	OUTTAB(IND+0) = I1TEMP(3)
	OUTTAB(IND+1) = I1TEMP(2)
	OUTTAB(IND+2) = I1TEMP(1)
	IND=IND+3
C
C SET SOFTWARE REVISION
C
	I4TEMP=P(GVTREV)
	OUTTAB(IND+0)=I1TEMP(1)
	OUTTAB(IND+1)=I1TEMP(2)
	OUTTAB(IND+2)=I1TEMP(3)
	OUTTAB(IND+3)=I1TEMP(4)
	IND=IND+4
C
C SET RESET FLAG
C
	I4TEMP=P(GVTDFL)
	IF (P(GVTDFL).EQ.4.AND.AGTTAB(ADLTIM,TRABUF(TTER)).EQ.0) THEN
	  I4TEMP = 0
	ENDIF
c...	IF(P(GVTREV).NE.TRABUF(TISFT).AND.P(GVTREV).NE.0.AND.
c...     *	   P(GVTREV).NE.'0000') I4TEMP=P(GVTFLG)
	IF((P(PRMSTR).NE.0.AND.TCP_CONNSTS.NE.TCCONN).OR.
     *     TRABUF(TERR).EQ.SUPR.OR.TRABUF(TERR).EQ.SDOR) I4TEMP='08'X
C
c...  ! V1.4 - if message from an un-installed GVT then set value to 64
c...    IF ( (TERNO.GE.X2XC_DUMMY_START_STN(CLASS_X28)) .AND.
c... *       (TERNO.LE.X2XC_DUMMY_END_STN(CLASS_X28))  )  THEN
c...	    I4TEMP = '40'X
c...	END IF
C
C IF RESET AND OVER MAX DOWN LOADS TELL TERMINAL TO CALL BACK LATER
C
	NOLINE=.FALSE.
	IF(IAND(I4TEMP,'01'X).NE.0) THEN
	  DO 100 I=1,P(MAXDWN)
	     TMPTIM=TRABUF(TTIM)
	     IF(TMPTIM.GE.0.AND.TMPTIM.LE.21600) THEN
	       TMPTIM=TMPTIM+86400
	     ENDIF
C
	     IF(TMPTIM.GT.DWNTBL(I)+P(DWNTIM)) THEN
	       DWNTBL(I)=TMPTIM
	       GOTO 200
	     ENDIF
100	  CONTINUE
	  NOLINE=.TRUE.
	  CALL BCLR(I4TEMP,0)
	  CALL BSET(I4TEMP,5)
200	  CONTINUE
	ENDIF
C
	TRABUF(TIRSTFLG) = I1TEMP(1)
	OUTTAB(IND+0) = I1TEMP(1)
	IND=IND+1
C
C SET RESET TIME
C
	I4TEMP=0
	IF(IAND(P(GVTDFL),'04'X).NE.0) THEN
	    I4TEMP=AGTTAB(ADLTIM,TRABUF(TTER))
	ENDIF
	OUTTAB(IND+0) = I1TEMP(3)
	OUTTAB(IND+1) = I1TEMP(2)
	OUTTAB(IND+2) = I1TEMP(1)
	TRABUF(TIRSTTIM) = I4TEMP
	IND=IND+3
C
C SET DATA KILL FLAG
C
	OUTTAB(IND+0)=0
	IND=IND+1
C
C DJO - DETERMINE IF TEST CALLBACK OPTION IS ACTIVE. IF SO, THEN CHECK TO
C       SEE IF WE HAVE GOTTEN ENOUGH GVT'S YET.  IF WE HAVE, THEN SET THE
C       'TSTTIM' AND 'TSTNUM' PARAMETERS TO 0.  IF WE HAVE NOT,  THEN ADD 
C       1 TO THE NUMBER OF TERMINALS FOUND FOR THE TEST AND SET THE OVERRIDE
C       FLAG.
C
	TESTOPT_OVERRIDE=.FALSE.
	IF(P(TSTTIM).NE.0.AND.P(TSTNUM).NE.0) THEN
          IF(TESTSET_CNT.LT.P(TSTNUM)) THEN	!STILL MORE TEST TERMS NEEDED
            TESTOPT_OVERRIDE=.TRUE.
	    TESTSET_CNT=TESTSET_CNT+1
	  ENDIF
	  IF(TESTSET_CNT.EQ.P(TSTNUM)) THEN	!ALL DONE GETTING TEST TERMS
            CBUF(1)=TSTTIM
	    CBUF(2)=0
	    CBUF(3)=TCPAR
	    CALL QUECMD(CBUF,ST)
            CBUF(1)=TSTNUM
	    CBUF(2)=0
	    CBUF(3)=TCPAR
	    CALL QUECMD(CBUF,ST)
	  ENDIF
	ENDIF
C
C SET MINUTES TO CALL BACK
C
 	IF(IAND(P(GVTFLG),'20'X).NE.0) THEN
	  I4TEMP=(86400-TRABUF(TTIM)+AGTTAB(ADLTIM,TRABUF(TTER))*60)/60
        ELSE
          I4TEMP=P(GVTSUP)
	ENDIF
C
	IF(NOLINE)		    I4TEMP=P(DWNTIM)/60
	IF(TRABUF(TERR).EQ.SUPR)    I4TEMP=P(GVTSUP)
	IF(TRABUF(TERR).EQ.SDOR)    I4TEMP=P(GVTSUP)
	IF(P(PRMSTR).NE.0.AND.TCP_CONNSTS.NE.TCCONN)   I4TEMP=P(GVTGPL)
	IF(P(GVTRST).NE.0) THEN
          IF(TSBIT(AGTTAB(AGTTYP,TRABUF(TTER)),AGTISF).NE.0) THEN
	    AGTHTB(AGTNCDC,TRABUF(TTER))=DAYCDC+P(GVTRST)
	    HOURS=(TRABUF(TTIM)/3600)
	    MINS=(TRABUF(TTIM)-(HOURS*3600))/60
	    CALLTIME=(HOURS*100)+MINS
	    AGTHTB(AGTCBT,TRABUF(TTER))=CALLTIME
 	  ENDIF
	  CALL GET_CTIME(AGTHTB(AGTNCDC,TRABUF(TTER)),DAYCDC,
     *                   AGTHTB(AGTCBT,TRABUF(TTER)),TRABUF(TTIM),
     *                   I4TEMP)
	ENDIF
	IF(TESTOPT_OVERRIDE) THEN
	   CALL GET_TTIME(TRABUF(TTIM),I4TEMP)
	ENDIF
C
C DJO - TEMPORARY FIX TO GET AROUND A GVT PROBLEM.  ONLY USED BY THE 
C       INSTALL SYSTEM.  GVT FIX WILL BE USED ONLINE, SO THIS WILL BE
C       REMOVED.
C
C	IF(I4TEMP.EQ.1439) I4TEMP=1440
	OUTTAB(IND+0) = I1TEMP(1)
	OUTTAB(IND+1) = I1TEMP(2)
	TRABUF(TIMINCB) = I4TEMP
	IND=IND+2
C
C SET CHECKSUMMING ON OR OFF
C
	OUTTAB(IND+0) = '00'X
	IF(P(SUPSUM).EQ.1) OUTTAB(IND+0) = 'FF'X
	TRABUF(TICHKSUM) = OUTTAB(IND)
	IND=IND+1
C
C SET CDC DATE
C
        I4TEMP = DAYCDC
	OUTTAB(IND+0) = I1TEMP(2)
	OUTTAB(IND+1) = I1TEMP(1)
        IND=IND+2
C
C SET PHONE NUMBER AND RETRY COUNT FOR GVT TO CALL 
C
	OFFSET=AGTBTB(AGTPHN,TRABUF(TTER))
	IF(OFFSET.LT.1.OR.OFFSET.GT.10) OFFSET=1
	PLEN = PHONE_LEN(OFFSET)
	OUTTAB(IND)  = PLEN
	IND=IND+1
C
	CALL MOVBYT(PHONE_NUM(1,OFFSET),1,OUTTAB,IND,PLEN)
	IND=IND+PLEN
	TRABUF(TIPHONE1_1) = PHONE_NUM(1,OFFSET)
	TRABUF(TIPHONE1_2) = PHONE_NUM(2,OFFSET)
	TRABUF(TIPHONE1_3) = PHONE_NUM(3,OFFSET)
C
	OUTTAB(IND) = PHONE_RTY(OFFSET)
	IND=IND+1
C
C Put in the CHECKSUM of each number
C
	I2CCITT(1)    = PHONE_CHK(OFFSET)
	OUTTAB(IND)   = I1CCITT(2)
	OUTTAB(IND+1) = I1CCITT(1)
	IND = IND + 2
C
C SET SECOND PHONE NUMBER FOR GVT TO CALL 
C
	IF (OFFSET .EQ. 1) THEN
	    OFFSET_2 = 2
	ELSE
	    OFFSET_2 = 1
	ENDIF
	PLEN = PHONE_LEN(OFFSET_2)
	OUTTAB(IND)  = PLEN
	IND=IND+1
C
	CALL MOVBYT(PHONE_NUM(1,OFFSET_2),1,OUTTAB,IND,PLEN)
	IND = IND + PLEN
	TRABUF(TIPHONE2_1) = PHONE_NUM(1,OFFSET_2)
	TRABUF(TIPHONE2_2) = PHONE_NUM(2,OFFSET_2)
	TRABUF(TIPHONE2_3) = PHONE_NUM(3,OFFSET_2)
C
	OUTTAB(IND) = PHONE_RTY(OFFSET_2)
	IND = IND + 1
C
C Put in the CHECKSUM of each number
C
	I2CCITT(1)    = PHONE_CHK(OFFSET_2)
	OUTTAB(IND)   = I1CCITT(2)
	OUTTAB(IND+1) = I1CCITT(1)
	IND = IND + 2
	OUTLEN=IND-1
C
C SET FORMAT IN AGTCOM
C
C DJO - UPDATE OF 'AGTCDC' CHANGED TO UPDATE 'AGTLCDC' WHICH IS NOW THE
C       VARIABLE USED TO HOLD THE LAST TALKED TO CDC.
C
	TER=TRABUF(TTER)
	AGTHTB(AGTLCDC,TER)=DAYCDC
C
C CALCULATE CHECKSUM
C
1000	CONTINUE
	I4CCITT = TRABUF(TCHK)
	OUTTAB(3) = I1CCITT(2)
	OUTTAB(4) = I1CCITT(1)
	CHKLEN=OUTLEN-1
	CALL GETCCITT(OUTTAB,1,CHKLEN,MYCHKSUM)
	I4CCITT = MYCHKSUM
	OUTTAB(3) = I1CCITT(2)
	OUTTAB(4) = I1CCITT(1)
	RETURN
	END
C
C SUBROUTINE TO CALCULATE A CALLBACK TIME IN MINUTES.
C
C INPUT
C   CALLCDC   - THE CDC ON WHICH TO CALL BACK
C   CALLTIM   - THE TIME OF DAY TO CALL BACK    (IN HHMM)
C   CURRCDC   - THE CURRENT CDC
C   CURRTIM   - THE CURRENT TIME                (IN SECONDS PAST MIDNIGHT)
C
C OUTPUT
C   MINUTES   - THE # OF MINUTES FROM CURRTIM TO CALLBACK IN.
C
        SUBROUTINE GET_CTIME(CALLCDC,CURRCDC,CALLTIM,CURRTIM,MINUTES)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
C
	INTEGER*2 CALLCDC,CALLTIM
        INTEGER*4 CURRCDC,CURRTIM,MINUTES
        INTEGER*4 TODAY_MINS,DAYS,CBDAY_MINS,HRS,MINS
C
C IF THE CALLBACK CDC IS TODAY OR BEFORE, SEND THE DEFAULT AS DEFINED BY
C P(GVTRST) (NUMBER OF DAYS).
C
	IF(CALLCDC.LE.DAYCDC) THEN    !IF CALLBACK TIME MISSED, USE DEFAULT
 	  MINUTES=P(GVTRST)*1440
	  RETURN
	ENDIF
C
C FIRST GET THE NUMBER OF MINUTES UNTIL MIDNIGHT TODAY
C
        TODAY_MINS=(86400-CURRTIM)/60
        DAYS=CALLCDC-CURRCDC-1
C
        HRS=CALLTIM/100
        MINS=MOD(CALLTIM,100)
        CBDAY_MINS=(HRS*60)+MINS
C
        MINUTES=TODAY_MINS+(DAYS*24*60)+CBDAY_MINS
C
        RETURN
        END
C
C SUBROUTINE TO CALCULATE A CALLBACK TIME TODAY IN MINUTES FOR THE TEST
C CALLBACK FEATURE.
C
C INPUT
C   CURR_TIME   - CURRENT TIME TODAY IN SECONDS PAST MIDNIGHT
C
C OUTPUT
C   MINUTES     - THE # OF MINUTES FROM CURR_TIME TO CALLBACK IN.
C
        SUBROUTINE GET_TTIME(CURR_TIME,MINUTES)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
C
	INTEGER*4 CB_HOURS,CB_MINS,CB_SECS
	INTEGER*4 TILL_MIDNIGHT,MINUTES,CURR_TIME
C
	CB_HOURS=P(TSTTIM)/100
	CB_MINS =MOD(P(TSTTIM),100)
	CB_SECS =(CB_HOURS*3600)+(CB_MINS*60)
	IF(CB_SECS.LT.CURR_TIME) THEN		!CALLBACK AFTER MIDNIGHT
	  TILL_MIDNIGHT=(86400-CURR_TIME)/60	!MINUTES TILL MIDNIGHT
 	  MINUTES=TILL_MIDNIGHT+CB_MINS+(CB_HOURS*60)
	ELSE					!CALLBACK TODAY
	  MINUTES=(CB_SECS-CURR_TIME)/60
	ENDIF
C
	RETURN
	END
