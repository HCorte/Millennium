C  GXSRC:SPCDLL.FOR
C  
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]SPCDLL.FOV                                   $
C  $Date::   13 Aug 1996 10:39:52                                         $
C  $Revision::   1.1                                                      $
C  $Author::   RXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C
C V08 12-JAN-99 WJK Increase display of segment number from 3 digits to 4.
C                   Decrease display of modified flag from 2 to 1.
C
C V02 15-sep-95 das Background load changes
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C
C SUBROUTINE TO DISPLAY ALL SPECTRA TERMINAL LOAD MODULES.
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE SPCDLL(BROADCAST_FLAG_MODIFIED)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C	INCLUDE 'INCLIB:GLOBAL.DEF'
C****	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:MSGCOM.DEF'

	INTEGER*4 BROADCAST_FLAG_MODIFIED

	INTEGER*4 YNFLG, OPT, EXT, BEGIND, CZERO, CSPACE
	INTEGER*4 LAST_BEGIND/1/
	INTEGER*4 LOAD, APPLICATION_NO, APPLICATION
	INTEGER*4 LODPCT
	INTEGER*4 LODPCT2
	INTEGER*4 LOAD_INDEX(2,MAXLOADS*MAXAPP)
	INTEGER*4 NEXT_INDEX_APP, NEXT_INDEX_LOAD, NEXT_LOAD, NEXT_APP
	INTEGER*4 NEXT_NON_EMPTY, NUM_LINES, MAX_LINES/16/

	DATA CZERO/Z0/,CSPACE/'    '/
	CHARACTER*1 FORGROUND_DISP(0:2) /' ','*',' '/
	INTEGER*4   I4
	INTEGER*2   I2(2)
	BYTE	    I1(4)
	EQUIVALENCE (I4,I2,I1)
	INTEGER*2   I2TEMP
	BYTE	    I1TEMP(2)
	EQUIVALENCE (I2TEMP,I1TEMP)
	INTEGER*4   REV1, REV2
	CHARACTER*1 C_REV1(4), C_REV2(4)
	EQUIVALENCE (REV1,C_REV1)
	EQUIVALENCE (REV2,C_REV2)
	INTEGER*4   HARDWARE_REV
C
C SET DEFAULT TO DISPLAY PAGE 1
C
	BROADCAST_FLAG_MODIFIED=0
	BEGIND=1
	CALL FASTSET(0,LOAD_INDEX,MAXLOADS*MAXAPP*2)
C
	NEXT_NON_EMPTY=0
	DO 50, NEXT_INDEX_APP=1,MAXAPP
	DO 50, NEXT_INDEX_LOAD=1,MAXLOADS
	    IF (SMFDLNAM(1,NEXT_INDEX_LOAD,NEXT_INDEX_APP).EQ.CZERO .OR.
     *	        SMFDLNAM(1,NEXT_INDEX_LOAD,NEXT_INDEX_APP).EQ.CSPACE) 
     *								  GOTO 50
	     NEXT_NON_EMPTY=NEXT_NON_EMPTY+1
	     LOAD_INDEX(1,NEXT_NON_EMPTY)=NEXT_INDEX_LOAD
	     LOAD_INDEX(2,NEXT_NON_EMPTY)=NEXT_INDEX_APP
50	CONTINUE

	GOTO 300                      !GO DISPLAY
100	CONTINUE
C
C PROMPT OPERATOR FOR REQUEST
C
	EXT=0
	OPT=0
	APPLICATION_NO=-1
	TYPE *,'Forground loads marked with *'
	TYPE *,' '
	CALL INPNUM('Enter load # or [M: More, H: hardware Rev, C: Continue] ',
     *	    OPT,1,MAXLOADS,EXT)
	IF (OPT.GT.0) THEN
	    CALL INPNUM('Enter application #            ',
     *      APPLICATION_NO,0,MAXAPP,EXT)
	    IF (APPLICATION_NO.LE.0) GOTO 100
	    BEGIND=LAST_BEGIND
	ENDIF
C
C IF EXIT REQUESTED THEN WRITE TO MEMORY AND BACK TO FILE
C
	IF(EXT.EQ.-5) RETURN
C
C IF MORE REQUESTED AND PAGE 2 ALREADY DIPLAYING THEN SWITCH
C TO PAGE 1 AND DISPLAY
C
	HARDWARE_REV=0
	IF (EXT.EQ.-9) THEN   !IF CHECKING FOR HARDWARE REV
	    HARDWARE_REV=-1
	    BEGIND=LAST_BEGIND
	ENDIF
	IF(EXT.EQ.-3.AND.LOAD_INDEX(1,BEGIND).EQ.0) THEN
	  BEGIND=1
	  GOTO 300
	ENDIF
	    
C
C IF CHANGE REQUESTED FOR A MODULE THEN MAKE APPROPRIATE CHANGES
C
	IF(OPT.GE.1) GOTO 500
C
C DISPLAY PAGE 2 BECAUSE WE ARE CURRENTLY ON PAGE 1
C
C
C DISPLAY PAGE OF DATA
C
300	CONTINUE
	CALL CLRSCR(5)
	WRITE(5,9000)
	NUM_LINES=0
	LAST_BEGIND=BEGIND
350	CONTINUE
	NUM_LINES=NUM_LINES+1
	IF (NUM_LINES.LE.MAX_LINES) THEN
	    LODPCT = 0
	    LODPCT2 = 0
	    IF (LOAD_INDEX(1,BEGIND).EQ.0) GOTO 100
	    LOAD=LOAD_INDEX(1,BEGIND)
	    APPLICATION=LOAD_INDEX(2,BEGIND)
	    NEXT_LOAD=LOAD_INDEX(1,BEGIND+MAX_LINES)
	    NEXT_APP=LOAD_INDEX(2,BEGIND+MAX_LINES)
	    IF (NEXT_LOAD.EQ.0) THEN
		NEXT_LOAD=MAXLOADS
		NEXT_APP=MAXAPP
	    ENDIF
	    BEGIND=BEGIND+1
	    IF (BEGIND.GT.MAXLOADS*MAXAPP) BEGIND=1 !DO ROUND ROBIN IF EXCEED
	    IF(SMFDLNAM(1,LOAD,APPLICATION).EQ.CZERO) 
     *			  SMFDLNAM(1,LOAD,APPLICATION)='    '
	    IF(SMFDLNAM(1,NEXT_LOAD,NEXT_APP).EQ.CZERO) 
     *			  SMFDLNAM(1,NEXT_LOAD,NEXT_APP)='    '
	    IF(SMFDLTAB(LOAD,NBRSEG,APPLICATION).NE.0) THEN
                LODPCT=SMFDLTAB(LOAD,C_NBRSEG,APPLICATION)
                LODPCT=LODPCT*1000/SMFDLTAB(LOAD,NBRSEG,APPLICATION)
	    ENDIF
	    IF(SMFDLTAB(NEXT_LOAD,NBRSEG,NEXT_APP).NE.0) THEN
                LODPCT2=SMFDLTAB(NEXT_LOAD,C_NBRSEG,NEXT_APP)
                LODPCT2=LODPCT2*1000/
     *		     SMFDLTAB(NEXT_LOAD,NBRSEG,NEXT_APP)
	    ENDIF
	    
	    I4=0
	    I2TEMP=SMFDLTAB(LOAD,LODREV,APPLICATION)
	    I1(1)=I1TEMP(2)
	    I1(2)=I1TEMP(1)
	    CALL I4TOHEX(I4,C_REV1,4)
	    I2TEMP=SMFDLTAB(NEXT_LOAD,LODREV,NEXT_APP)
	    I1(1)=I1TEMP(2)
	    I1(2)=I1TEMP(1)
	    CALL I4TOHEX(I4,C_REV2,4)
	    IF (HARDWARE_REV.NE.0) THEN
		IF (LOAD.EQ.MCP_LOAD_NO) THEN
		    I2(1)=SMFDLTAB(LOAD,DLL_ROMREV,APPLICATION)
		    I2(2)=SMFDLTAB(LOAD,DLL_ROMREV1,APPLICATION)
		    REV1=I4
		    I2(1)=SMFDLTAB(NEXT_LOAD,DLL_ROMREV,NEXT_APP)
		    I2(2)=SMFDLTAB(NEXT_LOAD,DLL_ROMREV1,NEXT_APP)
		    REV2=I4
		ELSE
		    I2TEMP=SMFDLTAB(LOAD,TERMINAL_ID_NO,APPLICATION)
		    I1(1)=I1TEMP(2)
		    I1(2)=I1TEMP(1)
		    CALL I4TOHEX(I4,C_REV1,4)
		    I2TEMP=SMFDLTAB(NEXT_LOAD,TERMINAL_ID_NO,NEXT_APP)
		    I1(1)=I1TEMP(2)
		    I1(2)=I1TEMP(1)
		    CALL I4TOHEX(I4,C_REV2,4)
		ENDIF
	    ENDIF

	    WRITE(5,9001) LOAD,APPLICATION,SMFDLNAM(1,LOAD,APPLICATION),
     *		  SMFDLNAM(2,LOAD,APPLICATION),
     *		SMFDLTAB(LOAD,NBRSEG,APPLICATION),
     *	      SMFDLTAB(LOAD,SNDFLG,APPLICATION),
     *	      FORGROUND_DISP(SMFDLTAB(LOAD,FOREGROUND_FLAG,APPLICATION)),
     *	      LODPCT/10,MOD(LODPCT,10),
     *	      SMFDLTAB(LOAD,LODADR,APPLICATION),
     *		REV1,	  !!!!!!!!!!SMFDLTAB(LOAD,LODREV,APPLICATION),
     *	      NEXT_LOAD,NEXT_APP,SMFDLNAM(1,NEXT_LOAD,NEXT_APP),
     *		  SMFDLNAM(2,NEXT_LOAD,NEXT_APP),
     *		SMFDLTAB(NEXT_LOAD,NBRSEG,NEXT_APP),
     *	      SMFDLTAB(NEXT_LOAD,SNDFLG,NEXT_APP),
     *	      FORGROUND_DISP(SMFDLTAB(NEXT_LOAD,
     *			      FOREGROUND_FLAG,NEXT_APP)),
     *	      LODPCT2/10,MOD(LODPCT2,10),
     *	      SMFDLTAB(NEXT_LOAD,LODADR,NEXT_APP),
     *		REV2	      !!!!!!!!!!!!!SMFDLTAB(NEXT_LOAD,LODREV,NEXT_APP)
	      GOTO 350
	ENDIF
C
	GOTO 100                   !GO AND ASK FOR OPTION
C
C MODULE FLAG CHANGE(S)
C
500	CONTINUE
	CALL WIMG(5,'Do you want to flag for broadcast [y/n]')
	CALL YESNO(YNFLG)
C
C IF YES WAS ANSWERED THEN MARK FILE FOR BROADCAST
C
	BROADCAST_FLAG_MODIFIED=-1
	IF(YNFLG.EQ.1) THEN
	  SMFDLTAB(OPT,SNDFLG,APPLICATION_NO)=1
	ENDIF
C
C IF NO WAS ANSWERED THEN UNMARK FILE FOR BROADCAST
C
	IF(YNFLG.EQ.2) THEN
	  SMFDLTAB(OPT,SNDFLG,APPLICATION_NO)=0
	ENDIF
	GOTO 300                    !DISPLAY PAGE OF DATA
C
C THE FOLLOWING ARE FORMATS USED
C
9000	FORMAT(21X,' A L T U R A    M O D U L E    D A T A  ',/,
     *	  2(1X,' LOAD/APP    SEGS MOD   CMP% MSG# REV'),/)
C****     *	   2(2X,'  MODULE   SEGS   MOD.    MSG# REV '),/)
C
C
C****9001	FORMAT(2(1X,I2,1X,A4,4X,I4,4X,I2,5X,I4,2X,Z4))

C9001	FORMAT(2(1X,I2,'/',I1,1X,A4,Z4.4,1X,I3,1X,I2,A1,2X,I2,'.',I1,
9001    FORMAT(2(1X,I2,'/',I2,1X,A4,Z4.4,1X,I4,1X,I1,A1,2X,I2,'.',I1, !V08
     *		  1X,I5,1X,A4))	      !!!!!!Z4.4))
	END 
