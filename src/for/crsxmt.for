C  GXSRC:CRSXMT.FOR
C  
C  $Log:   GXAFXT:[GOLS]CRSXMT.FOV  $
C  
C     Rev 1.1   05 Dec 1996 20:31:56   HXK
C  Updated for Finland IPS pre-release
C  
C     Rev 1.4   31 Mar 1995 12:10:26   DJO
C  Changed to fix a bug with the debugging feature.
C  
C     Rev 1.3   01 Sep 1994 17:15:22   MCM
C  SWAPPING BYTES IS NO LONGER NECESSARY FOR THE DEC LMS
C  
C     Rev 1.2   21 Jun 1994 13:39:24   MCM
C  CHANGED STRATUS TO INSTANT SYSTEM
C  
C     Rev 1.1   03 Jan 1994 20:05:26   SYSTEM
C  Applying PVCS header for automatic revision history
C  
C     Rev 1.0    21 Dec 1993 17:34:32   SYSTEM
C  Initial revision.
C
C
C
C V01 15-MAY-93 MCM RELEASED FOR GEORGIA (IRFSS #10085)
C
C V01 18-NOV-91 KWP INITIAL RELEASE FOR VAX
C
C This subroutine will attempt to get a transmit buffer,
C copy the buffer from the procom buffer, and place
C the formatted transmit buffer on the send queue.
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE CRSXMT(TYP,RCNT)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:CRSCOM.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:QUECOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
C
	INTEGER*4   PBUF            !Procom buffer number
	INTEGER*4   TBUF            !Transmit buffer
	INTEGER*4   XRFNUM          !Cross Reference #
	INTEGER*4   ST              !Status
	INTEGER*4   TASK            !Task id
	INTEGER*4   BLEN	    !Byte Length
	INTEGER*4   ROFF            !Byte Record offset
	INTEGER*4   RCNT            !Record Count
	INTEGER*4   FREEBUF	    !# of buffers free on the FREQUE
	INTEGER*4   TYP		    !Type of operation requested
C				    !0=normal, 1=send end of day message
C
	INTEGER*4   I4TEMP
	INTEGER*2   I2TEMP(2)
	BYTE	    I1TEMP(4)
	EQUIVALENCE (I4TEMP,I2TEMP,I1TEMP)
C
	TASK=CRS
        RCNT=0
C
C IF CRSXMT WAS CALLED WITH A 1 IN THE TYP FIELD THEN CREATE AN END OF
C DAY MESSAGE FOR THE INSTANT SYSTEM SYSTEM
C
	IF(TYP.EQ.1) GOTO 5000
C
C SEE IF WE HAVE ANYTHING ON THE CRSPRO'S QUEUE,
C
	CALL TOPQUE(TASK,PBUF)
	IF(PBUF.EQ.0) THEN
	  RCNT=0
	  GOTO 9000       !RETURN
	ENDIF
C
C CHECK THE NUMBER OF FREE BUFFERS, AND ENSURE THERE IS
C AT LEAST DOUBLE THE NUMBER OF FREE BUFFERS.
C IF NOT ENOUGH BUFFERS ARE AVAILABLE, CRSCHK
C WILL DETERMINE WHETHER TO REQUEUE OR TO TIMEOUT.
C
	CALL LISTSIZE(FREQUE,FREEBUF)
	IF(FREEBUF*2 .LT. TCBUFMAX) THEN
	  CALL CRSCHK(PBUF)
	  GOTO 9000
	ENDIF
C
C TRY TO GET A BUFFER TO USE TO TRANSMIT. IF NO BUFFERS
C ARE AVAILABLE, CRSCHK WILL DETERMINE WHETHER TO REQUEUE
C OR TIMEOUT.
C
	CALL RTL(TBUF,FREQUE,ST)
	IF(ST.EQ.2)THEN		    !NO BUFFERS AVAILABLE
	  CALL CRSCHK(PBUF)
	  GOTO 9000
	ENDIF
C
C CLEAR OUT THE CURRENT TCBUF
C
	CALL FASTSET(0,TCBUF(TCBUFBEG,TBUF),TCBUFSIZ-TCBUFBEG+1)
	RCNT=0
	ROFF=0
C
C
1000	CONTINUE
	RCNT=RCNT+1
C
C LENGTH OF MESSAGE IN BYTES
C
	I4TEMP=0
	I1TEMP(1)=BPRO(BINSTAB+1,PBUF)
	I1TEMP(2)=BPRO(BINSTAB+2,PBUF)
	BLEN=I4TEMP			!LENGTH OF TRANSACTION
C
C CROSS REFERENCE NUMBER
C
	I4TEMP=0
	I1TEMP(1)=BPRO(BINSTAB+5,PBUF)
	I1TEMP(2)=BPRO(BINSTAB+6,PBUF)
	I1TEMP(3)=BPRO(BINSTAB+7,PBUF)
	I1TEMP(4)=BPRO(BINSTAB+8,PBUF)
	XRFNUM=I4TEMP			!CROSS REFERENCE NUMBER
C
C COPY MESSAGE FROM PROCOM TO TCBUF
C
	CALL LIB$MOVC3(BLEN, BPRO(BINSTAB+1,PBUF),
     *			     B_TCBUF(B_TCBUFBEG+ROFF,TBUF))
C
	ROFF=ROFF+BLEN			!KEEP TRACK OF LENGTH IN BYTES
C
C ADD TRANSACTION TO THE TIMEOUT LIST
C
	CALL ADDTIMER(XRFNUM,PBUF)
C
C REMOVE BUFFER OFF OF CRSPRO'S QUEUE
C
	CALL DQUTRA(TASK,PBUF)
C
C CHECK IF BUFFER IS FULL
C
	IF(RCNT.GE.TCMAXREC) GOTO 2000
C
C CHECK FOR ANOTHER BUFFER TO SEND
C
	CALL TOPQUE(TASK,PBUF)
	IF(PBUF.EQ.0) GOTO 2000	    !NO BUFFERS
	GOTO 1000
C
C SEND BUFFER
C
2000	CONTINUE
C
C SET UP LENGTH OF MESSAGE FOR WRITE
C
	TCBUF(TCBUFLEN,TBUF)=ROFF
C
C CLEAR OUT THE LENGTH OF THE NEXT BUFFER( THIS DOES NOT GET SENT TO INSTANT 
C SYSTEM)
C
	B_TCBUF(B_TCBUFBEG+ROFF+0,TBUF)=0
	B_TCBUF(B_TCBUFBEG+ROFF+1,TBUF)=0
C
C UPDATE STATISTICS
C
	TCP_NUMBUF = TCP_NUMBUF + 1	    !NUMBER OF BUFFERS FORMATTED
	TCP_NUMREC = TCP_NUMREC + RCNT	    !NUMBER OF RECORDS
C
C IF DEBUG MODE IS ENABLED, DISPLAY THE MESSAGE TO THE
C CONSOLE.
C
	IF(P(XXDEBUG).EQ.0) 
     *     CALL PRTTCBUF(TBUF,B_TCBUFBEG,TCBUF(TCBUFLEN,TBUF),1)
C
	CALL ABL(TBUF,SNDQUE,ST)
	GOTO 9000
C
C
C END OF DAY MESSAGE FOR INSTANT SYSTEM
C
5000	CONTINUE
	CALL RTL(TBUF,FREQUE,ST)
	IF(ST.EQ.2)THEN		    !NO BUFFERS AVAILABLE
	  TYPE *,IAM(),'END OF DAY MESSAGE FOR INSTANT SYSTEM NOT BEING SENT'
	  GOTO 9000
	ENDIF
C
	CALL FASTSET(0,TCBUF(TCBUFBEG,TBUF),TCBUFSIZ-TCBUFBEG+1)
	TCBUF(TCBUFLEN,TBUF)=10
C
C LENGTH OF END OF DAY MESSAGE
C
	I4TEMP = 10
	B_TCBUF(B_TCBUFBEG+0,TBUF) = I1TEMP(1)
	B_TCBUF(B_TCBUFBEG+1,TBUF) = I1TEMP(2)
C
C TRANSACTION CODE OF END OF DAY MESSAGE
C
	I4TEMP = 86
	B_TCBUF(B_TCBUFBEG+8,TBUF) = I1TEMP(1)
	B_TCBUF(B_TCBUFBEG+9,TBUF) = I1TEMP(2)
C
	CALL ABL(TBUF,SNDQUE,ST)
	GOTO 9000
C
C RETURN TO CALLING PROGRAM.
C
9000	CONTINUE
	RETURN
	END
