C
C SUBROUTINE GUIRPC_017
C
C V05 08-NOV-2000 UXN  Files opened in GUIOPN and closed in GUICLS. 
C V04 24-JUN-2000 ANDY Start of Changes for Rolldown
C V03 18-APR-2000 AMY  USE COMMONS FOR LOCATION OF ASF
C V02 07-APR-2000 XXX  MOVED RPC PARAMETERS TO SERVCOM
C V01 06-JAN-2000 AMY  Initial revision.
C  
C GUIRPC_017.FOR
C
C This subroutine returns the line snapshot.
C
C Input parameters:
C	NONE
C
C Output parameters:
C
C	BYTE		OUTBUF(*)	OUTPUT MESSAGE
C	INTEGER*4	MES_LEN	MESSAGE LENGTH
C	INTEGER*4	RET_CODE:
C		0		-  no error, message accepted;
C		value >= 11	-  error number to be sent to Client.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE GUIRPC_017(OUTBUF,MES_LEN,RET_CODE)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:AGTINF.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
	INCLUDE 'INCLIB:DESTRA.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2XSTN.DEF'
	INCLUDE 'INCLIB:X2XSCL.DEF'
	INCLUDE 'INCLIB:X2XTER.DEF'
	INCLUDE 'INCLIB:RECAGT.DEF'
	INCLUDE 'INCLIB:DISKIO.DEF'
	INCLUDE 'INCLIB:PRMLOG.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
	INCLUDE 'INCLIB:GUIMCOM.DEF'
	INCLUDE 'INCLIB:GUIFIL.DEF'
C
	BYTE		OUTBUF(*)
	INTEGER*4	MES_LEN,RET_CODE,STN,FIRST
C
	INTEGER*4	I,J,ST,LAST,TERM,TERCNT
	INTEGER*4	MAXBYTE
	INTEGER*4	NUM_COLS,NUM_ROWS
	INTEGER*4       LOGREC(LREC*3)
C
	INTEGER*2   TERMS(X2X_MAXTERMS)	    !Terminals displayed
	CHARACTER   DROPS*(X2X_MAXTERMS)        !Drops displayed
	INTEGER*4   STATE                       !Stn/ter state
C
	BYTE		I1TEMP(4)
	INTEGER*4	I4TEMP
	EQUIVALENCE	(I1TEMP,I4TEMP)
C

	TERCNT = 0
	FIRST = 1
	MAXBYTE = 450
C
C  GET STATION NUMBER 
C
	CALL MOVBYT(OUTBUF,10,I4TEMP,1,4)
	STN=I4TEMP
C
C  IF INVALID LINE NUMBER, RETURN WITH ERROR
C
	IF (STN.LT.1.OR.STN.GT.X2X_STATIONS) THEN
	  RET_CODE = 11
	  RETURN
	ENDIF
C
C READ THE STATION RECORD.
C
	CALL READW(X2STNFDB,X2XTER_STN,X2XSTN_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OPS('Failed to read X2XSTN.FIL',ST,X2XTER_STN)
	  RET_CODE = 11
	  RETURN
	ENDIF
C
C READ THE STATION CLASS RECORD.
C
	CALL READW(X2SCLFDB,X2XSTN_STNCLS,X2XSCL_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OPS('Failed to read X2XSCL.FIL',ST,X2XSTN_STNCLS)
	  RET_CODE = 11
	  RETURN
	ENDIF

	  DO 2000 I=1,X2X_MAXTERMS
	    DO 2100 J=1,X2X_MAXPORT
		IF(X2XS_TERMS(I,J,STN).NE.0.OR.J.EQ.1) 
     *	   TERMS(I)=X2XS_TERMS(I,J,STN)		
2100	    CONTINUE
	    IF(TERMS(I).NE.0) THEN
	      DROPS(I:I)=X2XT_DROP_AD(TERMS(I))
	    ELSE
	      DROPS(I:I)=' '
	    ENDIF
	    IF(DROPS(I:I).LT.'@'.OR.DROPS(I:I).GT.'_') THEN
	      DROPS(I:I)=' '
	    ENDIF
2000	  CONTINUE
C
C Build RPC message
C
	CALL RPCARG_INIT() ! use RPC format
C
	NUM_COLS = 8
	NUM_ROWS = 1       ! # of rows is calculated withim GUIARG_* routines
	CALL GUIARG_NEXT_SET(OUTBUF,NUM_COLS)

	DO 150 I=1,X2X_MAXTERMS

	  IF (((TERCNT+1)*34+11).GT.MAXBYTE) GOTO 150
C
C READ THE AGENT RECORD
C
	  TERM = TERMS(I)

	  IF(TERM.EQ.0) GOTO 150

	  CALL READW(ASFFDB, TERM, ASFREC, ST)
	  IF (ST .NE. 0) THEN
	      CALL OPS('Failed to read ASF file',ST,TERM)
	      RET_CODE = 11
	      RETURN
	  ENDIF
C
C READ THE TERMINAL RECORD.
C
	  CALL READW(X2TERFDB,TERM,X2XTER_REC,ST)
	  IF(ST.NE.0) THEN
	      CALL OPS('Failed to read X2XTER.FIL',ST,TERM)
	      RET_CODE = 11
	      RETURN
	  ENDIF

	  CALL GUIARG_INT4(OUTBUF,X2XTER_PORT) ! PORT NUMBER
	  CALL GUIARG_INT4(OUTBUF,TERM)        ! TERMINAL NUMBER
	  CALL GUIARG_INT4(OUTBUF,AGTTAB(AGTNUM,TERM)) ! AGENT #

	  CALL ILBYTE(STATE,IX2XT_STATE,TERM-1)
	  CALL GUIARG_INT4(OUTBUF,STATE)            ! TERMINAL STATE
	  CALL GUIARG_INT4(OUTBUF,X2XT_DELAY(TERM)) ! CENTRAL DELAY
	  CALL GUIARG_INT4(OUTBUF,X2XT_NETWORK_DELAY(TERM)) ! NETWORK DELAY

	  CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SDROP)),LDROP) ! DROP ID
	  LAST = AGTTAB(ALSTRA,TERM)                ! LAST TRANSACTION TIME

C
	  IF (LAST.NE.0) THEN
C
C READ TERMINALS LAST TRANSACTION FROM LOG FILE
C
	      CALL GUI_RLOG(LAST,LOGREC,ST)
	      CALL LOGTRA(TRABUF,LOGREC)
          ENDIF
C
	  IF (ST.NE.0.OR.LAST.EQ.0) THEN
	      CALL GUIARG_CHAR(OUTBUF,%REF('        '),8)
	  ELSE
	      CALL GUIARG_TIME(OUTBUF,TRABUF(TTIM))
	  ENDIF

	  TERCNT = TERCNT + 1
C
150	CONTINUE
C
	CALL GUIARG_SET_MESLEN(MES_LEN)
C
	RETURN
	END
