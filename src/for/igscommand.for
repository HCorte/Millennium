C
C IGSCOMMAND.FOR
C
C SUBROUTINES TO DECODE THE COMMAND MESSAGE THAT HAS BEEN RECEVIED FROM THE "IGS"
C PLATFORM AND EXECUTE IN THE EVOLUTION SYSTEM THE COMMAND THAT HAS BEEN REQUESTED
C TO BE EXECUED
C
C     **************************************************************************
C
C        THIS ITEM IS THE PROPERTY OF GTECH CORPORATION, POVIDENCE, RHODE
C     ISLAND, AND CONTAINS CONFIDENTIAL AND TRADE SECRET INFORMATION. IT MAY
C     NOT BE TRANSFERRED FROM THE CUSTODY OR CONTROL OF GTECH EXCEPT AS AUTO -
C     RIZED IN WRITING BY AN OFFICER OF GTECH. NEITHER THIS ITEM NOR THE
C     INFORMATION IT CONTAINS MAY BE USED, TRANSFERRED, REPRODUCED, PUBLISHED
C     OR DISCLOSED, IN WHOLE OR IN PART, AND DIRECTLY OR INDIRECTLY, EXCEPT AS
C     EXPRESSLY AUTHORIZED BY AN OFFICER OR GTECH, PURSUANT TO WRITTEN AGREEMENT
C
C     Copyright 2000 GTECH Corporation. All Rights Reserved
C
C     **************************************************************************
C
C ******************************************************************************
C
C     SUBROUTINE: DECODE_AND_SEND_IGS_COMMAND
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 09 / 06 / 2017
C
C ******************************************************************************
C
C ROUTINE TO DECODE THE "IGS" COMMAND MESSAGE THAT HAS BEEN RECEIVED IN THE EVOLUTION
C SYSTEM AND EXECUTE THE COMMAND NUMBER THAT HAS BEEN REQUESTED IN THIS MESSAGE
C
C==== OPTIONS /CHECK=NOOVERFLOW
      SUBROUTINE DECODE_AND_SEND_IGS_COMMAND(MESS_FROM_IGS)
      IMPLICIT NONE
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'

      ! ROUTINE PARAMETERS
      BYTE MESS_FROM_IGS(*)   ! MESSAGE RECEIVED FROM "IGS" PLATFROM

      ! ROUTINE VARIABLES
      INTEGER * 8 IGS_MID      ! MESSAGE ID
C
      INTEGER * 4 IDX          ! INDEX COUNTER
      INTEGER * 4 AGT_NUM      ! AGENT NUMBER
      INTEGER * 4 IGS_CRN      ! CROSS REFERENCE NUMBER
      INTEGER * 4 IGS_HBN      ! HOST BUFFER NUMBER
      INTEGER * 4 IGS_CDC      ! HOST "CDC" DATE
      INTEGER * 4 TER_NUM      ! TERMINAL NUMBER
      INTEGER * 4 IGS_CAS      ! CONTROL AND SEQUENCE
      INTEGER * 4 IGS_MTS      ! MESSAGE TYPE AND MESSAGE SUBTYPE
      INTEGER * 4 IGS_CHK      ! CHECKSUM MESSAGE
      INTEGER * 4 GTYP         ! GAME TYPE
      INTEGER * 4 GIND         ! GAME INDEX
      INTEGER * 4 IGS_AGT      ! AGENT NUMBER
      INTEGER * 4 CMD_NUM      ! COMMAND NUMBER
      INTEGER * 4 CMD_VAL      ! COMMAND VALUE
      INTEGER * 4 CMD_SRC      ! COMMAND SOURCE
      INTEGER * 4 CMD_DATA(5)  ! COMMAND DATA
      INTEGER * 4 CMD_DTLN     ! COMMAND DATA LENGTH
      INTEGER * 4 SYS_LIVE     ! SYSTEM IS LIVE
      INTEGER * 4 I4TEMP       ! TEMPORAL I4 VARIABLE
C
      BYTE I1TEMP(4)           ! TEMPORAL I1 VARIABLE
C
      EQUIVALENCE(I4TEMP, I1TEMP)

      ! DECODE "IGS" INPUT MESSAGE -- AGENT NUMBER --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(1))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(2))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(3))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(4))
C
      AGT_NUM = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- CROSS REFERENCE NUMBER --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(5))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(6))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(7))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(8))
C
      IGS_CRN = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- HOST BUFFER NUMBER --
      I1TEMP(4) = 0
      I1TEMP(3) = 0
      I1TEMP(2) = ZEXT(MESS_FROM_IGS( 9))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(10))
C
      IGS_HBN = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- HOST "CDC" DATE --
      I1TEMP(4) = 0
      I1TEMP(3) = 0
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(11))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(12))
C
      IGS_CDC = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- TERMINAL NUMBER --
      I1TEMP(4) = 0
      I1TEMP(3) = 0
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(13))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(14))
C
      TER_NUM = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- CONTROL-SEQUENCE AND MESSAGE TYPE-SUBTYPE --
      IGS_CAS = ZEXT(MESS_FROM_IGS(15))
      IGS_MTS = ZEXT(MESS_FROM_IGS(16))

      ! DECODE "IGS" INPUT MESSAGE -- MESSAGE CHECKSUM --
      I1TEMP(4) = 0
      I1TEMP(3) = 0
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(17))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(18))
C
      IGS_CHK = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- GAME TYPE AND GAME INDEX --
      GTYP = ZEXT(MESS_FROM_IGS(19))
      GIND = ZEXT(MESS_FROM_IGS(20))

      ! DECODE "IGS" INPUT MESSAGE -- AGENT NUMBER, THE SECOND AGENT --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(21))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(22))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(23))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(24))
C
      IGS_AGT = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- MESSAGE ID NUMBER, FIRST PART --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(25))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(26))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(27))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(28))
C
      IGS_MID = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- MESSAGE ID NUMBER, SECOND PART --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(29))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(30))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(31))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(32))
C
      IGS_MID = IAND(ISHFT(IGS_MID, 32), 'FFFFFFFF00000000'X) + IAND(I4TEMP, 'FFFFFFFF'X)

      ! DECODE "IGS" INPUT MESSAGE -- COMMAND NUMBER --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(33))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(34))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(35))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(36))
C
      CMD_NUM = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- COMMAND VALUE --
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(37))
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(38))
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(39))
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(40))
C
      CMD_VAL = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- COMMAND SOURCE --
      I1TEMP(1) = ZEXT(MESS_FROM_IGS(41))   ! KEEP THE SAME ORDER IN THE I1TEMP
      I1TEMP(2) = ZEXT(MESS_FROM_IGS(42))   ! DUE THE INFORMATION IS SEND IN A
      I1TEMP(3) = ZEXT(MESS_FROM_IGS(43))   ! STRING FORMAT
      I1TEMP(4) = ZEXT(MESS_FROM_IGS(44))  
C
      CMD_SRC = I4TEMP

      ! DECODE "IGS" INPUT MESSAGE -- COMMAND DATA --
      CMD_DTLN = SIZEOF(CMD_DATA) / 4
C
      DO IDX = 1, CMD_DTLN
         I1TEMP(4) = ZEXT(MESS_FROM_IGS(45 + (IDX - 1) * 4))
         I1TEMP(3) = ZEXT(MESS_FROM_IGS(46 + (IDX - 1) * 4))
         I1TEMP(2) = ZEXT(MESS_FROM_IGS(47 + (IDX - 1) * 4))
         I1TEMP(1) = ZEXT(MESS_FROM_IGS(48 + (IDX - 1) * 4))
C
         CMD_DATA(IDX) = I4TEMP
      ENDDO

      ! PROCESS THE COMMAND THAT HAS BEEN REQUESTED: 1 TOTOBOLA NORMAL MATCHES CANCELLATION REQUEST
      IF(CMD_NUM .EQ. 1) THEN
        CALL IGS_CANCEL_EVENTS_CMD(AGT_NUM,    ! AGENT NUMBER
     *                             IGS_CRN,    ! CROSS REFERENCE NUMBER
     *                             IGS_HBN,    ! HOST BUFFER NUMBER
     *                             IGS_CDC,    ! HOST "CDC" DATE
     *                             TER_NUM,    ! TERMINAL NUMBER
     *                             IGS_CAS,    ! CONTROL AND SEQUENCE
     *                             IGS_MTS,    ! MESSAGE TYPE AND MESSAGE SUBTYPE
     *                             IGS_CHK,    ! CHECKSUM MESSAGE
     *                             GTYP,       ! GAME TYPE
     *                             GIND,       ! GAME INDEX
     *                             IGS_AGT,    ! AGENT NUMBER
     *                             IGS_MID,    ! MESSAGE ID
     *                             CMD_VAL,    ! COMMAND VALUE
     *                             CMD_SRC,    ! COMMAND SOURCE
     *                             CMD_DATA,   ! COMMAND DATA
     *                             CMD_DTLN)   ! COMMAND DATA LENGTH
        RETURN
      ENDIF

      ! CHECK IF THE SYSTEM IS UP TO SHOW THE ERROR MESSAGE IN THE CONSOLE
      CALL CHCKDIS(SYS_LIVE)
C
      ! COMMAN NUMBER HAS NOT BEEN IMPLEMENTED YET
      IF(SYS_LIVE .EQ. 0) THEN
         CALL OPS('Wrong IGS Command Number Has Been Requested', CMD_NUM, CMD_NUM)
      ELSE
        TYPE *, IAM(), 'Wrong IGS Command Number Has Been Requested'
        TYPE *, IAM()
        TYPE *, IAM(), 'Command Number: ', CMD_NUM
        TYPE *, IAM()
      ENDIF
C
      END
      
