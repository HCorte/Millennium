C
C PROGRAM X2RELOAD.FOR
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2RELOAD.FOV                                 $
C  $Date::   17 Apr 1996 16:30:24                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C
C     X2RELOAD.FTN
C     __________
C
c     V03 12-SEP-95 WS  BACKGROUND LOADS (LEIPZIG)
C     V02 29-DEC-94 WJK MOVE UNSOLICITED STATION CONNECT AND DISCONNECT 
C			    FROM GLOBAL TO STATION CLASS
C     V01 28-MAR-93 WS  INITIAL RELEASE 
C
C     THE FUNCTION OF THIS PROGRAM IS TO SEND A MESSAGE TO THE
C     STATION/TERMINAL IN THE CONTROL WAY. PROGRAM WILL MONITOR
C     NO OF THE TRANSATIONS PROCESSED BY THE SYSTEM AND NO OF 
C     TERMINALS DOWNLOADING
C     PROGRAM WILL SEND A MESSAGE TO THE NEXT TERMINAL WHEN VOLUME
C     FALLS BELOW THE TARGET VOLUME AND NO OF TERMINALS ALLOWED TO LOAD
C     ON THE SUBNETWORK FALL BELOWED ALLOWED TARGET
C
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement
 
C Copyright 1995 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM X2RELOAD
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
C
        INCLUDE '($SYSSRVNAM)'
C***        INCLUDE '($IODEF)'
C***        INCLUDE '($SSDEF)'
C
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	CHARACTER*1 ANSWER
C
	INTEGER*4 ST, CMD
	INTEGER*4 SUBNETWORK,PREV_SUBNET
C	INTEGER*4 CURRENT_LOAD
C	INTEGER*4 CURRENT_VOLUME
C
	LOGICAL	  UPDATE,TMP_UPDATE
C
	TYPE *,'<<<<  x2reload version 2.0  >>>>'
C
	UPDATE = .FALSE.
	CALL INPNUM('Enter subnetwork no ',SUBNETWORK,0,RE_MAX_SUBNET,ST)
C
	CALL READ_DEFAULTS(SUBNETWORK)
C
	CALL RETRIEVE_VALUES(SUBNETWORK)
	    !STORE CONFIG VALUES FOR CURRENT SUBNET IN GLOBAL PARAMETERS
C
C CREATE EVENT FLAGS FOR AST INTERRUPT
C
	CALL LIB$GET_EF(EVFALARM)
	IF (EVFALARM.LT.0) THEN
	    TYPE *,'CANNOT GET EVENT FLAG'
	    CALL GSTOP(GEXIT_SUCCESS)
	ENDIF
C
	CALL LIB$GET_EF(EVFSNDTRM)
	IF (EVFSNDTRM.LT.0) THEN
	    TYPE *,'CANNOT GET EVENT FLAG'
	    CALL GSTOP(GEXIT_SUCCESS)
	ENDIF
C
C
10	CONTINUE
C
	CALL CLRSCREEN
	CALL UPDATE_SCREEN(SUBNETWORK)
C
	CALL QUERY_INPUT(SUBNETWORK,CMD,UPDATE)
C
	GOTO (1100,1200,1300,1400,1500,1600) CMD
C
500	CONTINUE
	TYPE *,'Setting this will force that this process will be '
	TYPE *,'sending soft station reset to the station'
	CALL INPNUM('Enter max stations active ',
     *	      RE_MAX_ACTIVE_STATION(SUBNETWORK),0,X2X_STATIONS,ST)
	GOTO 10

C
C     LOCAL DEFAULTS
C	RE_CURRENT_VOLUME(SUBNETWORK)=0
C	MESSAGE_NO=4              !ULTIMATE RESET
C	RE_CURRENT_TERMINAL(SUBNETWORK)=1
C	RE_MAX_ACTIVE_STATION(SUBNETWORK)=0
C	GOTO 10
C
C
1100	CONTINUE
	IN_CONFIG_MENU = .TRUE.
	CALL X2RELMOD(SUBNETWORK,TMP_UPDATE)
	IN_CONFIG_MENU = .FALSE.
	UPDATE = TMP_UPDATE .OR. UPDATE
	CALL RETRIEVE_VALUES(SUBNETWORK)
	GOTO 10
C
1200	CONTINUE
	IF (PROC_STARTED) THEN
C	    CALL UPDATE_SCREEN(SUBNETWORK)
	    TYPE *,'PROCESS IS ALREADY STARTED...'
	    CALL XWAIT(3,2,ST)
	ELSE
	    CALL START_PROC(SUBNETWORK)
	ENDIF
	GOTO 10
C
1300	CONTINUE
	IF (.NOT.PROC_STARTED) THEN
C	    CALL UPDATE_SCREEN(SUBNETWORK)
	    TYPE *,'PROCESS IS ALREADY STOPPED...'
	    CALL XWAIT(3,2,ST)
	ELSE
	    CALL STOP_PROC(SUBNETWORK,.TRUE.)
	ENDIF
	GOTO 10
C
1400	CONTINUE
	IF (PROC_STARTED) THEN
C	    CALL UPDATE_SCREEN(SUBNETWORK)
	    TYPE *,'PROCESS SHOULD BE STOPPED TO CHANGE DEFAULTS...'
	    CALL XWAIT(3,2,ST)
	ELSE
	    CALL READ_DEFAULTS(SUBNETWORK)
	ENDIF
	GOTO 10
C
1500	CONTINUE
	CALL SAVE_DEFAULTS(SUBNETWORK)
	GOTO 10
C
1600	CONTINUE
	IF (PROC_STARTED) THEN
C	    CALL UPDATE_SCREEN(SUBNETWORK)
	    TYPE *,'PROCESS SHOULD BE STOPPED TO CHANGE SUBNET...'
	    CALL XWAIT(3,2,ST)
	ELSE
	   PREV_SUBNET = SUBNETWORK
	   CALL INPNUM('Enter subnetwork no ',SUBNETWORK,
     *		  0,RE_MAX_SUBNET,ST)
C
	   IF (SUBNETWORK .NE. PREV_SUBNET) THEN
	     IF(UPDATE) THEN
	         CALL WIMG
     *		    (5,'Do you want to update the configuration file ? ')
	         READ(5,9090) ANSWER
	         IF (ANSWER.EQ.'Y'.OR.ANSWER.EQ.'y') THEN
		  CALL SAVE_DEFAULTS(PREV_SUBNET)
	         ENDIF
	     ENDIF
C
	     CALL READ_DEFAULTS(SUBNETWORK)
	     CALL RETRIEVE_VALUES(SUBNETWORK)
	   ENDIF
	ENDIF
	GOTO 10
C
9090	FORMAT(A1)
	END
C
C
C+++++++++++++++++++++++++++++++++++
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE RESNDTRM(MES_NUM,NEXT_TERM,BUFFER,LEN,
     *	           TOT_SENT,SUBNETWORK)
	IMPLICIT NONE
C
        INCLUDE '($SYSSRVNAM)'
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2STMES.DEF'
	INCLUDE 'INCLIB:X2FEMES.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 MES_NUM        ! MESSAGE NO TO SEND
	INTEGER*4 NEXT_TERM      !LAST TERM NO TO USE
	INTEGER*4 BUFFER(*)      !BUFFER WITH DATA TO SEND IF MES_NUM=0
	INTEGER*4 LEN            !LENGTH OF DATA TO SEND
	INTEGER*4 TOT_SENT       !COUNT OF MESSAGES SENT
	INTEGER*4 SUBNETWORK	 !SUBNETWORK TO SEND TO

C
	INTEGER*4 BUF_NO         !PROCOM BUFFER NO
C
C
	   CALL GETBUF(BUF_NO)   !GET BUFFER TO QUEUE DATA TO
	   IF (BUF_NO .LE. 0) GOTO 9000
C
C	IF TERMINAL DRIVEN SEND A MESSAGE
C
	   IF (RE_MAX_ACTIVE_STATION(SUBNETWORK).EQ.0) THEN
		HPRO(TRCODE,BUF_NO)=TYPUNS
		HPRO(MSGNUM,BUF_NO)=MES_NUM
		HPRO(OUTLEN,BUF_NO)=LEN
		PRO(INPTAB,BUF_NO) =BUFFER(1)

		IF (X2X_I4_STATION) THEN
		    PRO(TERNUM,BUF_NO)=NEXT_TERM
		ELSE
		    HPRO(TERNUM,BUF_NO)=NEXT_TERM
		ENDIF
 
C
		CALL FASTMOV(BUFFER,PRO(INPTAB,BUF_NO),LEN/4+1)
C
C	   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C	   IF SENDING TO THE STATIONS, MAKE IT A SOFT RESET TO THE STATION
C
C	PREPARE SOFT RESET
	   ELSE
C****		TYPE *,'Adding to stn ',NEXT_TERM
		HPRO(X2X_DEST,BUF_NO)=X2DEST_STATION+X2DEST_FE+
     *	                      X2DEST_TRANSPORT
		HPRO(TRCODE,BUF_NO)=0
		HPRO(MSGNUM,BUF_NO)=0

		HPRO(X2X_CONNCTL_OVR,BUF_NO)=256*
     *		  (X2X_UNSOLICIT_FE_CONNECT*16+X2X_UNSOLICIT_FE_DISCONNECT)
C V02 *		  +(X2X_UNSOLICIT_STATION_CONNECT*16+
C V02 *		  X2X_UNSOLICIT_STATION_DISCONNEC )
C		** START V02 CHANGE **
     *	+(X2XC_UNSO_STN_CON(X2XS_STNCLS(X2XT_STATION_NO(NEXT_TERM)))*16+
     *	 X2XC_UNSO_STN_DIS(X2XS_STNCLS(X2XT_STATION_NO(NEXT_TERM))) )
C		** END V02 CHANGE **
C
		HPRO(X2X_DELIVER_OVR,BUF_NO)=X2FEMES_FLAGS_ER+
     *	                             X2FEMES_FLAGS_DA
      		IF (X2X_I4_STATION) THEN
		    PRO(TERNUM,BUF_NO)=0
		    PRO(LINENO,BUF_NO)=NEXT_TERM
		ELSE
		    HPRO(TERNUM,BUF_NO)=0
		    HPRO(LINENO,BUF_NO)=NEXT_TERM
		ENDIF
C
C BUILD THE MESSAGE BUFFER FOR THE STATION SOFT RESET COMMAND.
C
C
C QUE TO SYSTEM
		CALL ISBYTE(X2STMES_PROTID_VAL,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_PROTID-1)
C***		CALL ISBYTE(X2STMES_DATATYPE_CMD_UP,PRO(INPTAB,PROBUF),
C***     *	            OFF+X2STMES_DATATYPE-1)
		CALL ISBYTE(X2STMES_DATATYPE_CMD_DOWN,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_DATATYPE-1)
		CALL ISBYTE(0,PRO(INPTAB,BUF_NO),X2STMES_CONFCHK-1)
		CALL I4TOBUF2(NEXT_TERM,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_STATION_NO-1)
		CALL ISBYTE(X2STMES_SOFT_RESET,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_CODE-1)
		CALL ISBYTE(0,PRO(INPTAB,BUF_NO),X2STMES_CONFCHK-1)
		CALL ISBYTE(0,PRO(INPTAB,BUF_NO),X2STMES_STN_PORT-1)
		CALL ISBYTE(X2STMES_UNS,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_FLAGS-1)
		CALL ISBYTE(X2STMES_HDRLEN,PRO(INPTAB,BUF_NO),
     *	                  X2STMES_MESLEN-1)
		HPRO(OUTLEN,BUF_NO)=30
	   ENDIF
C

C
C***	   TYPE *,'sending to terminal ',NEXT_TERM  !!!!!!!!!!!!!!!!
C****	   CALL ABL(BUF_NO,GAME_OUTQUE,ST)

C****	TYPE *,'added buf, ter ',BUF_NO,NEXT_TERM,HPRO(MSGNUM,BUF_NO),
C****     *		      MES_NUM
	   CALL X2ADDPRO(BUF_NO)
	   CALL RENXTTRM(NEXT_TERM,SUBNETWORK)
	   IF (NEXT_TERM .GT.0) TOT_SENT=TOT_SENT+1
C
9000	CONTINUE
	RETURN
	END
C
C+++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE RENXTTRM(NEXT_TERM,SUBNETWORK)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 NEXT_TERM      !FIND NEXT TERMINAL TO PROCESS
	INTEGER*4 SUBNETWORK
C
	INTEGER*4 TOTAL_TERMINALS/0/!TOTAL TERMINALS PROCESSED
	INTEGER*4 STATE
	INTEGER*4 STATION_NO, CLASS
	INTEGER*4   MAX_CHECKED
	INTEGER*4   TERMINALS_REQUESTED/0/
	SAVE	TOTAL_TERMINALS,TERMINALS_REQUESTED
C
	MAX_CHECKED=X2X_TERMS
	IF (RE_MAX_ACTIVE_STATION(SUBNETWORK).NE.0) MAX_CHECKED=X2X_STATIONS
C
100	CONTINUE
	NEXT_TERM=NEXT_TERM+37
	TOTAL_TERMINALS=TOTAL_TERMINALS+1
	IF (MOD(TOTAL_TERMINALS,100).EQ.0.AND.(.NOT.IN_CONFIG_MENU)) THEN
	    CALL SAVE_CURSOR
	    CALL SET_CURSOR(12)
	    TYPE 9000,' checked ',
     *		  TOTAL_TERMINALS
	    CALL REST_CURSOR
	ENDIF
	IF (TOTAL_TERMINALS.GT.MAX_CHECKED) THEN
C****	   TYPE *,'Last terminal processed ',NEXT_TERM,TOTAL_TERMINALS
	   NEXT_TERM=-1
	   TOTAL_TERMINALS=0
	   TERMINALS_REQUESTED=0

	   RETURN
	ENDIF
C
C     CHECK IF THE TERMINAL IS VALID
C
	IF (RE_MAX_ACTIVE_STATION(SUBNETWORK).EQ.0) THEN
	    IF (NEXT_TERM.GT.X2X_TERMS) NEXT_TERM=NEXT_TERM-X2X_TERMS
	    STATION_NO=X2XT_STATION_NO(NEXT_TERM)
	    IF (DLLREQ_TOTAL(NEXT_TERM).NE.0) GOTO 100
	ELSE
	    IF (NEXT_TERM.GT.X2X_STATIONS) NEXT_TERM=NEXT_TERM-X2X_STATIONS
	    STATION_NO=NEXT_TERM
	ENDIF

	IF (STATION_NO.EQ.0) GOTO 100		    !NOT VALID TERMINAL
	CALL ILBYTE(STATE,IX2XS_STATE,STATION_NO-1)
	IF (STATE.EQ.X2XS_NOT_ACTIVE) GOTO 100	    !NOT DEFINED STATION
	IF (STATE.EQ.X2XS_DISABLED) GOTO 100	    !STATION DISABLED
C****	IF (X2XS_ADRESS(1,STATION_NO).EQ.0 .AND. 
C****     *	    X2XS_ADRESS(2,STATION_NO).EQ.0) GOTO 100
	IF (RE_MAX_ACTIVE_STATION(SUBNETWORK).EQ.0) THEN
	    IF (X2XT_TIME(NEXT_TERM).NE.0) GOTO 100 !ALREADY SENT
	ELSE
	    IF (X2XS_ACK_CNT(NEXT_TERM).NE.0) GOTO 100 !ALREADY SENT
	ENDIF
	CLASS=X2XS_STNCLS(STATION_NO)
	IF (CLASS.EQ.0) GOTO 100		    !SHOULD HAVE A CLASS
	IF (X2XC_SUBNETWORK(CLASS).NE.SUBNETWORK) GOTO 100  !SKIP DIFF SUBNET
	IF (X2XS_TYPE(STATION_NO).EQ.X2XST_BCST) GOTO 100	    !SKIP BROADCAST
C							    !STATION
	IF (.NOT.IN_CONFIG_MENU) THEN
	     CALL SAVE_CURSOR
	     CALL SET_CURSOR(13)
	     TYPE 9100,' Terminal requested ',NEXT_TERM, ' Station no.',
     *		      STATION_NO
	     CALL REST_CURSOR
	ENDIF
C
	TERMINALS_REQUESTED = TERMINALS_REQUESTED+1
	RETURN
9000	FORMAT(5X,A,I4)
9100	FORMAT(5X,A,I4,A,I4)
	END
C
C++++++++++++++++++++++
C
        SUBROUTINE RETRIEVE_VALUES(SUBNET)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:X2XCOM.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
        INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNET
C
C DON'T ALLOW INVALID SUBNET NUMBERS
	IF (SUBNET.LE.0.OR.SUBNET.GT.X2X_MAX_SUBNETWORK) RETURN
C
	RE_MAX_TERMINALS_STARTED(SUBNET) = X2XRELOAD_MAX_TERMINALS_STARTED
	RE_TARGET_VOLUME(SUBNET) = X2XRELOAD_TARGET_VOLUME
	RE_MAX_ACTIVE_STATION(SUBNET) = X2XRELOAD_MAX_ACTIVE_STATION
	RE_MAX_LOAD(SUBNET) = X2XRELOAD_MAX_LOAD
	RE_TERM_DELAY(SUBNET) = X2XRELOAD_TERM_DELAY
	RE_TIME_INTERVAL(SUBNET) = X2XRELOAD_TIME_INTERVAL
	MESSAGE_LEN = X2XRELOAD_LENGTH
	MESSAGE_NO = X2XRELOAD_MESSAGE_NO
	CALL HEXTOI4(X2XRELOAD_HEX_TAB,B_DATA_BUFFER)
C
C***	TYPE 9000,(DATA_BUFFER(J),J=1,10)
	
C
8000    CONTINUE
C***9000	FORMAT (1X,10(Z8.8,' '))
	RETURN
	END

C
C+++++++++++
C
	SUBROUTINE UPDATE_SCREEN(SUBNET)
        IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:X2XCOM.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
        INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNET
	INTEGER*4 CURRENT_VOLUME,CURRENT_LOAD,ACTIVE_STATIONS
C
	IF (IN_CONFIG_MENU) RETURN
C
	CALL REMSGDLL(CURRENT_VOLUME,SUBNET)
	CALL REREQDLL(CURRENT_LOAD,SUBNET)
	CALL RESTNDLL(ACTIVE_STATIONS,SUBNET)
C
	CALL SAVE_CURSOR
	CALL SET_CURSOR(1)
C	CALL X2HOME
C
	TYPE *,'                      <<<<  x2reload version 2.0  >>>>'
	IF (PROC_STARTED) THEN
	    TYPE *,'                              Process started'
	ELSE
	    TYPE *,'                              Process stopped'  
	ENDIF
C
	TYPE 9000,' Processing run no       :',RETRY_CNT
	TYPE 9000,' total term/stns started :',RE_TOT_SENT(SUBNET)
	TYPE 9200,' running volume subnet',SUBNET,': ',
     *		  RE_CURRENT_VOLUME(SUBNET),
     *		  ' running volume per interval: ',CURRENT_VOLUME
	TYPE 9000,' currently started       :',RE_CURRENT_START(SUBNET)
	TYPE 9200,' terms downloading sn',SUBNET,':',
     *		      RE_CURRENT_LOAD(SUBNET),
     *		   ' terms downloading per interval: ',CURRENT_LOAD
	TYPE 9000,' last term/stn started   :',RE_CURRENT_TERMINAL(SUBNET)
	TYPE 9000,' no of active stations   :',ACTIVE_STATIONS
C***	TYPE 9200,' checked ',0,' requested ',0   !THOSE LINES WILL BE 
						  !OVERWRITTEN BY RESNDTRM
C***	TYPE 9200,' Terminal requested ',0, ' Station no.',0
C
	CALL REST_CURSOR
	RETURN
9000	FORMAT(5X,A,I4)
9100	FORMAT(5X,A,I4,' ',I4)
9200	FORMAT(5X,A,I4,A,I4)
9300	FORMAT(5X,A,I2,A,I4,A,I4)
	END
C
C
	SUBROUTINE QUERY_INPUT(SUBNET,CMD,UPDATE)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XPRM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNET,CMD
	INTEGER*4 ST
	LOGICAL UPDATE
	CHARACTER*1 ANSWER
C
	IF (IN_CONFIG_MENU) RETURN
C
	CALL SET_CURSOR(13)
C
	TYPE *,' '
	TYPE *,'--------------------------------- Options --------------',
     *	       '----------------------'
C**	TYPE *,' '
C
	TYPE 9000,'1 - Change params subnet ',SUBNET
	TYPE 9000,'2 - Start process subnet ',SUBNET
	TYPE 9000,'3 - Stop process subnet  ',SUBNET
	TYPE 9100,'4 - Load default params'
	TYPE 9100,'5 - Save default params'
	TYPE 9100,'6 - change subnetwork no '
	TYPE *,' '
C
	CALL INPNUM('		Enter command ',CMD,1,6,ST)
	IF (ST.LT.0) THEN
C
C IF A FIELD HAS BEEN MODIFIED UPDATE THE FILE.
C
	   IF(UPDATE) THEN
	      CALL WIMG(5,'Do you want to update the configuration file ? ')
	      READ(5,9090) ANSWER
	      IF (ANSWER.EQ.'Y'.OR.ANSWER.EQ.'y') THEN
		  CALL SAVE_DEFAULTS(SUBNET)
	      ENDIF
	    ENDIF
	    STOP 'Bye bye boys'
	ENDIF
C
	RETURN
9000	FORMAT(10X,A,I2)
9090	FORMAT(A1)
9100	FORMAT(10X,A)
	END
C
C +++++++++++++
C
	SUBROUTINE HEXTOI4(HEXSTRING,BYTE_ARR)
	IMPLICIT NONE
C
	CHARACTER *(*) HEXSTRING
	BYTE BYTE_ARR(*)
	INTEGER*4 BYTE_CNT,NIBBLE,I
	BYTE NIBBLE_VAL
C
	BYTE_CNT = 0
C
	NIBBLE = 2
	TYPE *,LEN(HEXSTRING)
	DO I=1,LEN(HEXSTRING)
C
	   NIBBLE = MOD(NIBBLE,2)+1
	   IF (HEXSTRING(I:I).GE.'0'.AND.HEXSTRING(I:I).LE.'9') THEN
	      NIBBLE_VAL = ICHAR(HEXSTRING(I:I))-ICHAR('0')
	   ELSE IF (HEXSTRING(I:I).GE.'A'.AND.HEXSTRING(I:I).LE.'F') THEN
	      NIBBLE_VAL = ICHAR(HEXSTRING(I:I))-ICHAR('A')+10
	   ELSE
C EXIT HERE, STRING ENDED
	     GOTO 8000
	   ENDIF
C
	   IF (NIBBLE.EQ.1) THEN
	       BYTE_CNT = BYTE_CNT + 1
	       BYTE_ARR(BYTE_CNT) = NIBBLE_VAL*16
	   ELSE
	       BYTE_ARR(BYTE_CNT) = BYTE_ARR(BYTE_CNT) + NIBBLE_VAL
	   ENDIF
C
	END DO
C
8000	CONTINUE
C
	RETURN
	END
C
	SUBROUTINE SET_ALARM_EVENT(INTERVAL,SUBNETWORK)
	IMPLICIT NONE
C
        INCLUDE '($SYSSRVNAM)'
C	
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XPRM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 DELAY(2)
	INTEGER*4 ST
	INTEGER*4 INTERVAL
	INTEGER*4 DAY,HOUR,MIN,SEC
	INTEGER*4 SUBNETWORK
	INTEGER*4 ASTSUBNET
C
	COMMON /ASTCOMMON/ ASTSUBNET
C
	CHARACTER*12 DELAYSTR
	INTEGER*4 ASTALARM
	EXTERNAL ASTALARM
C
	DAY = INTERVAL / (3600*24)
	HOUR = MOD (INTERVAL,3600*24) / 3600
	MIN = MOD (INTERVAL,3600) /60
	SEC = MOD (INTERVAL,60)
C
	WRITE (DELAYSTR,9000) DAY,HOUR,MIN,SEC
C
	ST = SYS$BINTIM(DELAYSTR,DELAY)
	IF (.NOT.ST) CALL LIB$SIGNAL(%VAL(ST))
C
	ASTSUBNET = SUBNETWORK
	ST = SYS$SETIMR(%VAL(EVFALARM),DELAY,ASTALARM,%VAL(1),)	
	IF (.NOT.ST) CALL LIB$STOP(%VAL(ST))
C
	RETURN
9000	FORMAT(I3.3,' ',I2.2,':',I2.2,':',I2.2)
	END
C
C +++++++++++++++++++++++++++++++++++++++++
C 	THIS SUBROUTINE LAUNCHES AN AST FOR EACH TERMINAL TO SEND TO.
C
	SUBROUTINE SET_SNDTRM_EVENT(INTERVAL,SUBNETWORK,RESTART)
	IMPLICIT NONE
C
        INCLUDE '($SYSSRVNAM)'
C	
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XPRM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 DELAY(2)
	INTEGER*4 ST
	INTEGER*4 INTERVAL
	INTEGER*4 DAY,HOUR,MIN,SEC,SUBSEC
	INTEGER*4 SUBNETWORK
	INTEGER*4 ASTSNDTRMSUBNET
	LOGICAL   RESTART
C
	COMMON /ASTSNDTRMCOMMON/ ASTSNDTRMSUBNET
C
	CHARACTER*15 DELAYSTR
	INTEGER*4 ASTSNDTRM
	INTEGER*4 TERMINAL
C	SAVE /TERMINAL/
	EXTERNAL ASTSNDTRM
C
	IF (RESTART) TERMINAL = 1	!RESET TERMINAL COUNTER AT THE START
					!OF EACH 'CHAIN'
C
	HOUR = MOD (INTERVAL/100,3600*24) / 3600
	MIN = MOD (INTERVAL/100,3600) /60
	SEC = MOD (INTERVAL/100,60)
	SUBSEC = MOD (INTERVAL,100)
C
        DAY = 0
	WRITE (DELAYSTR,9000) DAY,HOUR,MIN,SEC,SUBSEC
C
	ST = SYS$BINTIM(DELAYSTR,DELAY)
	IF (.NOT.ST) CALL LIB$SIGNAL(%VAL(ST))
C
C CHECK IF THE CURRENT_TERMINAL EQUALS -1, IF SO, STOP THE WHOLE PROCESS
	IF (RE_CURRENT_TERMINAL(SUBNETWORK).LT.0.AND.(.NOT.RESTART)) THEN
	      CALL STOP_PROC(SUBNETWORK,.FALSE.)
C LAUNCH AN AST RE_CURRENT_START(SUBNETWORK) TIMES
	ELSE IF (TERMINAL.LE.RE_CURRENT_START(SUBNETWORK)) THEN
	   ASTSNDTRMSUBNET= SUBNETWORK
	   ST = SYS$SETIMR(%VAL(EVFSNDTRM),DELAY,ASTSNDTRM,%VAL(2),)	
	   IF (.NOT.ST) CALL LIB$STOP(%VAL(ST))
	ENDIF
C
C INCREMENT 'LOOP COUNTER'
	TERMINAL = TERMINAL + 1
	RETURN
9000	FORMAT(I3.3,' ',I2.2,':',I2.2,':',I2.2,'.',I2.2)
	END
C
C++++++++++++++++++++++++++++++++++++++++++++++
C
	SUBROUTINE ASTALARM
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 ASTSUBNET
	INTEGER*4 SUBNETWORK
C
	COMMON /ASTCOMMON/ ASTSUBNET
C
	SUBNETWORK = ASTSUBNET
	CALL UPDATE_SCREEN(SUBNETWORK)
	CALL SEND_TO_NEXT_TERMS(SUBNETWORK)
	IF (PROC_STARTED) 
     *	    CALL SET_ALARM_EVENT(RE_TIME_INTERVAL(SUBNETWORK),SUBNETWORK)
C
	RETURN
	END	       
C
C +++++++++++++++++++++++++++++++++++++++++++
C
	SUBROUTINE ASTSNDTRM
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 ASTSNDTRMSUBNET
	INTEGER*4 SUBNETWORK
C
	COMMON /ASTSNDTRMCOMMON/ ASTSNDTRMSUBNET
C
	SUBNETWORK = ASTSNDTRMSUBNET
	CALL RESNDTRM(MESSAGE_NO,
     *		RE_CURRENT_TERMINAL(SUBNETWORK),DATA_BUFFER,
     *		MESSAGE_LEN,
     *		RE_TOT_SENT(SUBNETWORK),
     *		SUBNETWORK)

	CALL UPDATE_SCREEN(SUBNETWORK)
C
C****	IF (RE_CURRENT_TERMINAL(SUBNETWORK).GT.0) THEN
        CALL SET_SNDTRM_EVENT(RE_TERM_DELAY(SUBNETWORK)/10,SUBNETWORK,
     *		  .FALSE.)
C****	ENDIF
C
	RETURN
	END	       
C
C ++++++++++++++++++++++++++++++++++++++++++
C
	SUBROUTINE START_PROC(SUBNETWORK)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNETWORK
	INTEGER*4 OFF, STATION
	INTEGER*4 ST
	INTEGER*4 CLASS,CNT
        CHARACTER*20 PASPAS
        EQUIVALENCE(PAS,PASPAS)
        CHARACTER*8 PAS

	CALL CLR_SCREEN(16,9)
C
	IF (RE_MAX_ACTIVE_STATION(SUBNETWORK).EQ.0) THEN
	    IF (MESSAGE_NO.EQ.0 .AND. MESSAGE_LEN.EQ.0) THEN
		TYPE 9000,'message to send not defined',' '
		RETURN
	    ENDIF
	ELSE
	    IF (MESSAGE_NO.NE.500) THEN
		TYPE 9000,'You should set the value of the message to ',
     *		    'send to 500 to execute this function'
		RETURN
	    ENDIF
	ENDIF
	IF (MESSAGE_NO.EQ.1.OR.MESSAGE_NO.EQ.3) THEN
	    CNT = 0
600    	    CONTINUE
	    CALL PASSWORD(5,PASPAS)
	    IF (PAS .NE. 'X2RELOAD') THEN
      	      CNT = CNT + 1
      	      IF (CNT .GT. 2) THEN
      		  TYPE*,'You have used up all your chances...'
	          CALL XWAIT(4,2,ST)
		  RETURN
	      ENDIF
              GOTO 600
	    ENDIF
	ENDIF
C
        TYPE 9000,'This procedure will clear delivery errors,',
     *	       'delivery acks and last time terminal active stats'
	CALL INPNUM('        Enter no of times to retry terminals ',
     *		      TO_RETRY,1,10,ST)
C
	DO 605, OFF=1,X2X_TERMS

		STATION=X2XT_STATION_NO(OFF)
		IF (STATION.LE.0) GOTO 605
		CLASS=X2XS_STNCLS(STATION)
		IF (CLASS.LE.0) GOTO 605
		IF (X2XC_SUBNETWORK(CLASS).NE.SUBNETWORK) GOTO 605
		X2XS_ACK_CNT(STATION)=0
		X2XS_ERR_CNT(STATION)=0
		X2XT_TIME(OFF)=0

605	CONTINUE
C
C
	RETRY_CNT = 1
	PROC_STARTED = .TRUE.
	CALL SET_ALARM_EVENT(1,SUBNETWORK)
C
	RETURN
9000	FORMAT(5X,A,/,5X,A)
	END
C
C+++++++++++++++++++++++++++
C
	SUBROUTINE SEND_TO_NEXT_TERMS(SUBNETWORK)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNETWORK
C
	INTEGER*4 LOAD_LIMIT
	REAL*8	  PER_LOAD_VOLUME
	INTEGER*4 ACTIVE_STATIONS
	INTEGER*4 TO_START
C
	CALL REREQDLL(RE_CURRENT_LOAD(SUBNETWORK),SUBNETWORK)
	CALL RESTNDLL(ACTIVE_STATIONS,SUBNETWORK)
	RE_CURRENT_VOLUME(SUBNETWORK)= RE_CURRENT_REQUESTS(SUBNETWORK)
	RE_CURRENT_REQUESTS(SUBNETWORK)=0
C
C     IF VOLUME AND BUFFER CRITERIAS MET RELEASE SOME

C	IF
C	CURRENT VOLUME .LT. TARGET LOAD .AND.
C	NO OF TERMINALS LOADING .LT. MAX NO OF TERMINALS ALLOWED
C	
	IF (RE_CURRENT_VOLUME(SUBNETWORK).LT.
     *					RE_TARGET_VOLUME(SUBNETWORK) .AND.
     *	    RE_CURRENT_LOAD(SUBNETWORK).LE.
     *					RE_MAX_LOAD(SUBNETWORK)      .AND.
     *      (RE_MAX_ACTIVE_STATION(SUBNETWORK).EQ.0 .OR.
     *	      ACTIVE_STATIONS.LT.RE_MAX_ACTIVE_STATION(SUBNETWORK))) THEN
C
C	CALCULATE HOW MANY TO RELEASE

	   PER_LOAD_VOLUME=20.D0	!ASSUMED NO OF REQUESTS PER TERMINAL
C
C	   IF ANY TERMINALS DOWNLOADING CALCULATE ACTUAL VOLUME PER TERMINAL

	   IF (RE_CURRENT_LOAD(SUBNETWORK).NE.0 .AND.  
     *	      RE_CURRENT_VOLUME(SUBNETWORK).NE.0) PER_LOAD_VOLUME=
     *		RE_CURRENT_VOLUME(SUBNETWORK)/RE_CURRENT_LOAD(SUBNETWORK)
	   IF (PER_LOAD_VOLUME.LT. 1.D0) PER_LOAD_VOLUME=1.D0
C****	TYPE *,'PER LOAD VOLUME ',PER_LOAD_VOLUME
C
C	MAX TERMINAL TO RELEASE =
C	(TARGET_VOLUME-CURRENT_VOLUME)/NO_OF_TRANS_PER_TERMINAL_PER_PERIOD
	   LOAD_LIMIT=((RE_TARGET_VOLUME(SUBNETWORK)-
     *				RE_CURRENT_VOLUME(SUBNETWORK)))/
     *	                               PER_LOAD_VOLUME
	   IF (RE_MAX_LOAD(SUBNETWORK).GE.X2X_TERMS) 
     *				LOAD_LIMIT=RE_MAX_LOAD(SUBNETWORK)
	   TO_START=MIN(RE_MAX_LOAD(SUBNETWORK)-RE_CURRENT_LOAD(SUBNETWORK),
     *	            RE_MAX_TERMINALS_STARTED(SUBNETWORK),LOAD_LIMIT)
C
C        ADJUST NUMBER OF THE TERMINALS STARTED TO TIME INTERVAL
C
	   RE_CURRENT_START(SUBNETWORK)=(TO_START*
     *					RE_TIME_INTERVAL(SUBNETWORK))/60
	   RE_CURRENT_START(SUBNETWORK)=TO_START
	   IF (RE_CURRENT_START(SUBNETWORK).GT.0) THEN
	      CALL SET_SNDTRM_EVENT(RE_TERM_DELAY(SUBNETWORK)/10,
     *				    SUBNETWORK,.TRUE.)
	   ENDIF
	ELSE
	   RE_CURRENT_START(SUBNETWORK)=0
	ENDIF
C
	CALL UPDATE_SCREEN(SUBNETWORK)
C
	RETURN
9000	FORMAT(10X,A)
	END

C
	SUBROUTINE STOP_PROC(SUBNETWORK,ASKED_FOR)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
	INCLUDE 'INCLIB:REQCOM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
        INCLUDE '($SYSSRVNAM)'
C
	INTEGER*4 SUBNETWORK
	LOGICAL ASKED_FOR,ST
C
	IF (ASKED_FOR) THEN
	   CALL CLR_SCREEN(14,9)
	   TYPE *,'requested termination of the process'
	   TYPE *,'Next terminal to send data to: ',
     *		RE_CURRENT_TERMINAL(SUBNETWORK)
	   TYPE *,'Message was sent to ',
     *			RE_TOT_SENT(SUBNETWORK),' terminals'
	   CALL XWAIT(4,2,ST)
	ENDIF

C CANCEL ALL OUTSTANDING TIMERS
	ST = SYS$CANTIM(%VAL(0),)
	IF (.NOT.ST) CALL LIB$SIGNAL(%VAL(ST))
	PROC_STARTED = .FALSE.
	IF ((.NOT.(ASKED_FOR)) .AND. (.NOT.(PROC_STARTED)) .AND. 
     *	    RETRY_CNT.LT.TO_RETRY) THEN
	  PROC_STARTED = .TRUE.
	  RE_TOT_SENT(SUBNETWORK)=0
	  IF (RE_CURRENT_TERMINAL(SUBNETWORK).LE.0) 
     *			RE_CURRENT_TERMINAL(SUBNETWORK)=1
	  CALL SET_ALARM_EVENT(RE_TIME_INTERVAL(SUBNETWORK),SUBNETWORK)
	  RETRY_CNT = RETRY_CNT + 1
	ENDIF
C
	CALL UPDATE_SCREEN(SUBNETWORK)
C
	RETURN
	END
C
C +++++++++++++++++++++++=
C
	SUBROUTINE READ_DEFAULTS(SUBNET)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XPRM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNET,ST,LOCK
C
C OPEN THE RELOAD CONFIGURATION FILE
C
        CALL OPENX(1,X2XRELOAD_NAME,4,0,0,ST)
        CALL IOINIT(X2XRELOAD_FDB,1,X2XRELOAD_SECT*256)
        IF(ST.NE.0) THEN
          CALL OS32ER(5,X2XRELOAD_NAME,'OPENX',ST,0)
          CALL GPAUSE
        ENDIF
C
	CALL READL(X2XRELOAD_FDB,SUBNET,X2XRELOAD_REC,ST,LOCK)
        IF(ST.NE.0) THEN
            CALL OS32ER(5,X2XRELOAD_NAME,'READW',ST,1)
            CALL GPAUSE
        ENDIF 
C
	CALL CLOSEFILE(X2XRELOAD_FDB)
	RETURN
	END
C
C ++++++++++++++++++++++++++++++
C
	SUBROUTINE SAVE_DEFAULTS(SUBNET)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XPRM.DEF'
	INCLUDE 'INCLIB:X2XRELOAD.DEF'
C
	INTEGER*4 SUBNET,ST
C
C OPEN THE RELOAD CONFIGURATION FILE
C
        CALL OPENX(1,X2XRELOAD_NAME,4,0,0,ST)
        CALL IOINIT(X2XRELOAD_FDB,1,X2XRELOAD_SECT*256)
        IF(ST.NE.0) THEN
          CALL OS32ER(5,X2XRELOAD_NAME,'OPENX',ST,0)
          CALL GPAUSE
        ENDIF
C
	CALL WRITEW(X2XRELOAD_FDB,SUBNET,X2XRELOAD_REC,ST)
	IF(ST.NE.0) THEN
	     CALL OS32ER(5,X2XRELOAD_NAME,'WRITEW',ST,SUBNET)
	     CALL GPAUSE
	ENDIF
C
	CALL CLOSEFILE(X2XRELOAD_FDB)
	RETURN
	END
C
C++++++++++++++++++++++++
C
	SUBROUTINE X2HOME
	IMPLICIT NONE
C
	CHARACTER*1	ESC	    /Z1B/	    ! ESCAPE CHARACTER
	CHARACTER*2     HOMECUR     /'[H'/          ! HOME CURSOR
C
	TYPE 101,ESC//HOMECUR
101	FORMAT('+',A,$)
	RETURN
	END
C
C+++++++++++++++++++++++++
C
	SUBROUTINE SET_CURSOR(ROW)
	IMPLICIT NONE
C
	INTEGER*4 ROW,COL
        CHARACTER*8     POSCUR
        DATA            POSCUR(1:1)/Z1B/,POSCUR(2:8)/'[00;00H'/
C
	COL = 1
C
        POSCUR(3:3) = CHAR(ROW/10+48)
        POSCUR(4:4) = CHAR(MOD(ROW,10)+48)
        POSCUR(6:6) = CHAR(COL/10+48)
        POSCUR(7:7) = CHAR(MOD(COL,10)+48)
C
	TYPE 1000,POSCUR
1000	FORMAT('+',A,$)

	RETURN
	END

	SUBROUTINE CLR_SCREEN(ROW,NUMROWS)
	IMPLICIT NONE
C
	INTEGER*4 ROW,NUMROWS,I
C
	CALL SET_CURSOR(ROW)
C
	DO I=1,NUMROWS
	    TYPE 9000
	END DO
C
	CALL SET_CURSOR(ROW)
C
	RETURN
9000	FORMAT(80(' '))
	END

C
C +++++++++++++++++++++++
C
	SUBROUTINE SAVE_CURSOR
	IMPLICIT NONE
C
        CHARACTER*2     SAVECUR
        DATA            SAVECUR(1:1)/Z1B/,SAVECUR(2:2)/'7'/
C
	TYPE 1000,SAVECUR
1000	FORMAT('+',A,$)
C
	RETURN
	END
C
C +++++++++++++++++++++++
C 
	SUBROUTINE REST_CURSOR
	IMPLICIT NONE
C
        CHARACTER*2     RESTCUR
        DATA            RESTCUR(1:1)/Z1B/,RESTCUR(2:2)/'8'/
C
	TYPE 1000,RESTCUR
1000	FORMAT('+',A,$)
C
	RETURN
	END
C
C
C +++++++++++++++++++++++
C 
	SUBROUTINE CLRSCREEN
	IMPLICIT NONE
C
        CHARACTER*4     CLR
        DATA            CLR(1:1)/Z1B/,CLR(2:4)/'[2J'/
C
	TYPE 1000,CLR
1000	FORMAT('+',A,'    ',$)
C
	RETURN
	END

