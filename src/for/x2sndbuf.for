C SUBROUTINE X2SNDBUF
C
C V10 16-JUN-2000 OXK Cleanup w/ WARNINGS=ALL
C V09 01-FEB-1995 SCD Integrate UK update into X2X Baseline
C V08 29-DEC-1994 WJK MOVE UNSOLICITED STATION CONNECT AND DISCONNECT 
C			FROM GLOBAL TO STATION CLASS
C V07 12-DEC-1994 DAS Integrate UK changes into X2X Baseline
C V06 20-OCT-1994 GPR CHECK IF WE SHOULD SEND UNSO MSGS
C V05 20-JUL-1994 WS MULTINETWORK CHANGES
C V04 05-APR-1994 GPR USE X2X_I4_STATION TO DETERMINE STATION AND TERNUM
C V3   8-MAR-1994 JWE Add CONN_TYPE to GETSAP call
C V02 03-FEB-1994 GPR USE LINENO ON FULLWORD OFFSET
C V01 01-AUG-1990 XXX RELEASED FOR VAX
C
C     ENTRY POINTS:
C     X2SNDBUF(STATUS) - FORMAT AND SEND TRANSPORT BUFFER
C     X2RELBUF         - RELEASE PROCOM BUFFER
C     X2RELWAT         - RELASE FROM WAIT LIST
C     X2GETSAP         - GET AVAILABLE SAP TO SEND
C     X2CLRSAP         - CLEAR THIS SAP INFORMATION
C     X2SNDMSG    - SEND SINGLE MESSAGE FROM TDBH BUFFER
C     X2SNDFE    - SEND SINGLE MESSAGE FROM FRONT-END FORMAT
C     X2SNDSTN    - SEND SINGLE MESSAGE FROM STATION FORMAT
C     X2SETFLG(DSAP,FLAG) SET DESTINATION FLAG
C     X2MSGEDT(MESSAGE,BUFFER,MES_NUM,MES_LEN,ADD_LEN,COMM_TASK)
C+++++++++++++++++++++++++++++++++++++++++
C
C     X2SNDBUF(STATUS)         ;TRY TO DEQUEUE BUFFERS TO OUTPUT
C     OUT:
C        STATUS      - .NON.0 IF NOTHING DEQUEUED
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2SNDBUF(STATUS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2PTLMES.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:LANCOM.DEF'
	INCLUDE 'INCLIB:X2FEMES.DEF'
	INCLUDE 'INCLIB:X2XREL.DEF'
C
	INTEGER*4 POINTER, QUE, BUF, RETRIES, RETRY_OFF, PROCESS
	INTEGER*4 TIME, ST, DUMMY, DSAP, TYPE, SSAP, SERIAL_NUM
	INTEGER*4 HOST_ID, DELIVER_OVR, CONNCTL_OVR, MES_NUM, MES_LEN
	INTEGER*4 STATION_NO, TERMINAL_NO, DEST_LAYER, FIRST, STATUS
	INTEGER*4 CONN_TYPE,SAP_PORT,PVC_PORT,PVC_CIRCUIT,LOCAL_PORT
	INTEGER*4 PROBUF /0/
	INTEGER*4 I4/0/
	INTEGER*2 I2(2)
	EQUIVALENCE (I4,I2)
	INTEGER*4 SUBNETWORK, CLASS			!V05
C
	INTEGER*4 RESPONSE_INDEX /0/
C
	FIRST=-1
10	CONTINUE
	CALL X2REMPRO(PROBUF) !GRAB PROCOM BUFFER
	IF (PROBUF.LE.0) THEN
	   STATUS=X2ERR_NOMORE
	   RETURN
	ENDIF
C
C     IF SHOULD RELEASE THIS BUFFER, RELEASE IT
C
	DEST_LAYER=HPRO(X2X_DEST,PROBUF)
	IF (IAND(DEST_LAYER,X2DEST_RELEASE).NE.0) THEN
	   CALL X2RELBUF(PROBUF)
	   GOTO 10
	ENDIF
C
C     IF READING SAME BUFFER MORE THAN ONCE RETURN
C
	IF (PROBUF.EQ.FIRST) THEN           !COULD NOT FIND PLACE
	   STATUS=X2ERR_BUSY
	   CALL X2ADDPRO(PROBUF)
	   IF (IAND(X2X_DEBUG,X2X_DEBUG_SUBS).NE.0)
     *	      TYPE *,'RET X2SNDBUF ',X2X_PTLMES(STATUS)
	   RETURN
	ENDIF
C
	IF (FIRST.EQ.-1) THEN
	   FIRST=PROBUF
	ENDIF
C
C

C       ***** Start V04 changes *****

        IF (X2X_I4_STATION) THEN
	   TERMINAL_NO=PRO(TERNUM,PROBUF)
	   STATION_NO=PRO(LINENO,PROBUF)				! V02
	ELSE
	   TERMINAL_NO=HPRO(TERNUM,PROBUF)
	   STATION_NO=HPRO(LINENO,PROBUF)
	ENDIF

C       ***** End V04 changes *****

	I2(1)=HPRO(OUTLEN,PROBUF)
	MES_LEN=I4
	MES_NUM=HPRO(MSGNUM,PROBUF)
	CONNCTL_OVR=HPRO(X2X_CONNCTL_OVR,PROBUF)
	DELIVER_OVR=HPRO(X2X_DELIVER_OVR,PROBUF)
	HOST_ID=HPRO(X2X_HOST_ID,PROBUF)
	SERIAL_NUM=PRO(SERIAL,PROBUF)
	SSAP=X2X_GAME_SAP
	TYPE=HPRO(TRCODE,PROBUF)
C
C	***** Start V06 changes *****
C
        IF (TYPE.EQ.TYPUNS .OR. TYPE.EQ.TYPBRO) THEN         !V09
           IF(TERMINAL_NO.GT.0) THEN
	     STATION_NO=X2XT_STATION_NO(TERMINAL_NO)
	   ENDIF
	   IF((STATION_NO.GE.1).AND.(STATION_NO.LE.X2X_STATIONS)) THEN
	     CLASS=X2XS_STNCLS(STATION_NO)
C
C	     DON'T SEND UNSO MSGS IF DISABLED
C
	     IF(X2XC_UNSO_MSGS(CLASS).EQ.X2XC_DISABLE_UNSO_MSGS) THEN
	       CALL X2RELBUF(PROBUF)
	       GOTO 10
C
C	     SEND THE UNSO AND BUMP UP THE CONFIG ID 
C	     IF ENABLE PLUS
C
	     ELSEIF(X2XC_UNSO_MSGS(CLASS).EQ.
     *	       X2XC_ENABLE_PLUS_UNSO_MSGS) THEN

	       BX2XS_CONF(STATION_NO)=BX2XS_CONF(STATION_NO)+1
	       IF(BX2XS_CONF(STATION_NO).EQ.0) THEN
	         BX2XS_CONF(STATION_NO)=1
	       ENDIF
	     ENDIF
	   ELSE
	     CALL X2ERROR(X2ERR_BADSTN+X2ERR_FATAL,STATION_NO,
     *	                  TERMINAL_NO,PROBUF)
	     CALL X2RELBUF(PROBUF)
	     GOTO 10
	   ENDIF
C
C	SEND THROUGHPUT THROTTLE
C
C	LOGIC TO DROP MESSAGES IF THE SUBNETWORK IS CONGESTED

	   IF((STATION_NO.GE.1).AND.(STATION_NO.LE.X2X_STATIONS)) THEN
		 CLASS=X2XS_STNCLS(STATION_NO)
	         SUBNETWORK=X2XC_SUBNETWORK(CLASS)
		 IF (X2XSN_MAX_THRUPUT_SEND(SUBNETWORK).NE.0 .AND.
     *		 ZEXT(BX2XS_SAP(STATION_NO)).EQ.0) THEN
C
C	IF THROTTLE LOGIC ACTIVE
		    X2XSN_CURRENT_VOLUME_SEND(
     *		    X2XSN_CURRENT_UPDATE_POINTER,SUBNETWORK)=
     *			  X2XSN_CURRENT_VOLUME_SEND(
     *			  X2XSN_CURRENT_UPDATE_POINTER,SUBNETWORK)+1
		    IF (X2XSN_FLUSH_RATIO_SEND(SUBNETWORK).NE.0) THEN
		      X2XSN_CURRENT_FLUSH_SEND(SUBNETWORK)=
     *			  X2XSN_CURRENT_FLUSH_SEND(SUBNETWORK)-1
C
C	IF SHOULD FLUSH
		      IF (X2XSN_CURRENT_FLUSH_SEND(SUBNETWORK).LE.0) THEN
			CALL X2RELBUF(PROBUF)
			X2XSN_CURRENT_FLUSH_SEND(SUBNETWORK)=
     *				  X2XSN_FLUSH_RATIO_SEND(SUBNETWORK)
			X2XS_TIMES_MESSAGE_FLUSHED(STATION_NO)=
     *			  	X2XS_TIMES_MESSAGE_FLUSHED(STATION_NO)+1
			IF (
     *			 MOD(X2XSN_TOTAL_FLUSHED_SEND(SUBNETWORK),1000).EQ.0)
     *			  CALL OPS('Subnetwork send congested ',SUBNETWORK,
     *				  X2XSN_FLUSH_RATIO_SEND(SUBNETWORK))
			X2XSN_TOTAL_FLUSHED_SEND(SUBNETWORK)=
     *			  X2XSN_TOTAL_FLUSHED_SEND(SUBNETWORK)+1
			GOTO 10
		      ENDIF
		    ENDIF
		 ENDIF
	    ENDIF
C
	ENDIF
C
C	***** Start V06 changes *****
C
C     APPLICATION MAY NOT SET DEST_LAYER, TRY TO DO IT YOURSELF
C     FOR UNSOLICITED MESSAGES MAKE SURE THAT STATION_NO IS SET
C
	IF (DEST_LAYER.EQ.0) THEN
	   IF (TYPE.EQ.TYPUNS) THEN
	    IF(TERMINAL_NO.GT.0)STATION_NO=X2XT_STATION_NO(TERMINAL_NO)
	      IF (CONNCTL_OVR.EQ.0)  THEN
	      CONNCTL_OVR= 256*
     *	      (X2X_UNSOLICIT_FE_CONNECT*16+X2X_UNSOLICIT_FE_DISCONNECT)
C V08 *	      +(X2X_UNSOLICIT_STATION_CONNECT*16+
C V08 *	       X2X_UNSOLICIT_STATION_DISCONNEC )
     *        +(X2XC_UNSO_STN_CON(X2XS_STNCLS(STATION_NO))*16+          ! V08
     *         X2XC_UNSO_STN_DIS(X2XS_STNCLS(STATION_NO)) )             ! V08
	       IF (DELIVER_OVR.EQ.0) DELIVER_OVR=X2X_UNSOLICIT_DELIVER
	      ENDIF
	      DEST_LAYER=X2DEST_APP_UNSOLICIT
	    ELSEIF (TYPE.EQ.TYPBRO) THEN
	      IF (CONNCTL_OVR.EQ.0)  THEN
	      CONNCTL_OVR= 256*
     *	      (X2X_UNSOLICIT_FE_CONNECT*16+X2X_UNSOLICIT_FE_DISCONNECT)
C V08 *	      +(X2X_UNSOLICIT_STATION_CONNECT*16+
C V08 *	       X2X_UNSOLICIT_STATION_DISCONNEC )
     *        +(X2XC_UNSO_STN_CON(X2XS_STNCLS(STATION_NO))*16+          ! V08
     *         X2XC_UNSO_STN_DIS(X2XS_STNCLS(STATION_NO)) )             ! V08
	       IF (DELIVER_OVR.EQ.0) DELIVER_OVR=X2X_UNSOLICIT_DELIVER
	      ENDIF
	      DEST_LAYER=X2DEST_APP_BROADCAST
	   ENDIF
	ENDIF
C
	IF (IAND(DEST_LAYER,X2DEST_STATION).NE.0 .AND. STATION_NO.LE.0)
     *	                                      THEN !IF BAD MESSAGE
	   CALL X2ERROR(X2ERR_BADSTN+X2ERR_FATAL,STATION_NO,TERMINAL_NO
     *	                ,PROBUF)
	   CALL X2RELBUF(PROBUF)
	   GOTO 10
	ENDIF
C
C     ALWAYS SEND TO TRANSPORT LAYER
C     FOR MESSAGES TO STATIONS USE SAME SAP FOR SOLICITED
C     (RETURNS), TRY TO USE SAME SAP FOR UNSOLICITED
C
	IF (IAND(DEST_LAYER,X2DEST_STATION).EQ.0) THEN  !IF XPORT LAYER

C       ***** Start V04 changes *****

           IF (X2X_I4_STATION) THEN
	      DSAP=PRO(LINENO,PROBUF)     !LINE NUMBER IS DSAP		! V02
	   ELSE
	      DSAP=HPRO(LINENO,PROBUF)     !LINE NUMBER IS DSAP		! V02
	   ENDIF

C          ***** End V04 changes *****

	   STATION_NO=0                  !NO STATION AND TERMINAL DEF.
	   TERMINAL_NO=0
	   IF (DSAP.LE.0.OR.DSAP.GT.X2X_SAP) THEN
	      CALL X2ERROR(X2ERR_RECONNECT,DSAP,STATION_NO,1)
	      CALL X2RELBUF(PROBUF)
	      GOTO 10
	   ENDIF
	ELSE
	   DSAP = ZEXT(BX2XS_SAP(STATION_NO))
C
C     ASSIGN SAP NOW
C
	   IF (IAND(DEST_LAYER,X2DEST_RETURN).NE.0) THEN !RETURN MSG
C
C     CHECK IF VALID DSAP
C
	      IF (DSAP.LE.0.OR.DSAP.GT.X2X_SAP) THEN
                 CALL X2ERROR(X2ERR_RECONNECT,DSAP,STATION_NO,2)
	         CALL X2RELBUF(PROBUF)
	         GOTO 10
	      ENDIF
C
	      TIME=X2X_LOOP_TIME-PRO(TIMOFF,PROBUF) !TIME IN SYSTEM
	      IF (TERMINAL_NO.NE.0) THEN
	        RESPONSE_INDEX=RESPONSE_INDEX+1
	        IF (RESPONSE_INDEX.LE.0.OR.RESPONSE_INDEX.GT.
     *	              X2X_RESPONSE_LEN) RESPONSE_INDEX=1
	        X2XA_RESPONSE(RESPONSE_INDEX)=TIME
	        X2XT_DELAY(TERMINAL_NO)=TIME
	      ENDIF
	      IF(X2XE_ACT_STATUS(DSAP).NE.X2XES_ONLINE) THEN!NOT ONLINE
	         CALL X2RELBUF(PROBUF)
	         GOTO 10
	      ENDIF
	   ELSE
C
C     IF ASYNC PVC CONNECTION THEN DETERMINE DESTINATION SAP AND
C     BUILD FE CONNECT ID USING SAP PORT AND PVC CIRCUIT NUMBER
C
	      CONN_TYPE=ZEXT(BX2XS_CONN_TYPE(STATION_NO))
              IF(CONN_TYPE.EQ.X2XSCT_ASYPVC .OR.
     *           CONN_TYPE.EQ.X2XSCT_USAT_PVC) THEN
		 IF(DSAP.EQ.0.OR.X2XS_CONN_ID(STATION_NO).EQ.0) THEN
		    PVC_PORT = X2XS_PHYS(STATION_NO)
		    PVC_CIRCUIT = X2XS_PVC(STATION_NO)
		    LOCAL_PORT = X2XPN_NETWORK_TO_LOCAL(PVC_PORT)
		    DSAP = X2XPL_SAP(LOCAL_PORT)
		    SAP_PORT = X2XPL_SAP_PORT(LOCAL_PORT)
                    X2XS_CONN_ID(STATION_NO)= IOR(ISHFT(SAP_PORT,24),
     *                                            ISHFT(PVC_CIRCUIT,8))
	            BX2XS_SAP(STATION_NO) = DSAP
	            IF(TERMINAL_NO.GT.0) X2XT_CONN_ID(TERMINAL_NO)=0
	            IF(DELIVER_OVR.EQ.0) DELIVER_OVR=X2X_UNSOLICIT_DELIVER
	         ENDIF	
	      ENDIF
C
C     UNSOLICITED MESSAGE, BROADCAST OR COMMAND
C     WE ALWAYS TRY TO SEND TO LAST STATION SAP, IN CASE IF
C     SAP IS NOT AVAILABLE WE WILL TRY TO GET IT ACCORDING
C     TO X2GETSAP ALGORITHM (LEAST USED SAP, ROUND ROBIN CHOICE)
C     WE WILL ALSO FORCE DELIVERY ERROR TO BE GENERATED, SO
C     IN CASE OF FAILURE WE WILL TRY DIFFERENT SAP
C
C
	      IF (DSAP.LE.0) THEN
C	START OF V05 CHANGE BLOCK
		 CLASS=X2XS_STNCLS(STATION_NO)
		 IF (CLASS.EQ.0) THEN
		    SUBNETWORK=0
		 ELSE
		    SUBNETWORK=X2XC_SUBNETWORK(CLASS)
		 ENDIF
	         CALL X2GETSAP(DSAP,CONN_TYPE, SUBNETWORK, STATUS) !GET SAP 
C	END OF V05 CHANGE BLOCK
	         IF (STATUS.NE.0) THEN        !NO READY SAP
	           PROCESS=IAND(HOST_ID,X2FEMES_HOST_ID_PROCESS_MASK)
	           IF(PROCESS.NE.0) THEN
	             RETRY_OFF=X2X_STATIONS*(PROCESS-1)+STATION_NO
	             RETRIES = ZEXT (BX2XR_RETRY_CNT(RETRY_OFF))
	             RETRIES=RETRIES+1
	             BX2XR_RETRY_CNT(RETRY_OFF) = RETRIES
	           ELSE
	             CALL X2ERROR(X2ERR_SAP,DSAP,STATION_NO,STATUS)
	           ENDIF
	           CALL X2RELBUF(PROBUF)
	           GOTO 10
	         ENDIF
	         X2XS_CONN_ID(STATION_NO)=0
	         BX2XS_SAP(STATION_NO) = DSAP
	         IF (TERMINAL_NO.GT.0) X2XT_CONN_ID(TERMINAL_NO)=0
                 IF(DELIVER_OVR.EQ.0) DELIVER_OVR=X2X_UNSOLICIT_DELIVER
	      ELSE
	         IF(X2XE_ACT_STATUS(DSAP).NE.X2XES_ONLINE) THEN !NOT UP
                  IF (CONN_TYPE.EQ.X2XSCT_ASYPVC .OR.
     *                CONN_TYPE.EQ.X2XSCT_USAT_PVC) THEN
		      STATUS = -1
		   ELSE
	              CALL X2GETSAP(DSAP, CONN_TYPE, SUBNETWORK,STATUS) !GET SAP TO SEND DATA TO
		   ENDIF
	           IF (STATUS.NE.0) THEN
	             PROCESS=IAND(HOST_ID,X2FEMES_HOST_ID_PROCESS_MASK)
                     IF(CONN_TYPE.NE.X2XSCT_ASYPVC .AND.
     *                  CONN_TYPE.NE.X2XSCT_USAT_PVC) THEN
	               IF(PROCESS.NE.0) THEN
  	                 RETRY_OFF=X2X_STATIONS*(PROCESS-1)+STATION_NO
	                 RETRIES = ZEXT (BX2XR_RETRY_CNT(RETRY_OFF))
	                 RETRIES=RETRIES+1
	                 BX2XR_RETRY_CNT(RETRY_OFF) = RETRIES
	               ELSE
	                 CALL X2ERROR(X2ERR_SAP,DSAP,STATION_NO,STATUS)
	               ENDIF
		     ENDIF
	             CALL X2RELBUF(PROBUF)
	             GOTO 10
	           ENDIF
                   IF(CONN_TYPE.NE.X2XSCT_ASYPVC .AND.
     *                CONN_TYPE.NE.X2XSCT_USAT_PVC) THEN
	             X2XS_CONN_ID(STATION_NO)=0
	             BX2XS_SAP(STATION_NO) = DSAP
	             IF (TERMINAL_NO.GT.0) X2XT_CONN_ID(TERMINAL_NO)=0
	             IF(DELIVER_OVR.EQ.0)DELIVER_OVR=X2X_UNSOLICIT_DELIVER
		   ENDIF
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
20	CONTINUE
	BUF=X2XE_BUF(DSAP)               !GET BUFFER TO PUT IT IN
	IF (BUF.LE.0) THEN
	   QUE=X2X_GAME_QUE
	   CALL LANGETA(BUF,QUE,ST)    !IF NO BUFFER - GET IT
	   IF (ST.EQ.2) THEN
	      CALL X2ADDPRO(PROBUF)  !IF COULD NOT GET ONE, RETURN
C                                   PROCOM BUFFER
	      GOTO 10                !AND TRY DIFFERENT BUFFER
	   ENDIF
	   LANBUF(LANBTYP,BUF)=LTYPDATA     !ASSUME WE ALWAYS SEND DATA
	   X2XE_BUF(DSAP)=BUF
	   X2XE_FORMAT_TIME(DSAP)=X2X_LOOP_TIME+X2X_SEND_DELAY
	   X2XE_INDEX(DSAP)=-1
	   X2XE_CNT(DSAP)=0
	ENDIF
C
	IF(SERIAL_NUM.GT.X2XE_SERIAL(DSAP))X2XE_SERIAL(DSAP)=SERIAL_NUM
	POINTER=X2XE_INDEX(DSAP)
	CALL X2SNDMSG(LANBUF(LANDATAF,BUF),PRO(OUTTAB,PROBUF),MES_LEN,
     *	  TERMINAL_NO,STATION_NO,POINTER,SSAP,DSAP,MES_NUM,
     *	   DEST_LAYER,CONNCTL_OVR,DELIVER_OVR,HOST_ID,STATUS)
C
	X2XE_TOT_MSG_CNT(DSAP)=X2XE_TOT_MSG_CNT(DSAP)+1
	IF (IAND(DEST_LAYER,X2DEST_STATION).NE.0)
     *	     X2XE_STATION_MSG_CNT(DSAP)=X2XE_STATION_MSG_CNT(DSAP)+1
C
	X2XE_INDEX(DSAP)=POINTER
	IF (STATUS.EQ.X2ERR_NOMORE) THEN
	   CALL X2SNDLAN(SSAP,DSAP,BUF,X2XE_INDEX(DSAP))
	   X2XE_BUF(DSAP)=-1
	   X2XE_CNT_BLK(DSAP)=X2XE_CNT_BLK(DSAP)+1
	   GOTO 20                 !PROCESS SAME TRANSACTION NEXT
	ENDIF
	IF (FIRST.EQ.PROBUF) FIRST=-1
C
	IF (IAND(X2ERR_FATAL,STATUS).NE.0) THEN
	   CALL X2ERROR(X2ERR_INV,DSAP,DUMMY,STATUS)
	   CALL X2RELBUF(PROBUF)
	   GOTO 10               !TRY TO DEQUEUE NEXT BUFFER
	ENDIF
C
C
	IF (STATUS.EQ.X2ERR_SEND_NOW) THEN
	   CALL X2SNDLAN(SSAP,DSAP,BUF,X2XE_INDEX(DSAP))
	   X2XE_BUF(DSAP)=-1
	   X2XE_CNT_BLK(DSAP)=X2XE_CNT_BLK(DSAP)+1
	   CALL X2RELBUF(PROBUF)
	   GOTO 10                !PROCESS NEXT TRANSACTION
	ENDIF
	X2XE_CNT(DSAP)=X2XE_CNT(DSAP)+1
	X2XE_TOT_MSG_CNT(DSAP)=X2XE_TOT_MSG_CNT(DSAP)+1
	IF (IAND(DEST_LAYER,X2DEST_STATION).NE.0)
     *	       X2XE_STATION_MSG_CNT(DSAP)=X2XE_STATION_MSG_CNT(DSAP)+1
	CALL X2RELBUF(PROBUF)
	GOTO 10
	END
