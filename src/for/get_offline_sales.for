C
C GET_OFFLINE_SALES.FOR
C
C V04 12-AUG-2011 RXK "Millennium" replaced with "ES Evolution"
C V03 13-DEC-2010 FRP Lotto2 Changes
C V02 29-MAY-2001 EPH     FIX TO USE KIK GAME NUMBER (KGAM) INSTEAD OF GAM
C V01 21-FEB-2001 EPH/ANG INITIAL RELEASE FOR PORTUGAL
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C UPDATE OFFLINE SALES (FROM SCML OFFLINE SYSTEM) IN MEMORY
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXT
	PROGRAM GET_OFFLINE_SALES
	IMPLICIT NONE

	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'

	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:LTOCOM.DEF'
	INCLUDE 'INCLIB:SPTCOM.DEF'
	INCLUDE 'INCLIB:TGLCOM.DEF'
        INCLUDE 'INCLIB:KIKCOM.DEF'
        INCLUDE 'INCLIB:SCRCOM.DEF'
        INCLUDE 'INCLIB:WITCOM.DEF'
        INCLUDE 'INCLIB:TSLCOM.DEF'
	INCLUDE 'INCLIB:NBRCOM.DEF'
        INCLUDE 'INCLIB:BNGCOM.DEF'
        INCLUDE 'INCLIB:DBLCOM.DEF'
        INCLUDE 'INCLIB:CPLCOM.DEF'
        INCLUDE 'INCLIB:SSCCOM.DEF'
        INCLUDE 'INCLIB:TRPCOM.DEF'
        INCLUDE 'INCLIB:STRCOM.DEF'
        INCLUDE 'INCLIB:STOPCOM.DEF'
        INCLUDE 'INCLIB:DLTREC.DEF'
        INCLUDE 'INCLIB:DKKREC.DEF'

        INCLUDE 'INCLIB:AGTINF.DEF'
        INCLUDE 'INCLIB:RECAGT.DEF'

        INCLUDE 'INCLIB:DATBUF.DEF'
        INCLUDE 'INCLIB:STANDARD.DEF'
        INCLUDE 'INCLIB:INTERFACES_REC.DEF'

	INTEGER*2  DATE(DATLEN)
	INTEGER*4  GAM, KGAM                
	INTEGER*4  IND                
        INTEGER*4  TER
	INTEGER*4  GTYP, GIND 
	INTEGER*4  LUN, GLUN
	INTEGER*4  FDB(7),UNIT_SAP,IDX_FDB(7)
	INTEGER*4  ST, I
	INTEGER*4  DRAW
        INTEGER*4  MSG_LUN /6/                                                   
	INTEGER*4  ONEDRAW_AMT,FIVEDRAW_AMT,AMT
	INTEGER*4  UPDMEM,FINLUN,TOTPRM,TOTCOMMSAP(MAXGAM)

        INTEGER*4  TYPE_OF_WAGER
        PARAMETER  (TYPE_OF_WAGER = 2)
        INTEGER*4  ONEDRAW
        PARAMETER  (ONEDRAW  = 1)
        INTEGER*4  FIVEDRAW
        PARAMETER  (FIVEDRAW = 2)

	INTEGER*4  TERAMT(MAXGAM, TYPE_OF_WAGER, NUMAGT)    !SALES AMOUNT PER GAME/AGENT
	INTEGER*4  TERCNT(MAXGAM, TYPE_OF_WAGER, NUMAGT)    !SALES COUNT PER GAME/AGENT
        INTEGER*4  GAMAMT(MAXGAM, TYPE_OF_WAGER)            !SALES AMOUNT PER GAME
        INTEGER*4  GAMCNT(MAXGAM, TYPE_OF_WAGER)            !SALES COUNT PER GAME
	INTEGER*4  KIKAMT(MAXGAM,NUMKIK,TYPE_OF_WAGER)      !JOKER SALES AMOUNT PER GAME

	INTEGER*4  MDURATION                 !MULTIDRAW DURATION IS ALWAYS 5
        PARAMETER  (MDURATION = 4)

	INTEGER*4  OFFLINE_SALES             !OFFLINE SALES SPECIAL POSITION IN GAME %%%SAL TABLE
        PARAMETER  (OFFLINE_SALES = 2)

	INTEGER*4  TOTAMTDIST, TOTAMT
	INTEGER*4  COMAMT(2),TOTCOMAMT(2)
	INTEGER*4  AGTREC

	REAL*8     AMTR8

	CHARACTER*20 FILENAME
	INTEGER*4    IFILNAM(5)
	EQUIVALENCE  (FILENAME,IFILNAM)

	LOGICAL ISTHERE

	INTEGER*8   AMTDRWOFF(2,6,MAXGAM)		    !FOR NEXT DRAWS(1=COMISSION / 2=AMOUNT
	INTEGER*4   FATOR

	STRUCTURE	/STCAMTDRW/
	    INTEGER*8	AMTDRWONL(6,MAXGAM)
	    INTEGER*8	COMDRWONL(6,MAXGAM)
            INTEGER*8	AMTDRWOFF(6,MAXGAM)
	    INTEGER*8	COMDRWOFF(6,MAXGAM)
	END STRUCTURE

	RECORD /STCAMTDRW/ REGAMTDRW
C
C
        CALL COPYRITE                                                             

	DATE(VCDC) = DAYCDC

	CALL CDATE(DATE)

	INQUIRE (FILE='FILE:OFFWAG.ASC',EXIST=ISTHERE)

	IF (.NOT.ISTHERE .AND. DATE(VDOW).EQ.SATURDAY) THEN
	    TYPE*,IAM(),' ***************************************************'
	    TYPE*,IAM(),' ****        FILE OFFWAG.ASC NOT FOUND !!!      ****' 
	    TYPE*,IAM(),' **** OFFWAG.ASC FILE SHOULD BE PROCESSED TODAY ****'
	    TYPE*,IAM(),' ***************************************************'
	    CALL GPAUSE()
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF

	IF (ISTHERE .AND. DATE(VDOW).NE.SATURDAY) THEN
	    TYPE*,IAM(),' *** OFFWAG.ASC SHOULD BE PROCESSED ONLY ON SATURDAYS....'
	    CALL GPAUSE()
	ENDIF

	IF (.NOT.ISTHERE) THEN
	    CALL GSTOP(GEXIT_SUCCESS)
	ENDIF

        TYPE*,IAM(),' '
        TYPE *,'------------------------------------------------------------------------'   
        TYPE *,'<<<<<         UPDATE ES EVOLUTION SYSTEM WITH OFFLINE SALES         >>>>>'   
        TYPE *,'------------------------------------------------------------------------'
        TYPE*,IAM(),' '

C
C FIRST, CHECK OFFWAGFIN FILE
C
	TYPE*,IAM(),'>>> CHECKING OFFWAGFIN.ASC FILE...'
	TYPE*,IAM(),' '

	CALL FIND_AVAILABLE_LUN(FINLUN,ST)
	IF (ST.NE.0) THEN
            TYPE*,IAM(),'>>> ERROR GETTING LUN FOR OFFWAGFIN.ASC'
            CALL GSTOP(GEXIT_FATAL)
	ENDIF	

	CALL OPEN_OFFWAGFIN (FINLUN, ST)
	IF (ST.NE.0) THEN
           CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' STATUS ', ST, ' ', 0)
	   CALL GPAUSE()
	ELSE
      	   CALL READ_OFFWAGFIN (ST)
           IF (ST.NE.0) THEN
              CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' STATUS ', ST, ' ', 0)
              CALL GPAUSE()
           ENDIF

           CALL READ_OFFWAGFIN (ST)
           DO WHILE (ABS(ST).NE.144)
	      IF (ST.NE.0) THEN
		 CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' STATUS ', ST, ' ', 0)
		 CALL GPAUSE()
	      ENDIF
	      CALL READ_OFFWAGFIN (ST)
	   ENDDO
	   CLOSE(FINLUN)
	ENDIF

C
C       OPEN OFFLINE SALES FILE
C	
	TYPE*,IAM(),'>>> CHECKING OFFWAG.ASC FILE...'
	TYPE*,IAM(),' '

	CALL FIND_AVAILABLE_LUN(LUN,ST)
	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'>>> ERROR GETTING LUN FOR OFFWAG.ASC'
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF

	CALL OPEN_OFFWAG (LUN, ST)
	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'>>> ERROR OPPENING FILE OFFWAG.ASC, STATUS = ',ST
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF
C
C     READ FIRST RECORD HERE TO PROCESS THE HEADER
C     ********************************************
      	CALL READ_OFFWAG (ST)
        IF (ST.NE.0) THEN
           CALL DISPERR (MSG_LUN, OFFWAG_REC.ERRSTR, 0, ' ', 0, ' ', 0)
           CALL GSTOP(GEXIT_FATAL)
        ENDIF
C
C	LOOP READING OFFLINE SALES FILE
C       (FILL GAMAMT/GAMCNT AND TERAMT/TERCNT AND TOTAMT)
C
	TOTAMT = 0
	CALL FASTSET(0, AMTDRWOFF, SIZEOF(AMTDRWOFF)/4)
	CALL FASTSET(0, TOTCOMMSAP,SIZEOF(TOTCOMMSAP)/4)
C
      	CALL READ_OFFWAG (ST)
	DO WHILE (ABS(ST).NE.144)
           IF (ST.NE.0) THEN
              CALL DISPERR (MSG_LUN, OFFWAG_REC.ERRSTR, 0, ' ', 0, ' ', 0)
              CALL GPAUSE()
	   ELSEIF (OFFWAG_REC.RECTYPE.EQ.'DT ') THEN
C
C UPDATE CLERK CONTROL ON MEMORY (TO PSTASF). FOR ONLINE TERMINALS IT IS DONE BY SIGON
C
	      AGTTAB(AGTNCL,OFFWAG_REC.TERM) = 1
C
C UPDATE ONE DRAW AMOUNT AND COUNT PER TERMINAL
C
	      AMTR8       = OFFWAG_REC.B_PRICE*OFFWAG_REC.WAG_CNT(ONEDRAW) / DFLOAT(P(PRFACTOR))
	      ONEDRAW_AMT = IDINT(AMTR8)
	      TERAMT(OFFWAG_REC.ON_GAME, ONEDRAW, OFFWAG_REC.TERM) = 
     *                                     TERAMT(OFFWAG_REC.ON_GAME, ONEDRAW, OFFWAG_REC.TERM) + ONEDRAW_AMT

	      TERCNT(OFFWAG_REC.ON_GAME, ONEDRAW, OFFWAG_REC.TERM) = 
     *                                     TERCNT(OFFWAG_REC.ON_GAME, ONEDRAW, OFFWAG_REC.TERM) + OFFWAG_REC.TKT_CNT(ONEDRAW)
C
C CALCULATE THIS DRAW AMOUNT FOR SAP
C
	      AMTDRWOFF(1,1,OFFWAG_REC.ON_GAME) = AMTDRWOFF(1,1,OFFWAG_REC.ON_GAME) + ONEDRAW_AMT

	      CALL FASTSET(0, TOTCOMAMT, SIZEOF(TOTCOMAMT)/4)
      	      CALL GETCOM( ONEDRAW_AMT,
     *			   TWAG,
     *			   OFFWAG_REC.ON_GAME,
     *			   COMAMT,
     *			   TOTCOMAMT,
     *                     0, 0, 0   )

	      AMTDRWOFF(2,1,OFFWAG_REC.ON_GAME) = AMTDRWOFF(2,1,OFFWAG_REC.ON_GAME) +
     *                                            (TOTCOMAMT(1)*DYN_BETUNIT+TOTCOMAMT(2))
C
C UPDATE FIVE DRAW AMOUNT AND COUNT PER TERMINAL
C
	      AMTR8        = OFFWAG_REC.B_PRICE*OFFWAG_REC.WAG_CNT(FIVEDRAW) / DFLOAT(P(PRFACTOR))
	      FIVEDRAW_AMT = IDINT(AMTR8)
	      TERAMT(OFFWAG_REC.ON_GAME, FIVEDRAW, OFFWAG_REC.TERM) = 
     *                                     TERAMT(OFFWAG_REC.ON_GAME, FIVEDRAW, OFFWAG_REC.TERM) + FIVEDRAW_AMT
C
C CALCULATE AMOUNT FOR SAP
C
	      IF    (OFFWAG_REC.WAG_CNT(FIVEDRAW) .GT. 0) THEN
C
C GET ONE WEEK AMOUNT AND COMISSION (PER DRAW)
C
		    AMTR8 = OFFWAG_REC.B_PRICE*OFFWAG_REC.WAG_CNT(FIVEDRAW) / DFLOAT(P(PRFACTOR))
		    AMT   = IDINT(AMTR8)

		    DO  IND = 2, 6
			CALL FASTSET(0, TOTCOMAMT, SIZEOF(TOTCOMAMT)/4)

		        AMTDRWOFF(1,IND,OFFWAG_REC.ON_GAME) = AMTDRWOFF(1,IND,OFFWAG_REC.ON_GAME) + AMT
      		        CALL GETCOM( AMT,
     *				     TWAG,
     *			             OFFWAG_REC.ON_GAME,
     *			             COMAMT,
     *			             TOTCOMAMT,
     *                               0, 0, 0   )
		        AMTDRWOFF(2,IND,OFFWAG_REC.ON_GAME) = AMTDRWOFF(2,IND,OFFWAG_REC.ON_GAME) +
     *                                                        (TOTCOMAMT(1)*DYN_BETUNIT+TOTCOMAMT(2))
		    ENDDO
	      ENDIF
C
C CALCULATING COMISSION AS INVOICE TO SAP
C
	      CALL FASTSET(0, TOTCOMAMT, SIZEOF(TOTCOMAMT)/4)
	      AMT = ONEDRAW_AMT+FIVEDRAW_AMT*5
      	      CALL GETCOM( AMT,
     *			   TWAG,
     *			   OFFWAG_REC.ON_GAME,
     *			   COMAMT,
     *			   TOTCOMAMT,
     *                     0, 0, 0   )
	      TOTCOMMSAP(OFFWAG_REC.ON_GAME) = TOTCOMMSAP(OFFWAG_REC.ON_GAME) + 
     *                                         (TOTCOMAMT(1)*DYN_BETUNIT+TOTCOMAMT(2))
C
	      TERCNT(OFFWAG_REC.ON_GAME, FIVEDRAW, OFFWAG_REC.TERM) = 
     *                                     TERCNT(OFFWAG_REC.ON_GAME, FIVEDRAW, OFFWAG_REC.TERM) + OFFWAG_REC.TKT_CNT(FIVEDRAW)
C
C UPDATE ONE DRAW AMOUNT AND COUNT PER GAME
C
	      GAMAMT(OFFWAG_REC.ON_GAME,ONEDRAW) = GAMAMT(OFFWAG_REC.ON_GAME,ONEDRAW) + ONEDRAW_AMT
	      GAMCNT(OFFWAG_REC.ON_GAME,ONEDRAW) = GAMCNT(OFFWAG_REC.ON_GAME,ONEDRAW) + OFFWAG_REC.TKT_CNT(ONEDRAW)
C
C UPDATE FIVE DRAW AMOUNT AND COUNT PER GAME
C
	      GAMAMT(OFFWAG_REC.ON_GAME,FIVEDRAW) = GAMAMT(OFFWAG_REC.ON_GAME,FIVEDRAW) + FIVEDRAW_AMT
	      GAMCNT(OFFWAG_REC.ON_GAME,FIVEDRAW) = GAMCNT(OFFWAG_REC.ON_GAME,FIVEDRAW) + OFFWAG_REC.TKT_CNT(FIVEDRAW)
C
C IF JOKER, UPDATE KIKAMT 
C
              GTYP = GNTTAB(GAMTYP,OFFWAG_REC.ON_GAME)
              GIND = GNTTAB(GAMIDX,OFFWAG_REC.ON_GAME)
	      IF (GTYP.EQ.TKIK) THEN
	         IF (GIND.GT.0) THEN
		   DO GAM=1,MAXGAM
		      IF (KGNTAB(GAM).GT.0) THEN
		         AMTR8  = OFFWAG_REC.B_PRICE*OFFWAG_REC.KIK_WAG_CNT(GAM,ONEDRAW) / DFLOAT(P(PRFACTOR))
		         AMT    = IDINT(AMTR8)
		         KIKAMT(GAM,GIND,ONEDRAW) = KIKAMT(GAM,GIND,ONEDRAW) + AMT

		         AMTR8  = OFFWAG_REC.B_PRICE*OFFWAG_REC.KIK_WAG_CNT(GAM,FIVEDRAW) / DFLOAT(P(PRFACTOR))
		         AMT    = IDINT(AMTR8)
		         KIKAMT(GAM,GIND,FIVEDRAW) = KIKAMT(GAM,GIND,FIVEDRAW) + AMT
		      ENDIF
	           ENDDO
	         ENDIF
	      ENDIF

	      TOTAMT = TOTAMT + ONEDRAW_AMT + (FIVEDRAW_AMT*5)

           ENDIF
      	   CALL READ_OFFWAG (ST)
	ENDDO
C
	CLOSE(LUN)
C
C	SHOW TOTAL SALES (MULTI AND SIMPLE) 
C
	TYPE*,IAM(),'------------------------------------------------'
	WRITE(6,100) IAM(),CMONY(TOTAMT,13,BETUNIT)
	TYPE*,IAM(),'------------------------------------------------'

	CALL PRMYESNO('Update memory ? [Y/N]',UPDMEM)
	IF (UPDMEM.EQ.2.OR.UPDMEM.EQ.3) CALL GSTOP(GEXIT_OPABORT)
C
C	UPDATE SALES IN AGENT TABLE AND GAME TABLE 
C
	TOTAMTDIST = 0

	DO 200 GAM = 1,MAXGAM

           GTYP = GNTTAB(GAMTYP,GAM)
           GIND = GNTTAB(GAMIDX,GAM)
           IF (GTYP.EQ.0 .OR. GIND.EQ.0) GOTO 200       !SKIP GAME 

	   DO 300 TER = 1,NUMAGT

              IF (AGTTAB(AGTNUM,TER).EQ.0) GOTO 300     !SKIP TERMINAL IF NO AGENT NUMBER
C
C	      UPDATE AGENT TABLE
C
              AGTGAM(GSCNT,GAM,TER) = AGTGAM(GSCNT,GAM,TER) + TERCNT(GAM,ONEDRAW,TER) + TERCNT(GAM,FIVEDRAW,TER)
              AGTGAM(GSAMT,GAM,TER) = AGTGAM(GSAMT,GAM,TER) + TERAMT(GAM,ONEDRAW,TER) + TERAMT(GAM,FIVEDRAW,TER)*5

              TOTAMTDIST = TOTAMTDIST + TERAMT(GAM,ONEDRAW,TER) + TERAMT(GAM,FIVEDRAW,TER)*5

300        CONTINUE

      	   DAYTYP(TRACNT,TWAG,GAM) = DAYTYP(TRACNT,TWAG,GAM) + GAMCNT(GAM,ONEDRAW) + GAMCNT(GAM,FIVEDRAW)
      	   DAYTYP(DOLAMT,TWAG,GAM) = DAYTYP(DOLAMT,TWAG,GAM) + GAMAMT(GAM,ONEDRAW) + GAMAMT(GAM,FIVEDRAW)*5
C 
C          UPDATE MEMORY CORRESPONDENT TO DAFSAL
C
	   DAYSAL(1,GAM) = DAYSAL(1,GAM) + GAMAMT(GAM,ONEDRAW) + GAMAMT(GAM,FIVEDRAW)
           DO IND = 2,MDURATION+1
	      DAYSAL(IND,GAM) = DAYSAL(IND,GAM) + GAMAMT(GAM,FIVEDRAW)
           ENDDO 

C
C          UPDATE SPECIFIC GAME TABLES
C
	   IF (GTYP.EQ.TLTO) THEN
	      LTOSAL(OFFLINE_SALES,GIND) = LTOSAL(OFFLINE_SALES,GIND) + GAMAMT(GAM,ONEDRAW) + GAMAMT(GAM,FIVEDRAW)
C
C UPDATE MULTI DRAW WAGERS
C
	      CALL FIND_AVAILABLE_LUN(GLUN,ST)
	      IF (ST.NE.0) CALL FILERR(GFNAMES(1,GAM),0,ST,DRAW)

	      CALL OPENW(GLUN,GFNAMES(1,GAM),4,0,0,ST)
	      IF (ST.NE.0) CALL FILERR(GFNAMES(1,GAM),1,ST,DRAW)
              CALL IOINIT(FDB,GLUN,DLTSEC*256)
C
C USE LAST POSITION OF TABLE FOR FIVE DRAW SALES
C
	      DO IND=1,MDURATION
	         DRAW = DAYDRW(GAM) + IND
		 CALL READW(FDB,DRAW,DLTREC,ST)
		 IF (ST.NE.0) THEN
		    CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
		 ELSE
	            DLTSAL(LTGENT) = DLTSAL(LTGENT) + GAMAMT(GAM,FIVEDRAW)
		    CALL WRITEW(FDB,DRAW,DLTREC,ST)
		    IF(ST.NE.0) CALL FILERR(GFNAMES(1,GAM),3,ST,DRAW)
	         ENDIF
	      ENDDO
	      CALL CLOSEFIL(FDB)

           ENDIF

	   IF (GTYP.EQ.TSPT) THEN

	      SPTSAL(OFFLINE_SALES,GIND) = SPTSAL(OFFLINE_SALES,GIND) + GAMAMT(GAM,ONEDRAW) 

           ENDIF

	   IF (GTYP.EQ.TTGL) THEN

	      TGLSAL(OFFLINE_SALES,GIND) = TGLSAL(OFFLINE_SALES,GIND) + GAMAMT(GAM,ONEDRAW) 

	   ENDIF

200	CONTINUE
C
C UPDATE KIKSAL
C
	KGAM = GTNTAB(TKIK,1)
	IF (KGAM.LE.0) THEN
	   TYPE*,IAM(),'*** NO ACTIVE JOKER...JOKER SALES WILL NOT BE UPDATED'
	   CALL GPAUSE() 
	ELSE
           CALL FIND_AVAILABLE_LUN(GLUN,ST)
           IF (ST.NE.0) CALL FILERR(GFNAMES(1,KGAM),0,ST,DRAW)       !V02

           CALL OPENW(GLUN,GFNAMES(1,KGAM),4,0,0,ST)
  	   IF (ST.NE.0) CALL FILERR(GFNAMES(1,KGAM),1,ST,DRAW)       !V02
	   CALL IOINIT(FDB,GLUN,DKKSEC*256)


	   DO GAM=1,MAXGAM
	      IF (KGNTAB(GAM).GT.0) THEN
                 GIND = GNTTAB(GAMIDX,KGNTAB(GAM))
	         KIKSAL(OFFLINE_SALES,GAM,GIND) = KIKSAL(OFFLINE_SALES,GAM,GIND) + KIKAMT(GAM,GIND,ONEDRAW) + 
     *                                            KIKAMT(GAM,GIND,FIVEDRAW)
C
C USE LAST POSITION OF TABLE FOR FIVE DRAW SALES
C
	         DO IND=1,MDURATION
	            DRAW = DAYDRW(KGAM) + IND
		    CALL READW(FDB,DRAW,DKKREC,ST)
		    IF (ST.NE.0) THEN
		       CALL FILERR(GFNAMES(1,GAM),2,ST,DRAW)
		    ELSE
	               DKKSAL(KIGENT,GAM) = DKKSAL(KIGENT,GAM) + KIKAMT(GAM,GIND,FIVEDRAW)
		       CALL WRITEW(FDB,DRAW,DKKREC,ST)
		       IF(ST.NE.0) CALL FILERR(GFNAMES(1,GAM),3,ST,DRAW)
	            ENDIF
	         ENDDO

	      ENDIF
	   ENDDO
	   CALL CLOSEFIL(FDB)
	ENDIF
C
C	CHECK IF TOTAL SALES WERE REALLY DISTRIBUTED. IF NOT, SHOW DIFFERENCE.
C
	IF (TOTAMT .NE. TOTAMTDIST) THEN
           CALL DISPERR (6, 'Total amount distributed is not equal to total amount',0,
     *                      'Total amount distributed = ', TOTAMTDIST,
     *                      'Total amount             = ', TOTAMT)
        ENDIF

        WRITE(FILENAME,10) DAYCDC
        CALL LIB$RENAME_FILE('FILE:OFFWAG.ASC',FILENAME)     !RENAME FILE TO .CDC
C
C       UPDATE VALIDATION AMOUNTS
C
C
C	OPEN ASF FILE
C
	CALL OPENASF(ASF)

	CALL FIND_AVAILABLE_LUN(FINLUN,ST)
	IF (ST.NE.0) THEN
            TYPE*,IAM(),'>>> ERROR GETTING LUN FOR OFFWAGFIN.ASC'
            CALL GSTOP(GEXIT_FATAL)
	ENDIF	

	CALL OPEN_OFFWAGFIN (FINLUN, ST)
	IF (ST.NE.0) THEN
           CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' STATUS ', ST, ' ', 0)
           CALL GSTOP(GEXIT_FATAL)
	ENDIF

      	CALL READ_OFFWAGFIN (ST)
        IF (ST.NE.0) THEN
           CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' STATUS ', ST, ' ', 0)
           CALL GSTOP(GEXIT_FATAL)
        ENDIF

        CALL READ_OFFWAGFIN (ST)
        DO WHILE (ABS(ST).NE.144)
           IF (ST.NE.0) THEN
              CALL DISPERR (MSG_LUN, OFFWAGFIN_REC.ERRSTR, 0, ' ', 0, ' ', 0)
              CALL GPAUSE()
           ELSEIF (OFFWAGFIN_REC.RECTYPE.EQ.'DT ') THEN
C
	      TOTPRM = TOTPRM + OFFWAGFIN_REC.PRMPAG
C
C	      SEND "TRANSPORTES" AND "REGULARIZACOES" VALUES TO ASFLGR (IF THEY EXIST)
C
	      IF (OFFWAGFIN_REC.TRANSP.NE.0  .OR.  OFFWAGFIN_REC.CENREC.NE.0 .OR.
     *            OFFWAGFIN_REC.PRMPAG.GT.0                                       ) THEN
          
	         CALL READASF(OFFWAGFIN_REC.TERM,ASFREC,ST)
	         IF (ST.NE.0) THEN
	            CALL DISPERR(6,'Error reading ASF file for TERMINAL = ', OFFWAGFIN_REC.TERM,
     *                             'This may cause lost of financial data !!!', 0, 'Status = ', ST)
	         ELSE

C	            IF (OFFWAGFIN_REC.TRANSP.NE.0) THEN
C 	               DO I=15,2,-1
C                          ASFLGR(LGRCDC, I) = ASFLGR(LGRCDC, I-1)
C                          ASFLGR(LGRCOD, I) = ASFLGR(LGRCOD, I-1)
C                          ASFLGR(LGRAMTU,I) = ASFLGR(LGRAMTU,I-1)
C                          ASFLGR(LGRAMTP,I) = ASFLGR(LGRAMTP,I-1)
C                          ASFLGR(LGRINF, I) = ASFLGR(LGRINF, I-1)
C                       ENDDO
C	               ASFLGR(LGRCOD, 1) = 40000                       !TRANSPORTE (T) 
C	               ASFLGR(LGRCDC, 1) = DAYCDC
C	               ASFLGR(LGRAMTU,1) = OFFWAGFIN_REC.TRANSP*(-1)   !ITS WORKS LIKE A CREDIT
C	               ASFLGR(LGRAMTP,1) = 0
C	               ASFLGR(LGRINF, 1) = 0
C                   ENDIF
C
C WE ARE USING ASFINV CURRENT POSITION TO KEEP OFFLINE PAYMENTS (INVCLC WILL TAKE CARE OF IT....)
C
	            IF  (OFFWAGFIN_REC.PRMPAG.GT.0) THEN
                        ASFINV(ASFOFFPAY,1) = OFFWAGFIN_REC.PRMPAG 
			AGTHTB(AGTOFFPAY,OFFWAGFIN_REC.TERM) = 1
		    ENDIF

	            IF (OFFWAGFIN_REC.CENREC.NE.0) THEN
		       FATOR = 0
		       IF (OFFWAGFIN_REC.TIPCENREC.EQ.1) THEN
		          AGTREC = AGTTAB(AGTNUM,OFFWAGFIN_REC.TERM)/100000  ! CENTRAL DE RECEPCAO ??!!
		          IF (AGTREC.NE.99) THEN
	                     FATOR = -1   !LIKE CREDIT
      			  ENDIF
                       ELSE
                          FATOR = 1
                       ENDIF
                       IF (FATOR.NE.0) THEN
 	                  DO I=15,2,-1
                             ASFLGR(LGRCDC, I) = ASFLGR(LGRCDC, I-1)
                             ASFLGR(LGRCOD, I) = ASFLGR(LGRCOD, I-1)
                             ASFLGR(LGRAMTU,I) = ASFLGR(LGRAMTU,I-1)
                             ASFLGR(LGRAMTP,I) = ASFLGR(LGRAMTP,I-1)
                             ASFLGR(LGRINF, I) = ASFLGR(LGRINF, I-1)
                          ENDDO
	                  ASFLGR(LGRAMTU,1) = OFFWAGFIN_REC.CENREC*FATOR        !LIKE DEBIT
	                  ASFLGR(LGRCOD, 1) = 50000                          !REGULARIZACOES (R)
	                  ASFLGR(LGRCDC, 1) = DAYCDC
	                  ASFLGR(LGRAMTP,1) = 0
	                  ASFLGR(LGRINF, 1) = 0
                       ENDIF
                    ENDIF

	            CALL WRITASF(OFFWAGFIN_REC.TERM,ASFREC,ST)
	            IF (ST.NE.0) THEN
	               CALL DISPERR(6,'Error writing to ASF file for TERMINAL = ', OFFWAGFIN_REC.TERM,
     *                                'This may cause lost of financial data !!!', 0, 'Status = ', ST)
	            ENDIF

                 ENDIF     !ST.NE.0

              ENDIF     ! OFFWAGFIN_REC.TRANSP.NE.0  .OR.  OFFWAGFIN_REC.CENREC.NE.0

	   ENDIF    

           CALL READ_OFFWAGFIN (ST)
	ENDDO

	CLOSE (FINLUN)
	CALL CLOSASF()
C
        WRITE(FILENAME,20) DAYCDC
        CALL LIB$RENAME_FILE('FILE:OFFWAGFIN.ASC',FILENAME)     !RENAME FILE TO .CDC
C
C UPDATE SAP FILE AND PRINT TOTAL DRAWS AMOUNTS
C
C
C SALES FROM THIS DRAW
C
	FILENAME = 'SAPDRWAMT.FIL'
	CALL FIND_AVAILABLE_LUN(UNIT_SAP,ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,HANDLE_ERROR,ST,0)
C
	CALL FIDX_OPEN(IDX_FDB,FILENAME,SIZEOF(REGAMTDRW),'OLD',ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,OPEN_ERROR,ST,0)
C
C READ CURRENT DRAW 
C
	CALL FIDX_READ(IDX_FDB,1,SIZEOF(REGAMTDRW),REGAMTDRW,ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,READ_ERROR,ST,1)
C
	DO  GAM = 1, MAXGAM
	    DO  IND = 1, 6
		REGAMTDRW.AMTDRWOFF(IND,GAM) = AMTDRWOFF(1,IND,GAM)	!AMOUNT
		IF  (IND.EQ.1) THEN		           ! SPECIAL ADJUSTMENT TO KEEP TOTAL COMISSION FOR SAP
		    REGAMTDRW.COMDRWOFF(IND,GAM) = TOTCOMMSAP(GAM)
		    REGAMTDRW.COMDRWOFF(IND,GAM) = ISHFT(REGAMTDRW.COMDRWOFF(IND,GAM),32) + AMTDRWOFF(2,IND,GAM)      !COMISSION
		ELSE
		    REGAMTDRW.COMDRWOFF(IND,GAM) = AMTDRWOFF(2,IND,GAM)	!COMISSION
		ENDIF
	    ENDDO
	ENDDO
C
C WRITE CURRENT DRAW
C
	CALL FIDX_WRITE(IDX_FDB,1,SIZEOF(REGAMTDRW),REGAMTDRW,ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,WRITE_ERROR,ST,1)

	CALL FIDX_CLOSE(IDX_FDB,ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,CLOSE_ERROR,ST,0)
C
C GENERATE OFFLINE SALES REPORT
C
	CALL OFFLINE_SALES_RPT(GAMAMT,TOTPRM)

	CALL GSTOP(GEXIT_SUCCESS)

10      FORMAT('FILE:OFFWAG.',I4.4)
20      FORMAT('FILE:OFFWAGFIN.',I4.4)
100	FORMAT(1X,A18,'>>>> Total amount (one draw + five draw) = ',A13)

	END

C********************************************
C=======OPTIONS /CHECK=NOOVERFLOW/EXT
        SUBROUTINE OFFLINE_SALES_RPT(GAMAMT,TOTPRM)
        IMPLICIT NONE
C********************************************

        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'

        INCLUDE 'INCLIB:GLOBAL.DEF'
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:LTOCOM.DEF'
        INCLUDE 'INCLIB:SPTCOM.DEF'
        INCLUDE 'INCLIB:TGLCOM.DEF'
        INCLUDE 'INCLIB:KIKCOM.DEF'
        INCLUDE 'INCLIB:STANDARD.DEF'

        INTEGER*4  TYPE_OF_WAGER
        PARAMETER  (TYPE_OF_WAGER = 2)
        INTEGER*4  ONEDRAW
        PARAMETER  (ONEDRAW  = 1)
        INTEGER*4  FIVEDRAW
        PARAMETER  (FIVEDRAW = 2)

        INTEGER*4  GAMAMT(MAXGAM, TYPE_OF_WAGER)            !SALES AMOUNT PER GAME
	INTEGER*4  TOTPRM,GTYP,GIND,GAM,KGAM,TOTAMT,DAY
C**	INTEGER*4  TOTBEFDRW

	INTEGER*4    GNUM,I,ST,REPLUN,WEEK,YEAR,INDDRW,PAGE
	INTEGER*4    TOTOFF,TOTON,TOTONILIQ,TOTOFILIQ
        INTEGER*4    TOTONCOM,TOTOFCOM,TOTONLIQ,TOTOFLIQ,TOTFIVEWEEK
	CHARACTER*20 REPNAM/'FILE:INTEGRACAO.REP '/

        CHARACTER*20 FILENAME
        INTEGER*4    IFILNAM(5),IDX_FDB(7)
        EQUIVALENCE  (FILENAME,IFILNAM)

        STRUCTURE       /STCAMTDRW/
            INTEGER*8   AMTDRWONL(6,MAXGAM)
            INTEGER*8   COMDRWONL(6,MAXGAM)
            INTEGER*8   AMTDRWOFF(6,MAXGAM)
            INTEGER*8   COMDRWOFF(6,MAXGAM)
        END STRUCTURE

        RECORD /STCAMTDRW/ REGAMTDRW

        FILENAME = 'SAPDRWAMT.FIL'
C
        CALL FIDX_OPEN(IDX_FDB,FILENAME,SIZEOF(REGAMTDRW),'OLD',ST)
        IF  (ST.NE.0) CALL FILERR(IFILNAM,OPEN_ERROR,ST,0)


	CALL FIND_AVAILABLE_LUN(REPLUN,ST)
	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'>>> ERRO ALOCANDO LUN PARA ',REPNAM
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF

	OPEN(REPLUN,
     *       FILE   = REPNAM,
     *       IOSTAT = ST,
     *       STATUS = 'NEW')

	IF (ST.NE.0) THEN
	    TYPE*,IAM(),'>>> ERRO ABRINDO ARQUIVO ',REPNAM,' STATUS = ',ST
	    CALL GSTOP(GEXIT_FATAL)
	ENDIF

	DO GNUM=1,MAXGAM
            GTYP = GNTTAB(GAMTYP,GNUM)
	    GIND = GNTTAB(GAMIDX,GNUM)
	    IF (DAYDRW(GNUM).GT.0.AND.GTYP.NE.TPAS) THEN
		CALL TITLE('TOTAL DA INTEGRACAO ON/OFFLINE','GETOFFSAL',1,REPLUN,PAGE,DAYCDC)

		TOTAMT      = 0
C**		TOTBEFDRW   = 0
		TOTFIVEWEEK = 0
		IF (GTYP.EQ.TLTO) THEN
		    DO DAY=1,LTGENT
		       TOTAMT = TOTAMT + LTOSAL(DAY,GIND)	
		    ENDDO
C**		    TOTBEFDRW = LTOSAL(LTGENT,GIND)
		    TOTFIVEWEEK = TOTFIVEWEEK + LTOSAL(LTGENT,GIND) + LTOSAL(1,GIND) 
		ELSEIF (GTYP.EQ.TSPT) THEN
		    DO DAY=1,SPGENT
		       TOTAMT = TOTAMT + SPTSAL(DAY,GIND)	
		    ENDDO
C**		    TOTBEFDRW = SPTSAL(SPGENT,GIND)
		    TOTFIVEWEEK = TOTFIVEWEEK + SPTSAL(SPGENT,GIND) + SPTSAL(1,GIND) 
		ELSEIF (GTYP.EQ.TTGL) THEN
		    DO DAY=1,TGGENT
		       TOTAMT = TOTAMT + TGLSAL(DAY,GIND)	
		    ENDDO
C**		    TOTBEFDRW = TGLSAL(TGGENT,GIND)
		    TOTFIVEWEEK = TOTFIVEWEEK + TGLSAL(TGGENT,GIND) + TGLSAL(1,GIND) 
		ELSEIF (GTYP.EQ.TKIK) THEN
		    DO GAM=1,MAXGAM
		       KGAM = KGNTAB(GAM)
		       IF (KGAM.GT.0) THEN
		           GIND = GNTTAB(GAMIDX,KGAM)
		           DO DAY=1,KIGENT
		              TOTAMT = TOTAMT + KIKSAL(DAY,GAM,GIND)	
		           ENDDO
C**			   TOTBEFDRW = TOTBEFDRW + KIKSAL(KIGENT,GAM,GIND)
		           TOTFIVEWEEK = TOTFIVEWEEK + KIKSAL(KIGENT,GAM,GIND) + KIKSAL(1,GAM,GIND) 
		       ENDIF
		    ENDDO
		ENDIF		

	        TOTOFF = GAMAMT(GNUM,ONEDRAW) + GAMAMT(GNUM,FIVEDRAW) 
		TOTON  = TOTAMT - TOTOFF - TOTFIVEWEEK
                CALL GETWEK(DAYDRW(GNUM),GNUM,WEEK,YEAR,ST)

	        WRITE(REPLUN,100) (GLNAMES(I,GNUM),I=1,4),WEEK,YEAR,
     *                             CMONY(TOTAMT,13,BETUNIT),
     *                             CMONY(TOTFIVEWEEK,13,BETUNIT),
     *                             CMONY(TOTOFF,13,BETUNIT),
     *                             CMONY(TOTON,13,BETUNIT),
     *                             CMONY(TOTPRM,13,BETUNIT)

		WRITE(REPLUN,1160)
		WRITE(REPLUN,1165)
		WRITE(REPLUN,1166)

C
C READ CURRENT DRAW 
C
                CALL FIDX_READ(IDX_FDB,1,SIZEOF(REGAMTDRW),REGAMTDRW,ST)
                IF  (ST.NE.0) CALL FILERR(IFILNAM,READ_ERROR,ST,1)

		TOTONILIQ = REGAMTDRW.AMTDRWONL(1,GNUM) + REGAMTDRW.AMTDRWONL(2,GNUM)
		TOTOFILIQ = REGAMTDRW.AMTDRWOFF(1,GNUM) + REGAMTDRW.AMTDRWOFF(2,GNUM)

		TOTONCOM = IAND(REGAMTDRW.COMDRWONL(1,GNUM),'00000000FFFFFFFF'X) +
     *                     IAND(REGAMTDRW.COMDRWONL(2,GNUM),'00000000FFFFFFFF'X)

		TOTOFCOM = IAND(REGAMTDRW.COMDRWOFF(1,GNUM),'00000000FFFFFFFF'X) +
     *                     IAND(REGAMTDRW.COMDRWOFF(2,GNUM),'00000000FFFFFFFF'X)

		TOTONLIQ = TOTONILIQ - TOTONCOM
		TOTOFLIQ = TOTOFILIQ - TOTOFCOM

		WRITE(REPLUN,1170) CMONY(TOTONILIQ,12,BETUNIT),  ! ONLINE  ILIQUIDO
     *                             CMONY(TOTOFILIQ,12,BETUNIT),  ! OFFLINE ILIQUIDO
     *                             CMONY(TOTONCOM,10,BETUNIT),   ! COMISSAO ONLINE
     *                             CMONY(TOTOFCOM,10,BETUNIT),   ! COMISSAO OFFLINE
     *                             CMONY(TOTONLIQ,12,BETUNIT),   ! ONLINE LIQUIDO
     *                             CMONY(TOTOFLIQ,12,BETUNIT)    ! OFFLINE LIQUIDO

		DO INDDRW=3,6

                   TOTONILIQ = REGAMTDRW.AMTDRWONL(INDDRW,GNUM)
                   TOTOFILIQ = REGAMTDRW.AMTDRWOFF(INDDRW,GNUM) 

                   TOTONCOM = REGAMTDRW.COMDRWONL(INDDRW,GNUM)            
                   TOTOFCOM = REGAMTDRW.COMDRWOFF(INDDRW,GNUM)

                   TOTONLIQ = TOTONILIQ - TOTONCOM
                   TOTOFLIQ = TOTOFILIQ - TOTOFCOM

                   WRITE(REPLUN,1170) CMONY(TOTONILIQ,12,BETUNIT),  ! ONLINE  ILIQUIDO
     *                                CMONY(TOTOFILIQ,12,BETUNIT),  ! OFFLINE ILIQUIDO
     *                                CMONY(TOTONCOM,10,BETUNIT),   ! COMISSAO ONLINE
     *                                CMONY(TOTOFCOM,10,BETUNIT),   ! COMISSAO OFFLINE
     *                                CMONY(TOTONLIQ,12,BETUNIT),   ! ONLINE LIQUIDO
     *                                CMONY(TOTOFLIQ,12,BETUNIT)    ! OFFLINE LIQUIDO
		ENDDO
	    ENDIF
	ENDDO

	CALL FIDX_CLOSE(IDX_FDB,ST)
	IF  (ST.NE.0) CALL FILERR(IFILNAM,CLOSE_ERROR,ST,0)

	CLOSE (REPLUN)
	RETURN

100	FORMAT(/////,T37,'Jogo: ',4A4,'      Concurso: ',I3.3,'/',I4,/,
     *         T37,'Receita total do Concurso: ',T68,A13,/,
     *         T37,'Receita 5 semanas: ',T68,A13,/, 
     *         T37,'Receita do Offline: ',T68,A13,/,
     *         T37,'Receita do Online: ',T68,A13,//,
     *         T37,'Total de premios pagos Offline: ',T69,A13,////)

1160    FORMAT(T37,'------ RECEITA DE APOSTAS DO CONCURSO  -------',45X,/)
1165    FORMAT(T23,'------ ILIQUIDA -----      ---- COMISSAO -----        ------ LIQUIDA ------')
1166	FORMAT(T23,'ON-LINE       OFFLINE      ON-LINE     OFFLINE        ON-LINE       OFFLINE')
1170    FORMAT(T18,A12,T32,A12,T47,A10,T59,A10,T72,A12,T86,A12)

	END
