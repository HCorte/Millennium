C
C SUBROUTINE X2BLDFIL
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2BLDFIL.FOV                                 $
C  $Date::   17 Apr 1996 16:08:52                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - x2bldfil.for;1 **
C
C X2BLDFIL.FOR
C
C X2X Upgrade: 22-FEB-96 wsm Removed AGTINF.DEF (in ASFSUBS.DEF).
C
C V07 31-Jul-95 das Added call to x2cnvdrp
C V06 21-OCT-94 GPR SET THE FIRST BIT OF THE BITMAP NOT THE LAST - Integrate
C		    UK changes into X2X Baseline
C V05 03-FEB-94 GPR USE I5 FORMAT FOR STATION AND TERMINAL TYPE-OUTS
C V04 14-JAN-93 TD  CHANGED CALL TO UPDSTN TO X2BLD_UPDSTN TO AVOID DUPLICATE
C		    FILE CONFLICTS
C V03 09-APR-92 DAS USE STATION CLASS FIELD FROM ASF INSTEAD OF COMT 
C V02 22-JAN-92 DAS REFERENCE TERCNT BY STATION AND PORT
C V01 01-DEC-91 XXX RELEASED FOR VAX (NETHERLANDS)
C
C This subroutine will read the X2XBLD.FIL and the ASF, and
C will update the X2X Network Database by making entries into
C the X2XSTN.FIL, X2XTER.FIL, and the X2XSPC.FIL.
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2BLDFIL
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:ASFSUBS.DEF'
	INCLUDE 'INCLIB:X2XSTN.DEF'
	INCLUDE 'INCLIB:X2XTER.DEF'
	INCLUDE 'INCLIB:X2XSPC.DEF'
	INCLUDE 'INCLIB:X2XSCL.DEF'
	INCLUDE 'INCLIB:X2XBLD.DEF'
C
	INTEGER*2   DATBUF(12)      !Date buffer
	INTEGER*4   REC             !Record pointer
	INTEGER*4   SYSDATE(3)      !System date
	INTEGER*4   COMMTYP         !Station type (X21 OR X25)
        INTEGER*4   STNCLS          !STATION CLASS FROM ASF 
	INTEGER*4   TERCNT(X2X_STATIONS,X2X_MAXPORT) !Count of terminals
                                                     !by stn by port
	INTEGER*4   TERTBL(X2X_TERMS), XCOM_TYPE
C
        INTEGER*4   TMPSTN,TMPPRT
	INTEGER*4   EXSREC, DROP, J, PORT, SREC, STN, K, TER, ST, ANS
C
	CHARACTER   PROMPT*60       !Output prompt
	CHARACTER   NULL*60         !Null string
	CHARACTER   NULLEQV(60)*1   !Null string
	CHARACTER   X2FILNAM*20     !File name function
	CHARACTER   INTERUP*1       !Screen interrupt
	CHARACTER   ASFSTN*5        !Station number
	CHARACTER   ASFPRT*2        !Port number
	CHARACTER   C2DROP*2	    !Drop address
	LOGICAL     STNUPD          !Update station flag
	LOGICAL     PRTFLG          !Print errors flag
	LOGICAL     NEWSTN          !New station flag
C
	DATA        NULLEQV /60*Z00/
	EQUIVALENCE (NULL,NULLEQV)
	EQUIVALENCE (ASFSTN,ASFBYT(SXSTN))
	EQUIVALENCE (ASFPRT,ASFBYT(SXPRT))
C
C ASK WHETHER TO DISPLAY ERRORS TO PRINTER.
C
        ST=0                                       ! ELIMINATE FLINT WARNING
	PRTFLG=.FALSE.
	CALL CLRSCR(5)
	WRITE(5,9050)
	WRITE (PROMPT,9070)
	CALL WIMG(5,PROMPT)
	CALL YESNO(ANS)
	IF(ANS.EQ.1) THEN
	  PRTFLG=.TRUE.
          OPEN(6,FILE='X2BLDFIL.REP',STATUS='NEW',DISP='PRINT/DELETE')
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,'PR:','OPEN',ST,0)
	    CALL GPAUSE
	  ENDIF
	ENDIF
C
C CLEAR SCREEN AND DISPLAY TITLE.
C
	CALL CLRSCR(5)
	WRITE(5,9050)
C
C OPEN THE STATION FILE.
C
	CALL OPENX(2,X2FILNAM(XSTN),4,0,0,ST)
	CALL IOINIT(X2XSTN_FDB,2,X2XSTN_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSTN),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C OPEN THE TERMINAL FILE.
C
	CALL OPENX(3,X2FILNAM(XTER),4,0,0,ST)
	CALL IOINIT(X2XTER_FDB,3,X2XTER_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XTER),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C OPEN THE STATION PORT CONFIGURATION FILE.
C
	CALL OPENX2X(X2FILNAM(XSPC),4)
C
C OPEN THE STATION CLASS FILE.
C
	CALL OPENX(10,X2FILNAM(XSCL),4,0,0,ST)
	CALL IOINIT(X2XSCL_FDB,10,X2XSCL_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSCL),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C OPEN THE ASF FILE AND LOAD THE TERMINAL TABLE WITH
C THE ASSOCIATED STATION NUMBER.
C
	WRITE(5,9094)
	CALL OPENX(11,X2FILNAM(ASF),4,0,0,ST)
	IF(ST.NE.0)THEN
	  CALL OS32ER(5,X2FILNAM(ASF),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
	CALL IOINIT(FDB,11,ASFSEC*RECSPERBKT*256)
	BKTNUM=-1                   !FORCE A READ
	BKTCHG=0                    !NOTHING HAS BEEN CHANGED
C
	DO 50 TER=1,X2X_TERMS
	  CALL READASF(TER,ASFREC,ST)
	  STNCLS=CTOI(ASFBYT(SSCLS),K)
	  STN=CTOI(ASFSTN,K)
	  IF(STNCLS.NE.0) THEN
	    TERTBL(TER)=STN
	  ENDIF
50	CONTINUE
C
C DETERMINE THE CDC DATE FROM THE SYSTEM DATE.
C
	CALL XDAT(SYSDATE)
	DATBUF(VYEAR)=SYSDATE(1)
	DATBUF(VMON)=SYSDATE(2)
	DATBUF(VDAY)=SYSDATE(3)
	CALL BDATE(DATBUF)
C
C READ THE NEXT RECORD FROM THE BLD FILE.
C
	REC=0
100	CONTINUE
	REC=REC+1
	CALL READW(X2XBLD_FDB,REC,X2XBLD_REC,ST)
	IF(ST.EQ.144) GOTO 8000
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XBLD),'READW',ST,REC)
	  CALL GPAUSE
	ENDIF
	IF(X2XBLD_REC(1).LE.0) GOTO 100
C
C ================== STATION FILE UPDATE ==================
C
C READ THE STATION RECORD - IF IT DOES NOT EXIST, CREATE IT.
C
	CALL READW(X2XSTN_FDB,X2XBLD_STN,X2XSTN_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSTN),'READW',ST,X2XBLD_STN)
	  CALL GPAUSE
	ENDIF
C
C IF AN EXISTING STATION ASK THE USER WHETHER THEY WISH TO
C UPDATE WITH THE NEW INPUT STATION PARAMETERS.
C
	STNUPD=.TRUE.
	NEWSTN=.TRUE.
	IF(X2XSTN_REC(1).GT.0) THEN
	  PROMPT=NULL
	  WRITE (PROMPT,9000) X2XBLD_STN
	  CALL WIMG(5,PROMPT)
	  CALL YESNO(ANS)
	  IF(ANS.EQ.3) GOTO 100
	  IF(ANS.NE.1) STNUPD=.FALSE.
	  NEWSTN=.FALSE.
	ELSE
	  CALL FASTSET(0,X2XSTN_REC,X2XSTN_SECT/64)
	ENDIF
C
C READ THE STATION CLASS RECORD TO OBTAIN THE DEFAULT VALUES.
C IF CLASS DOES NOT EXIST, DISPLAY A WARNING AND SKIP THE RECORD.
C
	IF(STNUPD) THEN
	  CALL READW(X2XSCL_FDB,X2XBLD_STNCLS,X2XSCL_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XSCL),'READW',ST,X2XBLD_STNCLS)
	    CALL GPAUSE
	  ENDIF
	  IF(X2XSCL_REC(1).LE.0) THEN
	    WRITE(5,9030) X2XBLD_STN, X2XBLD_STNCLS, CHAR(7)
	    IF(PRTFLG) WRITE(6,9030)  X2XBLD_STN,
     *	               X2XBLD_STNCLS, CHAR(7)
	    GOTO 100
	  ENDIF
	  CALL X2BLD_UPDSTN
	  IF(NEWSTN) THEN
	    X2XSTN_BITMAP  = 1						    !V06
	    X2XSTN_BITMAP2 = 0
            X2XSTN_BITMAP3 = 0
            X2XSTN_BITMAP4 = 0
	  ENDIF
C
C REWRITE THE STATION RECORD.
C
	  CALL WRITEW(X2XSTN_FDB,X2XBLD_STN,X2XSTN_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XSPC),'WRITEW',ST,SREC)
	    CALL GPAUSE
	  ENDIF
C
C DISPLAY MESSAGE INFORMING OF UPDATE.
C
	  IF(NEWSTN) THEN
	    WRITE(5,9010) X2XBLD_STN
	    IF(PRTFLG) WRITE(6,9010) X2XBLD_STN
	  ELSE
	    WRITE(5,9012) X2XBLD_STN
	    IF(PRTFLG) WRITE(6,9012) X2XBLD_STN
	  ENDIF
	ENDIF
C
C ================== TERMINAL FILE UPDATE ==================
C
C LOOP THROUGH THE ASF SEARCHING FOR ALL TERMINALS FOR THIS STATION.
C
        DO 10 TMPSTN = 1,X2X_STATIONS
           DO 5 TMPPRT = 1,X2X_MAXPORT
	     TERCNT(TMPSTN,TMPPRT)=0
5          CONTINUE
10      CONTINUE
C
	DO 200 TER=1,X2X_TERMS
C
C CHECK IF THIS TERMINAL BELONG TO THIS STATION.
C
	  IF(TERTBL(TER).NE.X2XBLD_STN) GOTO 200
C
C READ THE NEXT TERMINAL FROM THE ASF.
C
	  CALL READASF(TER,ASFREC,ST)
	  IF(ST.NE.0)THEN
	    CALL OS32ER(5,X2FILNAM(ASF),'READW',ST,0)
	    CALL GPAUSE
	  ENDIF
C
C CHECK IF THIS TERMINAL IS FOR THIS STATION. IF IT
C IS NOT, SKIP IT.
C
	  STN=CTOI(ASFSTN,K)
	  IF(STN.NE.X2XBLD_STN) GOTO 200
          PORT=CTOI(ASFPRT,K)
	  TERCNT(STN,PORT)=TERCNT(STN,PORT)+1
C
C READ THE TERMINAL RECORD.
C
	  CALL READW(X2XTER_FDB,TER,X2XTER_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XTER),'READW',ST,TER)
	    CALL GPAUSE
	  ENDIF
C
C CHECK THE COMMUNICATION TYPE, AND IF NOT X21 OR X25 SKIP
C THE RECORD.
C
	  COMMTYP=X2XSCL_TYPE
	  IF(COMMTYP.EQ.0) THEN
	    WRITE(5,9040) X2XBLD_STN, TER
	    IF(PRTFLG) WRITE(6,9040) X2XBLD_STN, TER
	    GOTO 200
	  ENDIF
C
C IF COMM TYPE IS X.25 AND MORE THAN ONE TERMINAL EXISTS,
C SKIP THE ADDITIONAL TERMINALS.
C
     	  IF(COMMTYP.EQ.2 .AND. TERCNT(STN,PORT).GT.X2X_MAXTERMS) THEN
      	    WRITE(5,9092) X2XBLD_STN, TER
    	    IF(PRTFLG) WRITE(6,9092) X2XBLD_STN, TER
    	    GOTO 200
    	  ENDIF
C
C VERIFY THE TERMINAL HAS THE CORRECT COMMUNICATION TYPE.
C
         IF(STNUPD) THEN
           XCOM_TYPE = X2XSCL_TYPE
         ELSE
           XCOM_TYPE = X2XSTN_TYPE
         ENDIF
C
         IF(COMMTYP.NE.XCOM_TYPE) THEN
           WRITE(5,9090) X2XBLD_STN, TER, COMMTYP
	   IF(PRTFLG) WRITE(6,9090) X2XBLD_STN, TER, COMMTYP
	   GOTO 200
         ENDIF
C
	  CALL FASTSET(0,X2XTER_REC,X2XTER_SECT*64)
	  X2XTER_BITMAP=1						    !V06
	  X2XTER_BITMAP2=0
          X2XTER_BITMAP3=0
          X2XTER_BITMAP4=0
C
C UPDATE THE TERMINAL FILE.
C
	  C2DROP=ASFBYT(SDROP)//ASFBYT(SDROP+1)
          CALL X2CNVDRP(C2DROP, DROP)         !....v07
	  X2XTER_TER=TER
	  X2XTER_STN=X2XBLD_STN
	  X2XTER_PORT=PORT
	  X2XTER_DROP=C2DROP
	  X2XTER_STATE=X2XTS_DISABLED
	  X2XTER_UPDATE=DATBUF(VCDC)
C
C  STRIP NULLS FROM DROP
C
	  IF(X2XTER_DROP(1:1).LE.' ') X2XTER_DROP(1:1)=' '
	  IF(X2XTER_DROP(2:2).LE.' ') X2XTER_DROP(2:2)=' '
C
C REWRITE THE TERMINAL RECORD.
C
	  CALL WRITEW(X2XTER_FDB,TER,X2XTER_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XTER),'READW',ST,TER)
	    CALL GPAUSE
	  ENDIF
C
C ================== STATION PORT UPDATE ==================
C
	  CALL X2FNDSPC(X2XBLD_STN,PORT,ST,SREC,EXSREC)
C
C IF STATION PORT DOES NOT EXIST, CREATE IT.
C
	  IF(ST.NE.-1) THEN
	    CALL FASTSET(0,X2XSPC_REC,X2XSPC_SECT*64)
	    X2XSPC_STN=X2XBLD_STN
	    X2XSPC_PORT=PORT
	    X2XSPC_TERCNT=TERCNT(X2XBLD_STN,PORT)
	    X2XSPC_BITMAP=1						    !V06
	    X2XSPC_BITMAP2=0
            X2XSPC_BITMAP3=0
            X2XSPC_BITMAP4=0
	  ELSE
	    DO 230 J=1,X2XSPC_ENTRIES
	      CALL BSET(X2XSPC_BITMAP,J)
230	    CONTINUE
	    SREC=EXSREC
	  ENDIF
C
C UPDATE THE STATION PORT RECORD.
C
	  IF(DROP.GE.1 .AND. DROP.LE.X2X_MAXTERMS) THEN
	    X2XSPC_TERCNT=TERCNT(X2XBLD_STN,PORT)
	    X2XSPC_DROPS(DROP)=ASFBYT(SDROP)//ASFBYT(SDROP+1)
	  ELSE
	    WRITE(5,9020) X2XBLD_STN, TER
	    GOTO 200
	  ENDIF
	  X2XSPC_UPDATE=DATBUF(VCDC)
C
C STRIP OUT ANY NULLS FROM THE DROP TABLE.
C
	  DO 210 DROP=1,X2X_MAXTERMS
	    IF(X2XSPC_DROPS(DROP)(1:1).LE.' ') X2XSPC_DROPS(DROP)(1:1)=' '
	    IF(X2XSPC_DROPS(DROP)(2:2).LE.' ') X2XSPC_DROPS(DROP)(2:2)=' '
210	  CONTINUE
C
C REWRITE THE STATION PORT RECORD.
C
	  CALL WRITX2X(4,SREC,X2XSPC_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XSPC),'WRITEW',ST,SREC)
	    CALL GPAUSE
	  ENDIF
	  WRITE(5,9060) X2XSPC_STN, X2XSPC_PORT, TER,
     *                  ASFBYT(SDROP), ASFBYT(SDROP+1)
	  IF(PRTFLG) WRITE(6,9060) X2XSPC_STN, X2XSPC_PORT,
     *	                           TER,        ASFBYT(SDROP),
     *                             ASFBYT(SDROP+1)
C
200	CONTINUE
C
C MARK THE STATION AS DELETED AND PROCESS THE NEXT
C RECORD IN THE X2XBLD.FIL
C
	X2XBLD_REC(1)=0
	CALL WRITEW(X2XBLD_FDB,REC,X2XBLD_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XBLD),'WRITEW',ST,REC)
	  CALL GPAUSE
	ENDIF
	GOTO 100
C
C PROGRAM EXIT.
C
8000	CONTINUE
	PROMPT=NULL
	WRITE (PROMPT,9080)
	CALL WIMG(5,PROMPT)
	READ(5,'(1A)') INTERUP
C
C CLOSE ALL FILES.
C
	CALL CLOSX2X(4)
	CALL CLOSEFIL(X2XSTN_FDB)
	CALL CLOSEFIL(X2XTER_FDB)
	CALL CLOSEFIL(X2XSCL_FDB)
	CALL CLOSASF
	CALL USRCLOS1(6)
	CALL X2CHKMOD(XBLD,0)
	RETURN
C
C     ===================== Format Statements ======================
C
9000	FORMAT(1X,'Station ',I5,' already exists - update it [Y/N/E] ')	! V05
9005	FORMAT(1X,'Terminal ',I5,' already exists - update it [Y/N] ')	! V05
9010	FORMAT(1X,'Station ',I5,' has been created ')			! V05
9012	FORMAT(1X,'Station ',I5,' has been updated ')			! V05
9020	FORMAT(1X,'Station ',I5,' Ter ',I5,'- bad drop /rec skipped')	! V05
9030	FORMAT(1X,'Station ',I5,' Unknown station class ',I4,A)		! V05
9040	FORMAT(1X,'Station ',I5,' Ter ',I5,' not X2X com type in ASF')	! V05
9050	FORMAT(//,T26,'GTECH Distributed Network',/,
     *	          T28,'Auto Build Database',//)
9060	FORMAT(1X,'Station ',I5,' Port ',I2,' Ter ',I5,' Drop ',2A,
     *	          ' has been added')					! V05
9070	FORMAT(15(' '),'Display errors to the printer [Y/N]  ')
9080	FORMAT(15(' '),'    Press RETURN to continue         ')
9090	FORMAT(1X,'Station ',I5,' Ter ',I5,' invalid comm type ',I2)	! V05
9092	FORMAT(1X,'Station ',I5,' Ter ',I5,' exceeded terminals ',
     *	          'for X.25 - skipped ',I2)				! V05
9094	FORMAT(1X,'Building Terminal lookup - please wait .....')
	END
