C
C V01 03-MAY-1999 UXN INITIAL RELEASE.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW/EXTEND
        PROGRAM CNVTRP_POOL
        IMPLICIT NONE
C
	INCLUDE '(LIB$ROUTINES)'
	INCLUDE '($RMSDEF)'
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:TROCOM.DEF'
        INCLUDE 'INCLIB:TRFREC.DEF'
        INCLUDE 'INCLIB:TRFREC_OLD.DEF'
C
C
        INTEGER*4   DRAW, LEN, I4LEN, LASTDR, EXT
        INTEGER*4   ST, I, J, K, AGT, OLD_FDB(7), FDB(7)
        CHARACTER*20 CXNAME,CXNAME2
        INTEGER*4    I4NAME(5),I4NAME2(5),YESNO
        EQUIVALENCE  (I4NAME,CXNAME)
        EQUIVALENCE  (I4NAME2,CXNAME2)
	INTEGER*4   POOL_FILE(NUMTRP)/NUMTRP*0/
	INTEGER*4   PF_NAME(5,NUMTRP)
	LOGICAL     FLAG
C
	CHARACTER*4 EXTENSION(2,2) /'.FIL','.OLD','.NEW','.FIL'/	
        INTEGER*4   MAXREC_CNV   ! # of records to convert
C
        INTEGER*4   FILE_SIZE           ! NEW FILE SIZE
	INTEGER*4   MAXPOOL
	PARAMETER  (MAXPOOL=200)
        CHARACTER*20 NEW_FILE(MAXPOOL),OLD_FILE(MAXPOOL),FIL_FILE(MAXPOOL)
        INTEGER*4    I4NEW_FILE(5,MAXPOOL),I4OLD_FILE(5,MAXPOOL)
	INTEGER*4    I4FIL_FILE(5,MAXPOOL)
        EQUIVALENCE (NEW_FILE,I4NEW_FILE)
        EQUIVALENCE (OLD_FILE,I4OLD_FILE)
        EQUIVALENCE (FIL_FILE,I4FIL_FILE)
        INTEGER*4   SIZE,CNT,POS
	CHARACTER*255 SEARCH,RESULT
	INTEGER*4   CONTEXT
C
        CALL COPYRITE
C
	TYPE*,IAM(),'Searching Todays Trio pool files for conversion...'
C
	SEARCH = 'FILE:TR%P%%%%.FIL'
	CNT = 0
10	CONTINUE
C
	ST = LIB$FIND_FILE(SEARCH,RESULT,CONTEXT)
	IF(ST.EQ.RMS$_NORMAL) THEN
	    CNT = CNT + 1
	    FIL_FILE(CNT) = 'FILE:'
	    FIL_FILE(CNT)(6:) = RESULT(INDEX(RESULT,']')+1:INDEX(RESULT,';')-1)
	    POS = INDEX(FIL_FILE(CNT),'.')
	    CALL STR$REPLACE(NEW_FILE(CNT),FIL_FILE(CNT),POS,POS+4,'.NEW')
	    CALL STR$REPLACE(OLD_FILE(CNT),FIL_FILE(CNT),POS,POS+4,'.OLD')
	    GOTO 10
	ENDIF
	IF(CNT.EQ.0) THEN
	    TYPE*,IAM(),'Nothing to convert!'
	    CALL GSTOP(GEXIT_SUCCESS)
	ENDIF
C
        MAXREC_CNV = 1
        FILE_SIZE  = MAXREC_CNV*TRFSEC/2
        TYPE*,IAM(),'Old file size = ', MAXREC_CNV*OTRFSEC/2
        TYPE*,IAM(),'New file size = ', MAXREC_CNV*TRFSEC/2
        TYPE*,IAM()
        TYPE*,IAM(),'Number of records    to convert >',MAXREC_CNV
        TYPE*,IAM()
        TYPE*,IAM(),'Number of pool files to convert >',CNT
        TYPE*,IAM()
        CALL INPYESNO('Are you sure you want to convert TRIO pool files ',YESNO)
        IF(YESNO.NE.1) CALL GSTOP(GEXIT_OPABORT)
C
	DO I=1,CNT
           CALL NEWFIL(1,NEW_FILE(I),FILE_SIZE,.FALSE.,ST)
           IF(ST.NE.0) CALL GSTOP(GEXIT_FATAL)
	ENDDO
C
C Convert all pool files.
C
	DO I=1,CNT
	   CALL CONVERT(I4FIL_FILE(1,I),I4NEW_FILE(1,I))
	ENDDO
C
C Rename *.FIL to *.OLD and *.NEW to *.FIL
C
	DO I=1,CNT
	   WRITE(6,910) IAM(),FIL_FILE(I),OLD_FILE(I)
           CALL LIB$RENAME_FILE(FIL_FILE(I),OLD_FILE(I))
	   WRITE(6,910) IAM(),NEW_FILE(I),FIL_FILE(I)
           CALL LIB$RENAME_FILE(NEW_FILE(I),FIL_FILE(I))
	ENDDO
	TYPE*,IAM(),'TRIO pool files converted succesfully!'
        CALL GSTOP(GEXIT_SUCCESS)
C
900     FORMAT('FILE:TR',I1,'F',A4,T20)
901     FORMAT('FILE:TRV',I1,'F',A4,T20)
910	FORMAT(1X,A,'Renaming ',A,' to ',A)
	END
C
C SUBROUTINE TO CONVERT GAME FILES...
C	   
	SUBROUTINE  CONVERT(INP_FILE,OUT_FILE)
	IMPLICIT NONE
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:TROCOM.DEF'
        INCLUDE 'INCLIB:TRFREC.DEF'
        INCLUDE 'INCLIB:TRFREC_OLD.DEF'
C
	INTEGER*4    INP_FILE(5),OUT_FILE(5)
	INTEGER*4    ST,K,I, REC
	INTEGER*4    INP_FDB(7)
	INTEGER*4    OUT_FDB(7)
	INTEGER*4    UCID,PREV,NEXT
	INTEGER*4    TMP
C
	WRITE(6,900) IAM(),(INP_FILE(K),K=1,5)
900	FORMAT(1X,A,'Starting to convert ',5A4)
C
C OPEN INPUT FILE
C
        CALL OPENQW(3,INP_FILE,0,0,0,ST)
        CALL IOQINIT(INP_FDB,3,OTRFSEC*256)
        IF(ST.NE.0) CALL FILERR(INP_FILE,1,ST,0)
C
C OPEN OUTPUT FILE
C	
        CALL OPENQW(4,OUT_FILE,0,0,0,ST)
        CALL IOQINIT(OUT_FDB,4,TRFSEC*256)
        IF(ST.NE.0) CALL FILERR(OUT_FILE,1,ST,0)
C
C FILE CONVERSION
C
	CALL READQW(INP_FDB,1,OTRFREC,ST)
	IF(ST.NE.0) CALL FILERR(INP_FILE,2,ST,1)
C
	CALL FASTSET(0,TRFREC,TRFLEN)
	DO I=1,TRGPOL_OLD
	   CALL GET_UCID(I,UCID)
	   TMP = OTRFODDS2(TRGPEL,I)
	   CALL GET_UCID(TMP,PREV)
	   TMP = OTRFODDS2(TRGNEL,I)
	   CALL GET_UCID(TMP,NEXT)
	   TRFODDS(TRGAMT,UCID)  = OTRFODDS(TRGAMT,I)	   
           TRFODDS2(TRGPEL,UCID) = PREV
           TRFODDS2(TRGNEL,UCID) = NEXT
C
	   TRFLAMT = OTRFLAMT
	   CALL GET_UCID(OTRFFEL,UCID)
	   TRFFEL  = UCID
	   CALL GET_UCID(OTRFLEL,UCID)
	   TRFLEL  = UCID
	   TRFTNUM = OTRFTNUM	   
	ENDDO
C
	CALL WRITEQW(OUT_FDB,1,TRFREC,ST)
	IF(ST.NE.0) CALL FILERR(OUT_FILE,3,ST,1)
C
	CALL CLOSEQFIL(INP_FDB)
	CALL CLOSEQFIL(OUT_FDB)
	TYPE*,IAM(),'Done.'
	END
C
C
C
	SUBROUTINE GET_UCID(INP,OUT)
	IMPLICIT NONE
C
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:TROCOM.DEF'
        INCLUDE 'INCLIB:TRFREC.DEF'
        INCLUDE 'INCLIB:TRFREC_OLD.DEF'
	INTEGER*4 INP,OUT
	INTEGER*4 E1,E2,E3
	INTEGER*4 MAXRW
	INTEGER*4 MAXRW2
	PARAMETER (MAXRW=MAXTRPRW_OLD)
	PARAMETER (MAXRW2=MAXRW*MAXRW)
C
	E3  = INP/MAXRW2
	E2  = (INP-E3*MAXRW2)/MAXRW
	E1  = INP-E2*MAXRW-E3*MAXRW2
	OUT = E1+E2*MAXTRPRW+E3*MAXTRPRW*MAXTRPRW
C
	END	
