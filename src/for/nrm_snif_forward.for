C
C PROGRAM NRM_SNIF
C $Log:   GXAFXT:[GOLS]SNIF_FORWARD.FOV  $
C  
C     Rev 1.0   17 Apr 1996 15:10:40   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C  
C     Rev 1.0   21 Jan 1993 17:39:36   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - nrm_snif.for **
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C INTEGER*4 FUNCTION 
C SNIF_FORWARD(LOW_ADDR, SIZE, PAGES_DONE, LOCK_FLAG)
C
C THIS ROUTINE SNIFS PAGES OF MEMORY FORWARD IN THE SPECIFIED ADDRESS RANGE
C THE CALLER SHOULD USE %VAL TO POINT THE ABSOLUTE MEMORY ADDRESS
C
C-----------------------------------------------------------------------
C
C=======OPTIONS /CHECK=NOOVERFLOW
	INTEGER*4 FUNCTION SNIF_FORWARD(LOW_ADDR,SIZE,PAGES_DONE,LOCK_FLAG)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INTEGER*4   LOW_ADDR
	INTEGER*4   SIZE
	INTEGER*4   PAGES_DONE
	INTEGER*4   LOCK_FLAG
C
	INTEGER*4   I
C
	INTEGER*4   ACCVIO_SIGNAL
	EXTERNAL    ACCVIO_SIGNAL
C
C Establish 'ACCVIO_SIGNAL' as the condition handler as follows:
C
	CALL LIB$ESTABLISH( ACCVIO_SIGNAL )
C
	PAGES_DONE = 0
C
	DO 100, I=1,SIZE,512
	    LOW_ADDR = LOW_ADDR+512
C
C	    TOUCHING THE PAGE HAS TO BE THROUGH ROUTINE -
C	    OTHERWISE THE COMPILER MAY OPTIMIZE THE CODE AND NOT TO COMPILE
C	    THE PAGE-TOUCHING CODE AT ALL.
C	    CALL 'SNIF_VALUE' AS A SUBROUTINE WHILE IT HAS TO BE IMPLEMENTED
C	    AS A FUNCTION (TO AVOID COMPILER CODE ELIMINATION).
C
	    CALL SNIF_VALUE(%VAL(LOW_ADDR))
	    IF (LOCK_FLAG .NE. 0) THEN
		CALL LKPMEM(%VAL(LOW_ADDR),%VAL(LOW_ADDR))
	    ENDIF
	    PAGES_DONE = PAGES_DONE + 1
100	CONTINUE
C
	SNIF_FORWARD = 0
C
	RETURN
	END
