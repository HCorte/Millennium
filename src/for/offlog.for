C
C SUBROUTINE OFFLOG
C $Log:   GXAFXT:[GOLS]OFFLOG.FOV  $
C  
C     Rev 1.0   17 Apr 1996 14:16:46   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C  
C     Rev 1.0   21 Jan 1993 17:11:28   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - offlog.for **
C
C OFFLOG.FOR
C
C V03 10-FEB-92 GCAN REMOVED CHECKS IN WLOG FOR FITTING TRANS IN BLOCK.
C		     ALSO ADDED PARAMETER LIST TO OFFLOG. (ENTRY POINTS)
C V02 26-MAR-91 TKO  GET RID OF LIST IN SUBROUTINE OFFLOG
C V01 01-AUG-90 XXX  RELEASED FOR VAX
C
C V01 01-FEB-89 XXX INITIAL RELEASE FOR SWEDEN
C
C     OFFLOG.FTN
C     OFFLINE TMF LOGGING ROUTINES
C     TMF HAS TO BE PREVIOUSLY ASSIGNED TO LOGICAL UNIT
C
C     TOPEN(UNIT) - OPEN TMF ON UNIT
C     RLOG(SERIAL,LBUF,DUMMY,STATUS)
C     WLOG(SERIAL,LBUF,DUMMY)
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE OFFLOG(SERIAL,LBUF,DUMMY,STS,UNIT)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:PRMLOG.DEF'
	INCLUDE 'INCLIB:DESLOG.DEF'
C
C
	INTEGER*4 LENGTH, CNT, RTYPE, OFFSET, INDEX, BLOCK, STS
	INTEGER*4 LSTBLK, UNIT, STATUS , DUMMY, SERIAL
	INTEGER*4 FCB(7),LBUF(LREC*3),IOBUF(DBLOCK)
	DATA LSTBLK/0/
C
C
C *** TOPEN ***
C
	ENTRY TOPEN(UNIT)
C
	CALL IOINIT(FCB,UNIT,DBLOCK/64*256)
	RETURN
C
C
C *** RLOG ***
C
	ENTRY RLOG(SERIAL,LBUF,DUMMY,STS)
C
	CALL GETBI(SERIAL,BLOCK,INDEX,OFFSET)
	STS=0
	IF(LSTBLK.NE.BLOCK) THEN
	  CALL READW(FCB,BLOCK,IOBUF,STATUS)
	  IF(STATUS.NE.0) THEN
	    LSTBLK=-1
	    STS=-1
	    RETURN
	  ENDIF
	  LSTBLK=BLOCK
	ENDIF
C
C CHECK RECORD TYPE
C
C***	RTYPE=IAND(IOBUF(OFFSET+LREC-1),7)
	CALL ILBYTE(RTYPE,IOBUF(OFFSET),LREC1-1)
	IF(RTYPE.GT.LONE) THEN
	  STS=1
	  RETURN
	ENDIF
C
C
	CNT=1
	IF(RTYPE.EQ.LONE) THEN
C***	  RTYPE=IAND(IOBUF(OFFSET+LREC*2-1),7)
	  CALL ILBYTE(RTYPE,IOBUF(OFFSET),LREC2-1)
	  IF(RTYPE.EQ.LTWO) CNT=3
	  IF(RTYPE.EQ.LEND) CNT=2
	ENDIF
	LENGTH=CNT*LREC
C
	CALL FASTMOV(IOBUF(OFFSET),LBUF,LENGTH)
	IF(LENGTH.LT.LREC*3)
     *	  CALL FASTSET(0,LBUF(LENGTH+1),LREC*3-LENGTH)
	RETURN
C
C
C *** WLOG ***
C
	ENTRY WLOG(SERIAL,LBUF,DUMMY)
C
	CALL GETBI(SERIAL,BLOCK,INDEX,OFFSET)
	IF(LSTBLK.NE.BLOCK) THEN
	  CALL READW(FCB,BLOCK,IOBUF,STATUS)
	  IF(STATUS.NE.0) THEN
	    WRITE(5,900) SERIAL,STATUS
	    CALL BELLS(2)
	    CALL GPAUSE
	    RETURN
	  ENDIF
	  LSTBLK=BLOCK
	ENDIF
C
C GET RECORD LENGTH
C
	CNT=1
C***	RTYPE=IAND(LBUF(LREC),7)
	CALL ILBYTE(RTYPE,LBUF,LREC1-1)	
	IF(RTYPE.EQ.LONE) THEN
C***	  RTYPE=IAND(LBUF(LREC*2),7)
	  CALL ILBYTE(RTYPE,LBUF,LREC2-1)
	  IF(RTYPE.EQ.LTWO) CNT=3
	  IF(RTYPE.EQ.LEND) CNT=2
	ENDIF
	LENGTH=CNT*LREC
C
C***	IF(CNT.EQ.3.AND.INDEX.GT.LBLK-2) THEN
C***	  WRITE(5,901) SERIAL
C***	  CALL BELLS(2)
C***	  CALL GPAUSE
C***	  RETURN
C***	ENDIF
C***	IF(CNT.EQ.2.AND.INDEX.GT.LBLK-1) THEN
C***	  WRITE(5,901) SERIAL
C***	  CALL BELLS(2)
C***	  CALL GPAUSE
C***	  RETURN
C***	ENDIF
C
C
	CALL FASTMOV(LBUF,IOBUF(OFFSET),LENGTH)
	CALL WRITEW(FCB,BLOCK,IOBUF,STATUS)
	IF(STATUS.NE.0) THEN
	  WRITE(5,900) SERIAL,STATUS
	  CALL BELLS(2)
	  CALL GPAUSE
	  RETURN
	ENDIF
	RETURN
C
C
900	FORMAT('   TMF FILE I/O ERROR SERIAL - ',I8,' STATUS - ',Z8)
901	FORMAT('   TMF FILE BAD INDEX FOR SERIAL ',I8)
	END
