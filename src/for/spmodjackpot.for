C SPMODJACKPOT.FOR
C
C V02 27-SEP-2004 FRP Allow pool transfer between different winning divisions.
C V01 22-JUL-2004 FRP Initial revision.
C
C PROGRAM TO MODIFY "DSPPOL" VALUE (POOL CARRIED OVER)
C FROM A TOTOBOLA GAME TO ANOTHER TOTOBOLA GAME
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM SPMODJACKPOT
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:RECSCF.DEF'
	INCLUDE 'INCLIB:DSPREC.DEF'
C
	INTEGER*4 FLAG,ST,DIV,AMT_TAKE
	INTEGER*4 GNUM_FROM,GTYP_FROM,GIND_FROM,DIV_FROM
	INTEGER*4 DRAW_FROM,AMT_FROM(SPGDIV),FDB_FROM(7)
	INTEGER*4 GNUM_TO,GTYP_TO,GIND_TO,DIV_TO
	INTEGER*4 DRAW_TO,AMT_TO(SPGDIV),FDB_TO(7)
C
	INTEGER*4 DSPREC_FROM(DSPLEN)
	INTEGER*4 DSPPOL_FROM(SPGDIV)
	INTEGER*4 DSPDIV_FROM
	INTEGER*4 DSPMAT_FROM(SPGDIV)
	INTEGER*4 DSPRGT_FROM(2)
	EQUIVALENCE(DSPPOL_FROM,DSPREC_FROM(DSPPOL_OFF))
	EQUIVALENCE(DSPDIV_FROM,DSPREC_FROM(DSPDIV_OFF))
	EQUIVALENCE(DSPMAT_FROM,DSPREC_FROM(DSPMAT_OFF))
	EQUIVALENCE(DSPRGT_FROM,DSPREC_FROM(DSPRGT_OFF))
C
	INTEGER*4 DSPREC_TO(DSPLEN)
	INTEGER*4 DSPPOL_TO(SPGDIV)
	INTEGER*4 DSPDIV_TO
	INTEGER*4 DSPMAT_TO(SPGDIV)
	INTEGER*4 DSPROD_TO(2)
	EQUIVALENCE(DSPPOL_TO,DSPREC_TO(DSPPOL_OFF))
	EQUIVALENCE(DSPDIV_TO,DSPREC_TO(DSPDIV_OFF))
	EQUIVALENCE(DSPMAT_TO,DSPREC_TO(DSPMAT_OFF))
	EQUIVALENCE(DSPROD_TO,DSPREC_TO(DSPROD_OFF))
C
C START
C
	CALL COPYRITE
C
	TYPE*, IAM()
	TYPE*, IAM(),'This program allows to transfer rollover amounts'
	TYPE*, IAM(),'from a Totobola game to another Totobola game.'
C
	TYPE*, IAM()
	CALL PRMYESNO('Are you sure you want to continue [Y/N]? ',FLAG)
	IF(FLAG.NE.1) CALL GSTOP(GEXIT_OPABORT)
C
C READ SCF
C
	CALL GETSCONF(SCFREC,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
C ASK GAME NUMBER FROM WHERE TO TAKE ROLLOVER AMOUNTS
C
10	CONTINUE
	TYPE*, IAM()
	CALL INPNUM('Enter game number to take rollovers FROM: ',
     *              GNUM_FROM,1,MAXGAM,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	GTYP_FROM=SCFGNT(GAMTYP,GNUM_FROM)
	IF(GTYP_FROM.NE.TSPT) THEN
	  TYPE*, IAM()
	  TYPE*, IAM(),'Sorry, this is not a Totobola game'
	  CALL XWAIT(2,2,ST)
	  GOTO 10
	ENDIF
	GIND_FROM=SCFGNT(GAMIDX,GNUM_FROM)
C
C OPEN TOTOBOLA GAME FILE FROM WHERE TO TAKE ROLLOVER AMOUNTS
C
        CALL OPENW(3,SCFGFN(1,GNUM_FROM),4,0,0,ST)
        CALL IOINIT(FDB_FROM,3,DSPSEC*256)
        IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_FROM),1,ST,0)
C
C ASK DRAW NUMBER FROM WHERE TO TAKE ROLLOVER AMOUNTS
C
	TYPE*, IAM()
	CALL INPNUM('Enter draw number to take rollovers FROM: ',
     *              DRAW_FROM,1,10000,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
C READ TOTOBOLA GAME FILE FROM WHERE TO TAKE ROLLOVER AMOUNTS
C
	CALL READW(FDB_FROM,DRAW_FROM,DSPREC_FROM,ST)
	IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_FROM),2,ST,DRAW_FROM)
C
C ASK GAME NUMBER WHERE TO ADD ROLLOVER AMOUNTS
C
20	CONTINUE
	TYPE*, IAM()
	CALL INPNUM('Enter game number to add rollovers TO: ',
     *              GNUM_TO,1,MAXGAM,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	GTYP_TO=SCFGNT(GAMTYP,GNUM_TO)
	IF(GTYP_TO.NE.TSPT) THEN
	  TYPE*, IAM()
	  TYPE*, IAM(),'Sorry, this is not a Totobola game'
	  CALL XWAIT(2,2,ST)
	  GOTO 20
	ENDIF
	GIND_TO=SCFGNT(GAMIDX,GNUM_TO)
C
C OPEN TOTOBOLA GAME FILE WHERE TO ADD ROLLOVER AMOUNTS
C
        CALL OPENW(4,SCFGFN(1,GNUM_TO),4,0,0,ST)
        CALL IOINIT(FDB_TO,4,DSPSEC*256)
        IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_TO),1,ST,0)
C
C ASK DRAW NUMBER WHERE TO ADD ROLLOVER AMOUNTS
C
	TYPE*, IAM()
	CALL INPNUM('Enter draw number to add rollovers TO: ',
     *              DRAW_TO,1,10000,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
C READ TOTOBOLA GAME FILE WHERE TO ADD ROLLOVER AMOUNTS
C
	CALL READW(FDB_TO,DRAW_TO,DSPREC_TO,ST)
	IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_TO),2,ST,DRAW_TO)
C
C CHECK IF NUMBER OF WINNING DIVISIONS ARE EQUAL
C
	IF(DSPDIV_FROM.NE.DSPDIV_TO) THEN
	  TYPE*, IAM()
	  TYPE*, IAM(),'Sorry, number of winning divisions are different'
	  CALL XWAIT(2,2,ST)
	  CALL CLOSEFIL(FDB_FROM)
	  CALL CLOSEFIL(FDB_TO)
	  GOTO 10
	ENDIF
C
C CHECK IF DIVISION MATCH TABLES ARE EQUAL
C
	DO DIV=1,DSPDIV_FROM
	  IF(DSPMAT_FROM(DIV).NE.DSPMAT_TO(DIV)) THEN
	    TYPE*, IAM()
	    TYPE*, IAM(),'Sorry, division match tables are different'
	    CALL XWAIT(2,2,ST)
	    CALL CLOSEFIL(FDB_FROM)
	    CALL CLOSEFIL(FDB_TO)
	    GOTO 10
	  ENDIF
	ENDDO
C
C DISPLAY CURRENT ROLLOVER AMOUNTS
C
	TYPE*, IAM()
	TYPE*, IAM(),'Current Rollover Amounts:'
	TYPE*, IAM()
	TYPE*, IAM(),'Division     Rollover_FROM             Rollover_TO'
	TYPE*, IAM(),'--------------------------------------------------'
	TYPE*, IAM()
C
	DO DIV=1,DSPDIV_FROM
	  WRITE(6,104) IAM(),
     *                 DIV,
     *                 CMONY(DSPPOL_FROM(DIV),14,BETUNIT),
     *                 CMONY(DSPPOL_TO(DIV),14,BETUNIT)
	ENDDO
C
C UPDATE INITIAL WITH CURRENT ROLLOVER AMOUNTS
C
	DO DIV=1,DSPDIV_FROM
	  AMT_FROM(DIV)=DSPPOL_FROM(DIV)
	  AMT_TO(DIV)=DSPPOL_TO(DIV)
	ENDDO
C
C ASK FOR DIVISION AND AMOUNT TO TRANSFER
C
30	CONTINUE
	TYPE*, IAM()
	CALL INPNUM('Enter division to take from Rollover_FROM: ',
     *              DIV_FROM,1,DSPDIV_FROM,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPMONY('Enter amount to take from Rollover_FROM: ',
     *               AMT_TAKE,BETUNIT,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	IF(AMT_TAKE.GT.DSPPOL_FROM(DIV_FROM)) THEN
	  TYPE*, IAM()
	  TYPE*, IAM(),'Sorry, amount to take higher than existing one'
	  CALL XWAIT(2,2,ST)
	  GOTO 30
	ENDIF
C
	CALL INPNUM('Enter division to add to Rollover_TO: ',
     *              DIV_TO,1,DSPDIV_TO,ST)
	IF(ST.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	AMT_FROM(DIV_FROM)=DSPPOL_FROM(DIV_FROM)-AMT_TAKE
	AMT_TO(DIV_TO)=DSPPOL_TO(DIV_TO)+AMT_TAKE
C
C DISPLAY FINAL ROLLOVER AMOUNTS
C
	TYPE*, IAM()
	TYPE*, IAM(),'Final Rollover Amounts:'
	TYPE*, IAM()
	TYPE*, IAM(),'Division     Rollover_FROM             Rollover_TO'
	TYPE*, IAM(),'--------------------------------------------------'
	TYPE*, IAM()
C
	DO DIV=1,DSPDIV_FROM
	  WRITE(6,104) IAM(),
     *                 DIV,
     *                 CMONY(AMT_FROM(DIV),14,BETUNIT),
     *                 CMONY(AMT_TO(DIV),14,BETUNIT)
	ENDDO
C
	TYPE*, IAM()
	CALL PRMYESNO('Do you want to transfer amounts [Y/N]? ',FLAG)
	IF(FLAG.NE.1) CALL GSTOP(GEXIT_OPABORT)
C
C UPDATE CURRENT WITH FINAL ROLLOVER AMOUNTS
C
	DO DIV=1,DSPDIV_FROM
	  DSPPOL_FROM(DIV)=AMT_FROM(DIV)
	  DSPPOL_TO(DIV)=AMT_TO(DIV)
	ENDDO
C
C WRITE TOTOBOLA GAME FILE FROM WHERE TO TAKE ROLLOVER AMOUNTS
C
	DSPRGT_FROM(1)=GNUM_TO
	DSPRGT_FROM(2)=DRAW_TO
	CALL WRITEW(FDB_FROM,DRAW_FROM,DSPREC_FROM,ST)
	IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_FROM),3,ST,DRAW_FROM)
C
C WRITE TOTOBOLA GAME FILE WHERE TO ADD ROLLOVER AMOUNTS
C
	DSPROD_TO(1)=GNUM_FROM
	DSPROD_TO(2)=DRAW_FROM
	CALL WRITEW(FDB_TO,DRAW_TO,DSPREC_TO,ST)
	IF(ST.NE.0) CALL FILERR(SCFGFN(1,GNUM_TO),3,ST,DRAW_TO)
C
	TYPE*, IAM()
	TYPE*, IAM(),'Input rollover amounts already transferred'
C
C CLOSE TOTOBOLA GAME FILE FROM WHERE TO TAKE ROLLOVER AMOUNTS,
C CLOSE TOTOBOLA GAME FILE WHERE TO ADD ROLLOVER AMOUNTS AND EXIT
C
	CALL CLOSEFIL(FDB_FROM)
	CALL CLOSEFIL(FDB_TO)
	CALL GSTOP(GEXIT_SUCCESS)
C
C FORMATS
C
104	FORMAT(X,A,6X,I2,4X,A14,10X,A14)
C
	END

