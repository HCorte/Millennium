C LSYSCHK.FOR
C
C V01 01-AUG-90 XXX RELEASED FOR VAX
C
C+     LTOSYS.FTN
C+     ----------
C+
C+ V01 WS 3/20/89
C+
C+     LOTTO REDUCED AND FULL SYSTEM BETS CHECK
C+     ONLY 1 BET CHECKED. IT IS EASY TO MODIFY THIS PROGRAM
C+     FOR MULTI BOARD INTERVAL CODING
C+
C+
C+     THIS DATA STUCTURE ASSUMES THAT DEFINITION OF REDUCED BET
C+     DOES NOT EXPAND INTO MORE THAN 16 DIFFERENT NUMBERS.
C+
C+     LSYSCHK - CHECK SYSTEM BET
C+     LSYSDSP - DISPLAY SYSTEM BET
C+     LSYSANL - ANALIZE SYSTEM BET
C+
C+++++++++++++++++++++++++++++++++++++++++++++++++++
C+
C+     LSYSCHK(BET,SYSNR,WINMSK,BONMSK,SHARE,BONUS_SHARE)
C+     IN:
C+     BET   - BET IN INTERVAL CODE FORMAT
C+     SYSNR - SYSTEM NR
C+     WINMSK   - NUMBERS WON MASK
C+     BONMSK - BONUS NUMBER DRAWN MASK
C+
C+     OUT:
C+     SHARE - NUMBER OF SHARE WON:
C+                                    SHARE(0) - MATCH NONE
C+                                    SHARE(1) - MATCH 1 E.T.C.
C+     BONUS_SHARE - NUMBER OF BONUS SHARE WON
C+                            BONUS_SHARE(0) - MATCH NONE + BONUS
C+                            BONUS_SHARE(1) - MATCH  ONE + BONUS
C+                            ...
C+
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE LSYSCHK(BET,SYSNR,WINMSK,BONMSK,SHARE,BONUS_SHARE)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:LSYSCOM.DEF'
C
C
	INTEGER*4 NO_BONUS_OFF, BONCNT, COUNT, MASK, BONUS_WIN
	INTEGER*4 MRKS, NEXT, POINTER, OFF, INT_BONMSK, STATUS
	INTEGER*4 CHECK_BONUS, MARKS, FROM, CHOSE, GAME, SYSNR
C
	INTEGER*4 BET(*)         !BET
	INTEGER*4 WINMSK(4)      !WINNING MASK
	INTEGER*4 INT_WINMSK     !INTERNAL WINNER MASK
	INTEGER*4 BONMSK(4)      !BONUS NUMBER DRAWN MASK
	INTEGER*4 SHARE(0:*)    !SHARE WITH AND WITHOUT BONUS
	INTEGER*4 BONUS_SHARE(0:*) !WITH BONUS
	INTEGER*4 BOARD(LMXMARK)      !BOARD
	INTEGER*4 K
	LOGICAL SET
	INTEGER*4 I4
	INTEGER*2 I2(2)
	EQUIVALENCE (I4,I2(1))
C
C
	GAME=LSYS_GAME(SYSNR)
	CHOSE=LSYS_GAMCHOSE(GAME)
	FROM=LSYS_GAMFROM(GAME)
	MARKS=LSYS_NUMMRK(SYSNR)
C
	CALL FASTSET(0,SHARE,CHOSE+1) !CLEAR SHARE WON
	CHECK_BONUS=BONMSK(1)+BONMSK(2)+BONMSK(3)+BONMSK(4)
	IF (CHECK_BONUS.NE.0) CALL FASTSET(0,BONUS_SHARE,CHOSE+1)
C
C     GET BOARD
C
	CALL CNVBRD(1,MARKS,FROM,BET,STATUS,BOARD)
	IF (STATUS.NE.0) RETURN
C
	INT_WINMSK=0
	INT_BONMSK=0
C
C     GET INTERNAL WINNING MASK FORMAT
C
	DO 10, OFF=1,MARKS
C	   SET=NTSBIT(WINMSK,BOARD(OFF)-1)       ! TEST IN REVERSE ORDER
           SET=TSBIT(WINMSK,BOARD(OFF)-1)  
	   IF (SET) CALL BSET(INT_WINMSK,OFF-1)
	   IF (CHECK_BONUS.NE.0) THEN
C	      SET=NTSBIT(BONMSK,BOARD(OFF)-1)    ! TEST IN REVERSE ORDER
	      SET=TSBIT(BONMSK,BOARD(OFF)-1)
	      IF (SET) CALL BSET(INT_BONMSK,OFF-1)
	   ENDIF
10	CONTINUE
C
C
C      POINT TO BET AREA AND FIND NR OF SHARE
C
C     ANALYSIS OF REDUCED BET NOW
C
	IF (LSYS_ATR(SYSNR).NE.LSYS_FULL) THEN
	POINTER=LSYS_PTR(SYSNR)             !POINT TO BEG BET
	DO 30, NEXT=1,LSYS_NUMBET(SYSNR) !FOR ALL 'BOARDS'
C
	   MRKS=LSYS_TAB(POINTER)
	   I4=LSYS_TAB(POINTER+1)          !MODIFY IF CHANGE   !!!!!!!
	   IF (L_SYSBYTES.EQ.2) THEN
	      I2(1)=I2(2)                   !LSYS_TAB TO I4     !!!!!!!
	      I2(2)=0                       !                   !!!!!!!
	   ENDIF
	   BONUS_WIN=IAND(INT_BONMSK,I4)
	   MASK=IAND(I4,INT_WINMSK)
	   CALL BITCNT(MASK,L_SYSBYTES,COUNT)
C
	   IF (MRKS.EQ.CHOSE) THEN       !NON A SYSTEM BET
	      IF (BONUS_WIN.NE.0.AND.LSYS_GAMBON(COUNT,GAME).NE.0) THEN
	         BONUS_SHARE(COUNT)=BONUS_SHARE(COUNT)+1
	      ELSE
	         IF (LSYS_GAMDIV(COUNT,GAME) .NE.0)
     *	              SHARE(COUNT)=SHARE(COUNT)+1
	      ENDIF
C
C     SUBBET OF REDUCED BET IS SYSTEM BET
C
	   ELSE                          !SYSTEM BET
C
	     BONCNT=0
	     NO_BONUS_OFF=0
	     IF(BONUS_WIN.NE.0) THEN
	       CALL BITCNT(BONUS_WIN,L_SYSBYTES,BONCNT)
	       NO_BONUS_OFF=BONCNT*2
	     ENDIF
C
	     DO 20, OFF=0,CHOSE
	        SHARE(OFF)=SHARE(OFF)
     *	                +LSYS_GAMSHR(OFF,COUNT,NO_BONUS_OFF,MRKS,GAME)
	        IF (BONUS_WIN.NE.0.OR.MRKS.LT.CHOSE)
     *	           BONUS_SHARE(OFF)=BONUS_SHARE(OFF)
     *	            +LSYS_GAMSHR(OFF,COUNT,NO_BONUS_OFF+1,MRKS,GAME)
20	     CONTINUE
	   ENDIF
C
	   POINTER=POINTER+2
30	CONTINUE
C
	ELSE                     !FOR FULL SYSTEM
C
C     ANALYSIS OF SYSTEM BET
C
	   BONUS_WIN=INT_BONMSK
	   BONCNT=0
	   NO_BONUS_OFF=0
	   IF(BONUS_WIN.NE.0) THEN
	      CALL BITCNT(INT_BONMSK,L_SYSBYTES,BONCNT)
	      NO_BONUS_OFF=BONCNT*2
	   ENDIF
C
	   CALL BITCNT(INT_WINMSK,L_SYSBYTES,COUNT)
	   DO 50, OFF=0,CHOSE
	     SHARE(OFF)=SHARE(OFF)
     *	             +LSYS_GAMSHR(OFF,COUNT,NO_BONUS_OFF,MARKS,GAME)
	     IF (BONUS_WIN.NE.0.OR.MARKS.LT.CHOSE)
     *	           BONUS_SHARE(OFF)=BONUS_SHARE(OFF)
     *	             +LSYS_GAMSHR(OFF,COUNT,NO_BONUS_OFF+1,MARKS,GAME)
50	   CONTINUE
	ENDIF
C
	RETURN
	END
C
C+++++++++++++++++++++++++++++++++++++++++++++
C+
C+    LSYSDSP(SYSNR,STATUS)     ;DISPLAY SYSTEM BET
C+    IN:
C+    SYSNR     - SYSTEM NUMBER
C+    OUT:
C+    STATUS    - .NON. 0 IF INVALID BET
C+
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE LSYSDSP(SYSNR,STATUS)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:LSYSCOM.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:DESPAR.DEF'
	INCLUDE 'INCLIB:RECSCF.DEF'
C
	INTEGER*4 BOARD(LMXMARK), PARTIAL, OFFSET, COUNT, MARKS
	INTEGER*4 TOTAL_BOARDS, II, I, OFF, POINTER, BONUSBET
	INTEGER*4 FROM, CHOSE, GAME, STATUS, SYSNR, LANG
	INTEGER*4 SPANISH /2/
C

	CHARACTER*1 SHARE(0:LMXSHR),BON_SHARE(0:LMXSHR)
	LANG=1
	STATUS=0
	WRITE(6,*) ' '
	IF(LANG.EQ.SPANISH) THEN
	    WRITE(6,*) 'Pantaja de numero de combinacion del sistema ',
     *		      SYSNR,' juego ',LSYS_GAME(SYSNR)
	ELSE
	    WRITE(6,*) 'Displaying system bet number ',SYSNR,' game ',
     *	            LSYS_GAME(SYSNR)
	ENDIF
	IF (LSYS_ATR(SYSNR).EQ.0.OR.
     *	    LSYS_NUMBET(SYSNR).LE.0.OR.
     *	    LSYS_GAME(SYSNR).LE.0.OR.
     *	    LSYS_NUMMRK(SYSNR).LE.0.OR.
     *	    LSYS_PTR(SYSNR).LE.0) THEN
	   IF(LANG.EQ.SPANISH) THEN
	    WRITE(6,*) 'Definicion invalida:'
	    WRITE(6,*) 'Atributo ',LSYS_ATR(SYSNR)
	    WRITE(6,*) '# de combinaciones ',LSYS_NUMBET(SYSNR)
	    WRITE(6,*) 'Juego nr    ',LSYS_GAME(SYSNR)
	    WRITE(6,*) 'Numero de impressiones ',LSYS_NUMMRK(SYSNR)
	    IF (LSYS_PTR(SYSNR).LT.0) WRITE (6,*) 'Apontador invalido'
	   ELSE
	    WRITE(6,*) 'Invalid definition:'
	    WRITE(6,*) 'Attribute ',LSYS_ATR(SYSNR)
	    WRITE(6,*) '# of bets ',LSYS_NUMBET(SYSNR)
	    WRITE(6,*) 'Game nr    ',LSYS_GAME(SYSNR)
	    WRITE(6,*) 'Number of marks ',LSYS_NUMMRK(SYSNR)
	    IF (LSYS_PTR(SYSNR).LT.0) WRITE (6,*) 'Invalid pointer'
	   ENDIF
	   STATUS=-1
	ENDIF
C
	GAME=LSYS_GAME(SYSNR)
C
	CHOSE=LSYS_GAMCHOSE(GAME)
	FROM=LSYS_GAMFROM(GAME)
	BONUSBET=LSYS_BONUSBET(GAME)
	IF(LANG.EQ.SPANISH) THEN
      	  WRITE(6,*) 'Juego ',CHOSE,'/',FROM,' ** impression ',
     *		  LSYS_NUMMRK(SYSNR),
     *	          ' ** ',BONUSBET,' numero(s) bonus selecionado(s)'
	  IF (CHOSE.LE.0.OR.FROM.LE.0.OR.CHOSE.GE.FROM.OR.
     *	      BONUSBET.LT.0.OR.BONUSBET.GT.LMXBONUS) THEN
	    WRITE(6,*) 'Juego invalido'
	    STATUS=-1
	  ENDIF
	ELSE
      	  WRITE(6,*) 'Game ',CHOSE,'/',FROM,' ** mark ',
     *		  LSYS_NUMMRK(SYSNR),
     *	          ' ** ',BONUSBET,' bonus number(s) drawn'
	  IF (CHOSE.LE.0.OR.FROM.LE.0.OR.CHOSE.GE.FROM.OR.
     *	      BONUSBET.LT.0.OR.BONUSBET.GT.LMXBONUS) THEN
	    WRITE(6,*) 'Invalid game'
	    STATUS=-1
	  ENDIF
	ENDIF
C
	IF (STATUS.NE.0) RETURN
C
	POINTER=LSYS_PTR(SYSNR)
	IF(LANG.EQ.SPANISH) THEN
	  IF (LSYS_ATR(SYSNR).EQ.LSYS_FULL) THEN
	    WRITE (6,*) 'Sistema de combinacion completo'
	    IF (LSYS_NUMBET(SYSNR).NE.1) THEN
	      WRITE(6,*) 'Numero invalido de combinaciones ',
     *			  LSYS_NUMBET(SYSNR)
	      STATUS=-1
	      RETURN
	    ENDIF
	    IF (LSYS_NUMMRK(SYSNR).NE.LSYS_TAB(POINTER)) THEN
	      WRITE(6,*) 'Numero invalido de impressiones ',
     *			  LSYS_NUMMRK(SYSNR),
     *	                  LSYS_TAB(POINTER)
	      STATUS=-1
	      RETURN
	    ENDIF
	  ELSE
	    WRITE(6,*) 'sistema de combinciones reduzido, '
     *	          ,'combinaciones correspondem a ',
     *            LSYS_NUMBET(SYSNR),' combinacion(es)'
	  ENDIF
C
	ELSE
	  IF (LSYS_ATR(SYSNR).EQ.LSYS_FULL) THEN
	    WRITE (6,*) 'Full system bet'
	    IF (LSYS_NUMBET(SYSNR).NE.1) THEN
	      WRITE(6,*) 'Invalid number of bets ',LSYS_NUMBET(SYSNR)
	      STATUS=-1
	      RETURN
	    ENDIF
	    IF (LSYS_NUMMRK(SYSNR).NE.LSYS_TAB(POINTER)) THEN
	      WRITE(6,*) 'Invalid number of marks ',LSYS_NUMMRK(SYSNR)
     *	                 ,LSYS_TAB(POINTER)
	      STATUS=-1
	      RETURN
	    ENDIF
	  ELSE
	    WRITE(6,*) 'reduced system bet, '
     *	          ,'bet corresponds to ',LSYS_NUMBET(SYSNR),' bet(s)'
	  ENDIF
	ENDIF
C
	DO 10, OFF=0,CHOSE
	   SHARE(OFF)=CHAR(LSYS_GAMDIV(OFF,GAME)+48)
	   BON_SHARE(OFF)=CHAR(LSYS_GAMBON(OFF,GAME)+48)
10	CONTINUE
C
	IF(LANG.EQ.SPANISH) THEN
	  WRITE(6,*) 'Division del juego ',(SHARE(I),I=0,CHOSE),
     *	       ' divisions de bonus ',(BON_SHARE(II),II=0,CHOSE)
	  WRITE(6,*) ' '
	  WRITE(6,*) 'Definicion de la combinacion'
	ELSE
	  WRITE(6,*) 'Game divisions ',(SHARE(I),I=0,CHOSE),' bonus '
     *	      ,'divisions ',(BON_SHARE(II),II=0,CHOSE)
	  WRITE(6,*) ' '
	  WRITE(6,*) 'Bet definition'
	ENDIF
C
	TOTAL_BOARDS=0
	DO 60, OFF=1,LSYS_NUMBET(SYSNR)
	   MARKS=LSYS_TAB(POINTER)
	   CALL BITCNT(LSYS_TAB(POINTER+1),L_SYSBYTES,COUNT)
	   IF (COUNT.NE.MARKS.OR.MARKS.EQ.0) THEN
	      IF(LANG.EQ.SPANISH) THEN
	        WRITE(6,*) 'combinacion invalida ',OFF,
     *			   ' contador ',MARKS,COUNT
	      ELSE
	        WRITE(6,*) 'Invalid bet ',OFF,' counts ',MARKS,COUNT
	      ENDIF
	      STATUS=-1
	      RETURN
	   ENDIF
	   CALL FASTSET(0,BOARD,LMXMARK)
	   COUNT=0
	   DO 50, OFFSET=0,LMXMARK-1
	      IF (TSBIT(LSYS_TAB(POINTER+1),OFFSET)) THEN
	         COUNT=COUNT+1
	         BOARD(COUNT)=OFFSET+1
	      ENDIF
50	   CONTINUE
C
	   IF(LANG.EQ.SPANISH) THEN
	     WRITE(6,1900) COUNT,(BOARD(I),I=1,COUNT)
1900	     FORMAT(1X,I3,' impressiones ',', volante: ',32I3)
	   ELSE
	     WRITE(6,900) COUNT,(BOARD(I),I=1,COUNT)
900	     FORMAT(1X,I3,' marks ',', board: ',32I3)
	   ENDIF
	   CALL SYSPRICE(CHOSE,FROM,MARKS,PARTIAL)
	   TOTAL_BOARDS=TOTAL_BOARDS+PARTIAL
	   POINTER=POINTER+2
60	CONTINUE
	IF (LSYS_BOARD(SYSNR).NE.TOTAL_BOARDS) THEN
	  IF(LANG.EQ.SPANISH) THEN
	    WRITE (6,*) 'volantes no correspondem a definicion de',
     *			' las combinaciones'
	    WRITE (6,*)LSYS_BOARD(SYSNR),' definidos ',TOTAL_BOARDS,
     *		        ' encontrados'
	  ELSE
	    WRITE (6,*) 'boards do not correspond to bet definition '
	    WRITE (6,*)LSYS_BOARD(SYSNR),' defined ',TOTAL_BOARDS,
     *		        ' found'
	  ENDIF
	 STATUS=-1
	 RETURN
	ENDIF
C
	IF(LANG.EQ.SPANISH) THEN
	  WRITE(6,*) 'Esta combinacion corresponde a ',TOTAL_BOARDS,
     *		     'volantes'
	ELSE
	  WRITE(6,*) 'This bet corresponds to ',TOTAL_BOARDS,' boards'
	ENDIF
	WRITE(6,*) '++++++++++++++++++++++++++++++++++++++++++++'
	RETURN
	END
C
C+++++++++++++++++++++++++++++++++++++
C+
C+    LSYSANL(SYSNR)
C+    IN:
C+    SYSNR - SYSTEM NUMBER
C+
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE LSYSANL(SYSNR)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:LSYSCOM.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:DESPAR.DEF'
	INCLUDE 'INCLIB:RECSCF.DEF'
	INTEGER*4  BET_LENGTH
	PARAMETER (BET_LENGTH=(LMXMARK+9)/4)
C
	INTEGER*4 I, II, BONCNT, BONUS, OFF1, COUNT, MASK, WIN
	INTEGER*4 DISPLAY_ERROR, DIFF_COMBINATIONS, ALL, BONUSBET
	INTEGER*4 CHOSE, MARKS, GAME, STATUS, OFF, MAXTIMES, SYSNR
	INTEGER*4 BET(BET_LENGTH)
	INTEGER*4 I4, LANG
	INTEGER*4 WINMSK(2) /0,0/
	INTEGER*4 BONMSK(2) /0,0/
	INTEGER*4 SHARE(0:LMXSHR)
	INTEGER*4 BONUS_SHARE(0:LMXSHR)
	INTEGER*4 TOTAL_TAB(0:LMXSHR,0:LMXBONUS) !TOTAL # TIMES MATCHED
C
	PARAMETER (MAXTIMES=20000)
	INTEGER*4 STATS_SHARE(0:LMXSHR,0:1,MAXTIMES)
     *	          ,STATS_COUNT(MAXTIMES),STATS_BONUS(MAXTIMES)
     *	          ,STATS_TIMES(MAXTIMES)
C
	INTEGER*4 SPANISH /2/
	LANG=1

	CALL FASTSET(-1,STATS_COUNT,MAXTIMES)
	CALL FASTSET(0,BET,BET_LENGTH)
	DO 5, OFF=0,LMXBONUS
	   CALL FASTSET(0,TOTAL_TAB(0,OFF),LMXSHR+1)
5	CONTINUE
C
	CALL LSYSDSP(SYSNR,STATUS)
	IF (STATUS.NE.0) RETURN
C
C     SET THE BET
C
	GAME=LSYS_GAME(SYSNR)
	MARKS=LSYS_NUMMRK(SYSNR)
	CHOSE=LSYS_GAMCHOSE(GAME)
	BONUSBET=LSYS_BONUSBET(GAME)
C
	DO 10, OFF=1,MARKS
	   CALL SETNIBLE(1,BET,OFF)
10	CONTINUE
C
C
C     TEST FOR "ALL" WINNING COMBINATIONS
C
C
	ALL=2**MARKS-1
C
	DIFF_COMBINATIONS=0
	DISPLAY_ERROR=0
C
	DO 100, WIN=0,ALL
C
	   BONMSK(1)=0
	   MASK=ISHFT(WIN,1)            !SHIFT RIGHT # OF MARKS
	   MASK=IAND(MASK,'FFFFFFFE'X)   !MAKE SURE U DO NOT PROPAGATE 1
	   MASK=ISHFT(MASK,31-MARKS)
	   WINMSK(1)=MASK
C
	   CALL BITCNT(WINMSK,L_SYSBYTES,COUNT)
	   IF (COUNT.GT.CHOSE) GOTO 100
	   CALL LSYSCHK(BET,SYSNR,WINMSK,BONMSK,SHARE,BONUS_SHARE)
C
C     UPDATE STATS TABLES
C
	DO 30, OFF=1,MAXTIMES
	   IF (STATS_COUNT(OFF).EQ.-1) THEN
	      DIFF_COMBINATIONS=DIFF_COMBINATIONS+1
	      STATS_COUNT(OFF)=COUNT
	      STATS_BONUS(OFF)=0
	      STATS_TIMES(OFF)=1
	      CALL FASTMOV(SHARE,STATS_SHARE(0,0,OFF),CHOSE+1)
	      CALL FASTMOV(BONUS_SHARE,STATS_SHARE(0,1,OFF),CHOSE+1)
	      GOTO 40
	   ENDIF
	   IF (STATS_COUNT(OFF).NE.COUNT) GOTO 30
	   IF (STATS_BONUS(OFF).NE.0)     GOTO 30
	   DO 20, OFF1=0,CHOSE
	      IF (STATS_SHARE(OFF1,0,OFF).NE.SHARE(OFF1)) GOTO 30
	      IF (STATS_SHARE(OFF1,1,OFF).NE.BONUS_SHARE(OFF1)) GOTO 30
20	   CONTINUE
	   STATS_TIMES(OFF)=STATS_TIMES(OFF)+1
	   GOTO 40
C
30	CONTINUE
C
	IF (DISPLAY_ERROR.EQ.0) THEN
	  IF(LANG.EQ.SPANISH) THEN
      	    TYPE *,'No hay entradas suficientes para armazenar todas',
     *		    ' las combinaciones'
	  ELSE
          TYPE *,'Not enough possible entries to store all combinations'
	  ENDIF
	  DISPLAY_ERROR=-1
	ENDIF
C
40	CONTINUE
C
C     CHECK FOR BONUS NOW
C
C
	   IF (BONUSBET.EQ.0) GOTO 100     !IF NO BONUS PRIZE
	   DO 90, BONUS=1,ALL
	      BONMSK(1)=ISHFT(BONUS,1)
	      BONMSK(1)=IAND(BONMSK(1),'FFFFFFFE'X)
	      BONMSK(1)=ISHFT(BONMSK(1),31-MARKS)
	      IF (IAND(BONMSK(1),WINMSK(1)).NE.0) GOTO 90!WINS,BONUSES OVERLAP
	      CALL BITCNT(BONMSK,L_SYSBYTES,BONCNT)
	      IF (BONCNT.GT.BONUSBET) GOTO 90      !TO MANY BONUSES
	      CALL LSYSCHK(BET,SYSNR,WINMSK,BONMSK,SHARE,BONUS_SHARE)
C***  IF (COUNT.EQ.5.AND.BONCNT.EQ.1)
C*** *   TYPE *,'win, bonus ',WINMSK,BONMSK,' bonshr ',BONUS_SHARE
C*** *         ,' bet ',BET,' win, bon ',WIN,BONUS
C
C     UPDATE STATS NOW
C
C
	      DO 80, OFF=1,MAXTIMES
	         IF (STATS_COUNT(OFF).EQ.-1) THEN
	            DIFF_COMBINATIONS=DIFF_COMBINATIONS+1
	            STATS_COUNT(OFF)=COUNT
	            STATS_BONUS(OFF)=BONCNT
	            STATS_TIMES(OFF)=1
	            CALL FASTMOV(SHARE,STATS_SHARE(0,0,OFF),CHOSE+1)
	         CALL FASTMOV(BONUS_SHARE,STATS_SHARE(0,1,OFF),CHOSE+1)
	            GOTO 90
	         ENDIF
	         IF (STATS_COUNT(OFF).NE.COUNT) GOTO 80
	         IF (STATS_BONUS(OFF).NE.BONCNT)GOTO 80
	         DO 60, OFF1=0,CHOSE
	            IF (STATS_SHARE(OFF1,0,OFF).NE.SHARE(OFF1)) GOTO 80
              IF(STATS_SHARE(OFF1,1,OFF).NE.BONUS_SHARE(OFF1)) GOTO 80
60	         CONTINUE
	         STATS_TIMES(OFF)=STATS_TIMES(OFF)+1
	         GOTO 90
C
80	      CONTINUE
C
C
90	   CONTINUE
100	CONTINUE
C
C     DISPLAY STATS NOW
C
C     CALCULATE TOTAL # OF TIMES BET FIRST
C
	DO 120, OFF=1,MAXTIMES
	   IF (STATS_COUNT(OFF).LT.0) GOTO 140
	   TOTAL_TAB(STATS_COUNT(OFF),STATS_BONUS(OFF))=
     *   TOTAL_TAB(STATS_COUNT(OFF),STATS_BONUS(OFF))+STATS_TIMES(OFF)
120	CONTINUE
140	CONTINUE
C
C     DISPLAY STATS NOW
C
	DO 190, BONUS=0,BONUSBET
	   DO 180, COUNT=0,CHOSE
	     DO 170, OFF=1,MAXTIMES
	       IF (STATS_COUNT(OFF).LT.0) GOTO 180
 
	       IF (STATS_BONUS(OFF).NE.BONUS) GOTO 170
C
	       IF (STATS_COUNT(OFF).NE.COUNT) GOTO 170
C
	      WRITE(6,900) COUNT,BONUS
     *	      ,STATS_TIMES(OFF),TOTAL_TAB(COUNT,BONUS)
     *	      ,(STATS_SHARE(II,0,OFF),II=0,CHOSE)
C
900	      FORMAT(1H ,'match ',I2,'+',I1,' ** ',I6,'/',I6,' win ',
     *	              10I6)
	      WRITE(6,910) (STATS_SHARE(I,1,OFF),I=0,CHOSE)
910	      FORMAT(1H ,22X,'bonus win ',10I6)
170	     CONTINUE
180	   CONTINUE
190	CONTINUE
C
	RETURN
	END
