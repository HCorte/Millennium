C
C SUBROUTINE ACTON
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]ACTON.FOV                                    $
C  $Date::   17 Apr 1996 12:08:04                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - acton.for;1 **
C
C ACTON.FOR
C
C V03 05-JUN-95 WJK REMOVE LANDLEN RECALCULATION FOR DATA FRAME
C               (SEE V09 LBUFTRAP)
C V02  4-JUN-92 JWE GET ADDRESS ON ALL MESSAGES...
C V01 28-NOV-90 XXX RELEASED FOR VAX
C
C CALL ACTON(LAN,SSAP,DSAP,SSAPSTS,BUF)
C
C IN:
C SSAP     - INT*4 FRAME'S ORIGINATOR
C DSAP     - INT*4 FRAME'S DESTINATION
C BUF      - INT*4 WHERE THE INFO IS
C
C OUT:
C LAN      - INT*4 LAN FRAME CAME ON
C SSAPSTS  - INT*4 SSAPSTS (GOOD ONLY FOR FCONF FRAME) =SAPUP OR SAPDOWN
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE ACTON(LAN,SSAP,DSAP,SSAPSTS,BUF)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:LANCOM.DEF'
C
	INTEGER*4 FRAME, CONN, XDSAP, XSSAP
	INTEGER*4 BUF, SSAPSTS, DSAP, SSAP, LAN
C
C SSAP AND DSAP COME FROM THE BUFFER
C
	CALL ILBYTE(XSSAP,LANBUF(1,BUF),SSAPBEG-1)
	CALL ILBYTE(XDSAP,LANBUF(1,BUF),DSAPBEG-1)
	IF(SSAP.NE.XSSAP.OR.DSAP.NE.XDSAP) THEN
	  CALL OPS('**** ACTON:... ILLEGAL SAP ****[',SSAP,DSAP)
	  CALL OPS('**** ACTON:... ****[',XSSAP,XDSAP)
	  RETURN
	ENDIF
	CONN=CONNECTION(SSAP,DSAP)
	IF(CONN.LE.0.OR.CONN.GT.MAXCON) THEN
	  CALL OPS('**** ACTON:... ILLEGAL CONNECTION ****[',CONN,CONN)
	  RETURN
	ENDIF
	CALL ILBYTE(LAN,LANBUF(1,BUF),TLANBEG-1)
	IF(LAN.LE.0.OR.LAN.GT.MAXLAN) THEN
      	CALL OPS('**** ACTON:... ILLEGAL LAN ****[',LAN,SSAP)
	  RETURN
	ENDIF
C
	CALL ILBYTE(FRAME,LANBUF(1,BUF),FRTYPBEG-1)
	CALL ILBYTE(LAN,LANBUF(1,BUF),TLANBEG-1)
C
	SSAPSTS=SAPDOWN
C
	IF(FRAME.EQ.FRFREQ) THEN
C
C GET THE ADDRESS
C
D	   TYPE*,'**** ACTON:...F REQ ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
C CURLAN(SSAP) SHOULD BE STILL UNKNOWN
C
	ELSEIF(FRAME.EQ.FRFCONF) THEN
C
D	   TYPE*,'**** ACTON:...F CONF ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL ILBYTE(SSAPSTS,LANBUF(1,BUF),LANDATAB-1)
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRCREQ) THEN
C
D	   TYPE*,'**** ACTON:...CON REQ ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   CALL ILBYTE(LANMODE(SSAP),LANBUF(1,BUF),LANDATAB)
	   CALL ILBYTE(LANTYPE(SSAP),LANBUF(1,BUF),LANDATAB+1)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRCCONF) THEN
C
D	   TYPE*,'**** ACTON:...CON CONF ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   CALL ILBYTE(LANMODE(SSAP),LANBUF(1,BUF),LANDATAB)
	   CALL ILBYTE(LANTYPE(SSAP),LANBUF(1,BUF),LANDATAB+1)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRDREQ) THEN
C
D	   TYPE*,'**** ACTON:...DIS REQ ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRDCONF) THEN
C
D	   TYPE*,'**** ACTON:...DIS CONF ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRCLEAR) THEN
C
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
D	   TYPE*,'**** ACTON:...CLEAR ****[',SSAP,DSAP,LAN,FRAME,']'
C
	ELSEIF(FRAME.EQ.FRDATA) THEN
C
	   LANBUF(LANDORG,BUF)=SSAP
	   LANBUF(LANDDES,BUF)=DSAP
	   LANBUF(LANBTYP,BUF)=LTYPDATA
	   IF(LANBUF(LANDLEN, BUF) .LT. 1 .OR.
	1   LANBUF(LANDLEN, BUF) .GT. ETHLENDT)THEN
		CALL OPS('ILLEGAL LENGTH RECEIVED', LANBUF(LANDLEN, BUF),
	1	    LANBUF(LANDLEN, BUF))
		LANBUF(LANBTYP, BUF) = 0
	   ENDIF
C
D	   TYPE*,'**** ACTON:...DATA ****[',SSAP,DSAP,LAN,FRAME,']'
C
	ELSEIF(FRAME.EQ.FRPREQ) THEN
C
D	   TYPE*,'**** ACTON:...POLL REQ ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSEIF(FRAME.EQ.FRPCONF) THEN
C
D	   TYPE*,'**** ACTON:...POL CONF ****[',SSAP,DSAP,LAN,FRAME,']'
	   CALL MOVBYT(LANBUF(1,BUF),SABEG,FLANADR(1,LAN,SSAP),1,6)
	   LANBUF(LANBTYP,BUF)=LTYPCMD
C
	ELSE
	   CALL OPS('**** ACTON:... ILLEGAL FRAME ****',FRAME,0)
	   CALL OPS('**** ACTON:... SSAP ****',SSAP,0)
	   CALL OPS('**** ACTON:... DSAP ****',DSAP,0)
	   RETURN
	ENDIF
C
D	TYPE*,'**** ACTON DATA ****[',LAN,SSAP,DSAP,SSAPSTS,BUF,']'
C
	RETURN
	END
