C FORMAT_LBLS_PRINT.FOR                                                                    
C
C CRIA FICHEIRO COM LABELS DE TODOS OS AGENTES
C
C V06 18-JAN-2011 FRP Lotto2 Changes
C V05 18-JUL-2002 ACP/RPM PRINT LABELS ONLY FOR ONLINE AGENTS 
C V04 14-JAN-2002 JHR EURO IS HERE, SCML DOES NOT NEED ESCUDOS INFORMATION
C V03 07-JUL-2001 JHR ADDED PRINT LABELS WITH PAYMENT ORDERES
C V02 28-JUN-2001 EPH ONE SPACE TO THE RIGHT FOR OCR LINE (RODRIGUES WANTS THIS)
C V02 27-MAY-2001 EPH FORMAT ACCOUNT IN OCR LINE WITH LAST 10 POSITIONS OF ACCOUNT (11 POSITIONS)
C V01 22-MAR-2001 EPH INITIAL VERSION FOR SCML
C                                                                               
C FORMAT OPS FROM  OPSGENtt_yyyyww.FIL  FILE INTO 
C OPSPRNgg_tt_yyyyww.LIS    (ITS A PRINT FILE) 
C LBOPSPRNgg_tt_yyyyww.LIS  (ITS A PRINT FILE)
C                                                                               
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++            
C This item is the property of GTECH Corporation, W.Greenwich, Rhode            
C Island, and contains confidential and trade secret information. It            
C may not be transferred from the custody or control of GTECH except            
C as authorized in writing by an officer of GTECH. Neither this item            
C nor the information it contains may be used, transferred,                     
C reproduced, published, or disclosed, in whole or in part, and                 
C directly or indirectly, except as expressly authorized by an                  
C officer of GTECH, pursuant to written agreement.                              
C                                                                               
C Copyright 1993 GTECH Corporation. All rights reserved.                        
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++            
C                                                                               
C=======OPTIONS/CHECK=NOOVERFLOW/EXT
        PROGRAM FORMAT_LBLS_PRINT
        IMPLICIT NONE                                                  
	                                                
        INCLUDE 'INCLIB:SYSPARAM.DEF'
        INCLUDE 'INCLIB:SYSEXTRN.DEF'
        INCLUDE 'INCLIB:GLOBAL.DEF' 
        INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:RECSCF.DEF'
        INCLUDE 'INCLIB:DATBUF.DEF'
        INCLUDE 'INCLIB:OPS_REC.DEF'
        INCLUDE 'INCLIB:AGTCOM.DEF'
        INCLUDE 'INCLIB:WINCOM.DEF'
	INCLUDE 'INCLIB:PRN_BUFF.DEF'
	INCLUDE 'INCLIB:BANK_REC.DEF'
	INCLUDE 'INCLIB:BRANCH_REC.DEF'
	INCLUDE 'INCLIB:INTERFACES_REC.DEF'
                                                                               
C       INTEGER*4   OPSGEN_LUN /TMP1_LUN/
        INTEGER*4   MSG_LUN /6/
        INTEGER*4   IDFIL_FILASF / 78 /   ! IDENFIFICATION FILE FOR ASF FILE

        INTEGER*4   ANO, SEMANA
	INTEGER*4   ST
CR	INTEGER*4   USRANS
        INTEGER*4   GAME 
	INTEGER*4   TIPO_OP 
	INTEGER*4   OPT, EXT

C
C START PROGRAM
C
        CALL COPYRITE             
C
C	INITIALIZE PRN_BUFF STRUCTURE
C	
	PRN_BUFF.LUN   = TMP2_LUN
        PRNT_LABEL.IDFIL_ASF = IDFIL_FILASF
	PRN_BUFF.POINT = 0
	PRNT_LABEL.POINT = 0
        CALL CLEAN_BUFF()        
        CALL CLEAR_LABELS_INFO()

C
C ASK IF USER WANTS PRIN LABELS FOR THIS PRINT OPS
C
CR	PRNT_LABEL.PRINT = .FALSE.
	PRNT_LABEL.PRINT = .TRUE.
        
CR	CALL PRMYESNO('Quer Imprimir Labels [Y/N] ',  USRANS)
CR	IF(USRANS .EQ. 1) PRNT_LABEL.PRINT = .TRUE.
CR	TYPE *, ' '

	TYPE *
        TYPE *,'<<<<< PROGRAMA PARA IMPRESSÃO DE TARJAS >>>>>'
5       TYPE *

        TYPE*,' '
        WRITE(*,2000)
        TYPE*,' '
        CALL INPNUM('Escolha a opção [E-sair]: ',OPT,1,2,EXT)
	IF (EXT.NE.0) CALL GSTOP(GEXIT_SUCCESS)
 
C
C IF USER GENERATE LABELS FILE ASF FILE SHOULD BE OPENED
C
CR      IF(PRNT_LABEL.PRINT) CALL OPENASF(PRNT_LABEL.IDFIL_ASF)
	CALL OPENASF(PRNT_LABEL.IDFIL_ASF)
C
C	BRANCH FILE
C	-----------
	CALL OPEN_BRANCH(ST)
        IF (ST.NE.0) THEN
	   CALL DISPERR (MSG_LUN, 'Error Opening Branch file (BRANCH.FIL)', 0, ' ', 0, ' ', 0)
      	   CALL GSTOP (GEXIT_FATAL)
        ENDIF
C
C IF WE HAVE TO PRINT LABELS, OPEN LABES FILE
C
CR        IF(PRNT_LABEL.PRINT) THEN
	    GAME=00
	    TIPO_OP=00
	    ANO=0000
	    SEMANA=000
            CALL OPEN_LABEL_FILE(GAME, TIPO_OP, ANO, SEMANA)
CR        ENDIF
 
100	CONTINUE

C
C IF USER ASKED TO PRINT LABELS, FORMAT IT
C
CR        IF(PRNT_LABEL.PRINT) THEN
	CALL FORMAT_AGT(OPT)
CR        ENDIF        
     
CR        IF(PRNT_LABEL.PRINT) THEN
          CALL CLOSASF(PRNT_LABEL.IDFIL_ASF)   ! AGENT SALES FILE
CR        ENDIF
	CLOSE(BRH_LUN)                       ! BRANCH FILE
C
C 	PRINT WHAT THERE IS IN BUFFER AND CLOSE THE LAST PRINT FILE
C
        CALL PRINT_LABELS()
        CLOSE(PRN_BUFF.LUN) 
CR        IF(PRNT_LABEL.PRINT) THEN
          CALL USRCLOS1(PRNT_LABEL.IDFIL_LBL)  ! CLOSE PRINT LABELS FILE 
CR        ENDIF

      	CALL GSTOP (GEXIT_SUCCESS)

2000    FORMAT(1X,'  1 - Impressao de todos os Mediadores'/
     *         1X,'  2 - Impressao de Mediadores On-line'/)

      	END


C	***********************
	SUBROUTINE CLEAN_BUFF()
C	***********************
        IMPLICIT NONE                                                  
	INCLUDE 'INCLIB:PRN_BUFF.DEF'
	INTEGER*4 LIN, BUF
        DO BUF=1,2
           DO LIN=1,17
	      WRITE(PRN_BUFF.LINOP(BUF,LIN),10) 
10            FORMAT(70(' '))
	   ENDDO
           PRN_BUFF.AGENT(BUF) = 0
        ENDDO
	RETURN
	END


C ******************************************************************************
C
C     SUBROUTINE: OPEN_LABEL_FILE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 06 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO OPEN FILE TO FORMAT LABELS INFORMATION FOR PAYMENT ORDERS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE OPEN_LABEL_FILE(GAME, TIPO_OP, ANYO, SEMANA)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:PRN_BUFF.DEF'
C
C PARAMETERS DFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      INTEGER * 4 GAME             ! GAME NUMBER
      INTEGER * 4 TIPO_OP          ! PAYMENT ORDER TYPE
      INTEGER * 4 ANYO             ! YEAR
      INTEGER * 4 SEMANA           ! WEEK
C
C CONSTANTS PARAMETER DEFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      INTEGER * 4 IDFIL_LABELS     ! IDENFIFICATION FILE FOR LABELS FILE
C
C INIT. CONSTANTS PARAMETER DEFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      PARAMETER(IDFIL_LABELS = 77) ! IDENFIFICATION FILE FOR LABELS FILE
C
C VARIABLES DEFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      INTEGER * 4 FSTS             ! FUNCTION STATUS
C
      CHARACTER * 30 FILENAME      ! NAME OF THE FILE
C
C SET IDENTIFICATION FILE USED TO PRINT LABELS IN THE FILE
C
      PRNT_LABEL.IDFIL_LBL = IDFIL_LABELS
C
C SET FORMATED FILE NAME
C
      WRITE(FILENAME, 100) GAME, TIPO_OP, ANYO, SEMANA
C
C OPEN FILE NAME
C
      OPEN (UNIT = PRNT_LABEL.IDFIL_LBL,
     *	    FILE = FILENAME,
     *      STATUS = 'NEW',
     *      CARRIAGECONTROL = 'LIST',
     *      RECORDTYPE = 'FIXED',
     *      RECL = 132,
     *      IOSTAT = FSTS)
C
C CHECK IF OPEN FILE IS OK OR NOT
C
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Error Opening File: ', FILENAME
        TYPE *, IAM()
      	CALL GSTOP (GEXIT_FATAL)
      ENDIF
C
C IF WE ARE OPENING A NEW FILE, HISTORICAL PRINTED DATA SHOULD BE RESET
C
      PRNT_LABEL.LSTAGTPRNT = 0
      PRNT_LABEL.LSTBNKPRNT = '0000'
C
C FORMATS DEFINITION TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
100   FORMAT('FILE:LBOPSPRN', I2.2, '_', I2.2, '_', I4.4, I3.3, '.LIS')
C
C THIS IS THE END TO OPEN LABELS FILE FOR PAYMENT ORDERS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_LABELS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 06 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO PRINT LABELS INFORMATION IN THE FILE
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_LABELS
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT LABELS INFORMATION IN THE FILE
C
      INCLUDE 'INCLIB:PRN_BUFF.DEF'
C
C VARIABLES DEFINITION TO PRINT LABELS INFORMATION IN THE FILE
C
      INTEGER * 4 CNTA              ! COUNTER A
C
C IF USER ASKED TO PRINT LABELS, PRINT IT, IF NOT RETURN
C
CR      IF(PRNT_LABEL.PRINT .EQ. .FALSE.) RETURN
C
C LOOP TO PRINT ALL LABEL INFORMATION
C
      DO CNTA = 1, 9
	WRITE(PRNT_LABEL.IDFIL_LBL, 100) 
     *        PRNT_LABEL.LINLBL(1, CNTA),
     *        PRNT_LABEL.LINLBL(2, CNTA),
     *        PRNT_LABEL.LINLBL(3, CNTA)
      ENDDO
C
C WHEN INFORMATION IS PRINTED IN THE FILE, CLEAR INFORMATION
C
      CALL CLEAR_LABELS_INFO()
C
C IF I HAVE FOURTH LABEL TO FORMAT, SAVE THE CORRESPONDING AGENT TO THE FIRST 
C POSITION. THIS WILL BE THE FIRST LABEL ON NEXT PRINTER LABEL BUFFER
C
       IF(PRNT_LABEL.POINT .EQ. 4) THEN
         PRNT_LABEL.AGENT(1) = PRNT_LABEL.AGENT(4)
         PRNT_LABEL.AGENT(4) = 0
         PRNT_LABEL.POINT = 1
       ELSE
         PRNT_LABEL.POINT = 0
       ENDIF
C
C FORMATS DEFINITION TO PRINT LABELS INFORMATION IN THE FILE
C
100   FORMAT(X, A, 6X, A, 6X, A)
C
C THIS IS THE END TO PRINT LABELS INFORMATION IN THE FILE
C
      END


C ******************************************************************************
C
C     SUBROUTINE: CLEAR_LABELS_INFO
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 06 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO CLEAR WITH BLANK SPACES ALL INFORMATION WRITE IN FILE
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE CLEAR_LABELS_INFO
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO CLEAR ALL INFORMATION FOR LABELS
C
      INCLUDE 'INCLIB:PRN_BUFF.DEF'
C
C VARIABLES DEFINITION TO CLEAR ALL INFORMATION FOR LABELS
C
      INTEGER * 4 CNTA              ! COUNTER A
      INTEGER * 4 CNTB              ! COUNTER B
C
C LOOP TO CLEAR ALL LABEL INFORMATION
C
      DO CNTA = 1, 3
        PRNT_LABEL.AGENT(CNTA) = 0
	DO CNTB = 1, 9
	  WRITE(PRNT_LABEL.LINLBL(CNTA, CNTB), 100)
        ENDDO
      ENDDO
C
C FORMATS DEFINITION TO CLEAR ALL INFORMATION FOR LABELS
C
100   FORMAT(35(' '))
C
C THIS IS THE END TO CLEAR ALL INFORMATION FOR LABELS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: SEARCH_TERMINAL
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 06 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION THAT SEARCH TERMINAL NUMBER STARTING FROM AGENT NUMBER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE SEARCH_TERMINAL(AGT, TERM, FOUND)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO SEARCH TERMINAL NUMBER
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF' 
      INCLUDE 'INCLIB:AGTCOM.DEF'
C
C PARAMETERS DEFINITION TO SEARCH TERMINAL NUMBER
C
      INTEGER * 4 AGT         ! AGENT NUMBER
      INTEGER * 4 TERM        ! TERMINAL NUMBER
C
      LOGICAL FOUND           ! SAYS IF WE FOUND RELATION AGENT - TERMINAL
C
C IF AGENT NUMBER IS CERO WE DO NOT FOUND AGENT NUMBER
C
      FOUND = .FALSE.
      IF(AGT .LE. 0) GOTO 1000
C
C LOOP TO SEARCH TERMINAL NUMBER
C
      DO TERM = 1, NUMAGT
        IF(AGT .EQ. AGTTAB(AGTNUM, TERM)) THEN
          FOUND = .TRUE.
          GOTO 1000
        ENDIF
      ENDDO
C
C IF WE DO NOT FOUND TERMINAL NUMBER, DISPLAY AN ERROR AND FINISH PROGRAM
C
1000  CONTINUE
      IF(FOUND .EQ. .FALSE.) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Don''t Found Terminal Number For Agent: ', AGT 
        TYPE *, IAM()
      ENDIF
C
C THIS IS THE END TO SEARCH TERMINAL NUMBER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: FORMAT_LABELS
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 06 / 07 / 2001
C
C ******************************************************************************
C
C FUNCTION TO WRITE FORMATED INFORMATION IN LABELS BUFFER
C
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE FORMAT_LABELS
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO WRITE FORMATED INFORAMTION IN LABELS BUFFER
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:AGTINF.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:PRMAGT.DEF'
      INCLUDE 'INCLIB:RECAGT.DEF'
      INCLUDE 'INCLIB:PRN_BUFF.DEF'
      INCLUDE 'INCLIB:OPS_REC.DEF'
C
C VARIABLES DEFINITION TO WRITE FORMATED INFORAMTION IN LABELS BUFFER
C
      INTEGER * 4 FSTS        ! FUNCTION STATUS
      INTEGER * 4 CNT         ! COUNTER
      INTEGER * 4 IDX         ! LOOP INDEX
      INTEGER * 4 TERM        ! TEMINAL NUMBER
      INTEGER * 4 ZIPCODE     ! AGENT ZIP CODE
C
      LOGICAL FOUND           ! SAYS IF WE FOUND RELATION AGENT - TERMINAL
C
      CHARACTER * 30 CITYNAME ! AGENT CITY NAME
C
C FUNCTIONS DEFINITION TO WRITE FORMATED INFORAMTION IN LABELS BUFFER
C
      CHARACTER*8  IAGT_NO    ! FUNCTION FORMATED AGENT NUMBER XX.XXXXX

C
C ORDER BY AGENT
C
C      CALL FORMAT_AGT()

C
C SET INDEX TO FORMAT PRINTED LABEL
C
      IDX = PRNT_LABEL.POINT
C
C CHECK IF WE HAVE ONE VALID AGENT NUMBER
C
      IF(PRNT_LABEL.AGENT(IDX) .LE. 0) RETURN

C
C SAVE LAST PRINT LABEL FOR NEXT FORMAT LABEL CALL
C
      PRNT_LABEL.LSTAGTPRNT = PRNT_LABEL.AGENT(IDX)      
C
C READ AGENT INFORMATION FROM ASF FILE
C
      CALL SEARCH_TERMINAL(PRNT_LABEL.AGENT(IDX), TERM, FOUND)
      IF(FOUND .EQ. .FALSE.) RETURN
      CALL READASF(TERM, ASFREC, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), ' Error Reading Agent Sales File'
        TYPE *, IAM()
      ENDIF
C
C FORMAT LINE 1 ( AGENT )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 2), 100) 
     *
     *      IAGT_NO(PRNT_LABEL.AGENT(IDX))           ! AGENT NUMBER 

C
C FORMAT LINE 2 ( AGENT NAME )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 4), 200) 
     *
     *     (ASFBYT(CNT), CNT = SNAME, SNAME + 34)    ! AGENT NAME ( 1 PART )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 5), 200) 
     *
     *     (ASFBYT(CNT), CNT = SNAME + 35, ENAME)    ! AGENT NAME ( 2 PART )
C
C FORMAT LINE 3 ( AGENT ADRESS )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 6), 400)          
     *      
     *     (ASFBYT(CNT), CNT = SSTRT, SSTRT + 34)    ! AGENT ADRESS ( 1 PART )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 7), 500) 
     *           
     *     (ASFBYT(CNT), CNT = SSTRT + 35, ESTRT)    ! AGENT ADRESS ( 2 PART )
C
C GET AGENT POSTAL CODE
C
      CALL ASCBIN(ASFINF, SZIPC, LZIPC, ZIPCODE, FSTS)
      IF(FSTS .NE. 0) THEN
        TYPE *, IAM()
        TYPE *, IAM(), 'Zip Code Error For Agent: ', PRNT_LABEL.AGENT(IDX)
        TYPE *, IAM()
      ENDIF
C
C GET AGENT CITY NAME
C
      CALL MOVBYT(%REF(ASFBYT), SZIPA, %REF(CITYNAME), 1, EZIPA - SZIPA + 1)
C
C FORMAT LINE 4 ( AGENT POSTAL CODE - AGENT CITY )
C
      WRITE(PRNT_LABEL.LINLBL(IDX, 8), 600)
     *
     *      ZIPCODE / 1000,                 ! ZIP CODE ( FIRST PART )
     *      MOD(ZIPCODE, 1000),             ! ZIP CODE ( SECOND PART )
     *      CITYNAME(1:26)                  ! AGENT CITY NAME
C
C FORMATS DEFINITION TO WRITE FORMATED INFORAMTION IN LABELS BUFFER
C
100   FORMAT(A8)
200   FORMAT(<MIN(35, LNAME)>A1)
300   FORMAT(<LNAME - 35>A1)
400   FORMAT(<MIN(35, LSTRT)>A1)
500   FORMAT(<LSTRT - 35>A1)
600   FORMAT(I4.4, '-', I3.3, X, A26)
C
C THIS IS THE END TO WRITE FORMATED INFORAMTION IN LABELS BUFFER
C
	END

C ******************************************************************************
C
C     SUBROUTINE: FORMAT_AGT
C     AUTHOR    : ACP
C     VERSION   : 01            DATE: 10 / 07 / 2002
C
C ******************************************************************************
C
C FUNCTION TO WRITE AGENT IN LABELS BUFFER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE FORMAT_AGT(OPT)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO WRITE FORMATED INFORMATION IN LABELS BUFFER
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:AGTINF.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:PRMAGT.DEF'
      INCLUDE 'INCLIB:RECAGT.DEF'
      INCLUDE 'INCLIB:PRN_BUFF.DEF'

      INTEGER*4    SORT(NUMAGT),SRTCNT, REC, XREC     ! FOR SORT
      INTEGER*4    FSTS
      INTEGER*4    ANUM   !AGENT NUMBER xxxxxxx
      INTEGER*4    CERR   !ERRO
      INTEGER*4    ATYPE,TTYPE,OPT				
	
C
C SORT BY AGENT NUMBER
C
        CALL SRTFLD(1,1,SORT,SRTCNT)

        TYPE*,IAM(),'Pesquisando ASF...aguarde'

        DO 1100 REC=1,SRTCNT

            XREC = SORT(REC)

CR          PRN_BUFF.POINT = PRN_BUFF.POINT + 1
CR          PRNT_LABEL.POINT = PRNT_LABEL.POINT + 1

C
C UPDATE AGENT
C

          CALL READASF(XREC, ASFREC, FSTS)
          IF(FSTS .NE. 0) THEN
           TYPE *, IAM()
           TYPE *, IAM(), ' Error Reading Agent Sales File'
           TYPE *, IAM()
          ENDIF

C ONLY ONLINE AGENTS

	IF(OPT.EQ.2) THEN	

	  CALL ASCBIN(ASFINF,STTYP,LTTYP,TTYPE,CERR)
	  IF(TTYPE.EQ.1) GOTO 1100
	
	  CALL ASCBIN(ASFINF,SATYP,LATYP,ATYPE,CERR)
          IF(ATYPE.EQ.2) GOTO 1100
	
	ENDIF

	PRN_BUFF.POINT = PRN_BUFF.POINT + 1
        PRNT_LABEL.POINT = PRNT_LABEL.POINT + 1
        
	    CALL ASCBIN(ASFINF,SAGNO,LAGNO,ANUM,CERR)
            IF(CERR.LT.0) WRITE(5,904) IAM(),XREC
C
            IF(ANUM.NE.0) THEN
	       PRNT_LABEL.AGENT(PRNT_LABEL.POINT)=ANUM
	    ENDIF

	    CALL FORMAT_LABELS()

C
C IF IS THE FOURTH LABEL, MUST PRINT LABELS
C        
        IF(PRNT_LABEL.POINT .EQ. 4) THEN
          CALL PRINT_LABELS()    
	   CALL FORMAT_LABELS()
        ENDIF

1100    CONTINUE !ENDDO REC=1,SRTCNT

904     FORMAT(1X,A18,' Terminal ',I5,' invalid agent number')

      END
