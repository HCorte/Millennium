C SUBROUTINE X2GETLOAD
C
C V04 16-JUN-2000 OXK Cleanup w/ WARNINGS=ALL
C V03 06-SEP-1995 DAS Major rewrite for background loads (taken from leipzig)
C V02 29-DEC-1994 GPR Modified to handle multiple MCPs per subnetwork
C V01 13-DEC-1994 GPR RELEASED FOR UK
C
C PURPOSE: THIS ROUTINE WILL DETERMINE WHAT THE NEXT LOAD NUMBER IS TO
C          BE BASED ON THE TYPE OF BROADCAST BEING SENT.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2000 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2GETLOAD(STATION_NO,PROCESS,LOAD_NO,ACT_ROMREV,
     *			      ROMREV_IDX,FOREGND_BACKGND)
C
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:MSGCOM.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2XREL.DEF'
        INCLUDE 'INCLIB:X2RLOD.DEF'
C
	INTEGER*4 FOREGND_BACKGND
	INTEGER*4 STATION_NO
	INTEGER*4 LOAD_NO
	INTEGER*4 PROCESS
	INTEGER*4 ROMREV_IDX
	INTEGER*4 ACT_ROMREV
C
	INTEGER*4 ILOOP
	LOGICAL ALREADY_LOADED,SELECTIVE
	INTEGER*4 APPLICATION_NO
C
	IF (ACT_ROMREV.NE.0) THEN
	    CALL X2GETAPPNO(ACT_ROMREV,APPLICATION_NO,FOREGND_BACKGND)
	ELSE
	    APPLICATION_NO = 1
	ENDIF
        IF(APPLICATION_NO .EQ. -1) RETURN
C
C       DETERMINE IF THIS IS A SELECTIVE LOAD
C
	IF((X2XR_BRDCST_TYPE(PROCESS).EQ.X2RLOD_SOFT_SEL) .OR.
     *	   (X2XR_BRDCST_TYPE(PROCESS).EQ.X2RLOD_NO_RESET_SEL)) THEN
           SELECTIVE = .TRUE.
	ELSE
	   SELECTIVE = .FALSE.
	ENDIF
C
C       IF A SELECTIVE LOAD THEN GO THRU THE DLLTABLE AND DETERMINE
C       WHAT IS THE NEXT LOAD TO SEND BASED ON THE SEND FLAG. 
C
	IF (SELECTIVE) THEN
50	    CONTINUE
	    DO 100 ILOOP = LOAD_NO+1,X2XR_LASTLOAD(PROCESS)
	       IF (X2DLL_TIMES_TO_SEND(ILOOP).LT.0) GOTO 100
	       IF (SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. '    ' .AND.
     *             SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. 0      .AND.
     *  	   SMFDLTAB(ILOOP,SNDFLG,APPLICATION_NO) .EQ. 1) GOTO 150
100	    CONTINUE
	    LOAD_NO=MAXLOADS+1
	    RETURN
C
C           ONCE WE HAVE DETERMINED WHAT THE NEXT LOAD IS WE NEED TO
C           KNOW IF THAT LOAD HAS BEEN SENT IN A PREVIOUS LOADED 
C           APPLICATION
C
150	    CONTINUE
	    LOAD_NO=ILOOP
            IF(X2XR_APP_TO_SEND(PROCESS).NE.X2XRF_FOREGROUND) THEN
               CALL CHECK_ALREADY_LOADED(STATION_NO,LOAD_NO,
     *                                  APPLICATION_NO, FOREGND_BACKGND,
     *                                  ROMREV_IDX, SELECTIVE,
     *                                  X2XR_APP_TO_SEND(PROCESS),
     *                                  ALREADY_LOADED)
	       IF (ALREADY_LOADED) GOTO 50
            ENDIF
	 ELSE
250         CONTINUE
	    DO 300 ILOOP = LOAD_NO+1,X2XR_LASTLOAD(PROCESS)
		 IF (X2DLL_TIMES_TO_SEND(ILOOP).LT.0) GOTO 300
		 IF (SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. '    ' .AND.
     *                SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. 0)  GOTO 500
300	    CONTINUE
	    LOAD_NO=MAXLOADS+1
	    GOTO 8000		                             !EXIT HERE
500	    CONTINUE
	    LOAD_NO=ILOOP
            IF(X2XR_APP_TO_SEND(PROCESS).NE.X2XRF_FOREGROUND) THEN
               CALL CHECK_ALREADY_LOADED(STATION_NO,LOAD_NO,
     *                                  APPLICATION_NO, FOREGND_BACKGND,
     *                                  ROMREV_IDX, SELECTIVE,
     *                                  X2XR_APP_TO_SEND(PROCESS),
     *                                  ALREADY_LOADED)
	      IF (ALREADY_LOADED) GOTO 250
            ENDIF
	 ENDIF
C
8000	 CONTINUE
	 RETURN
	 END
C
C CHECK_ALREADY_LOADED
C
C
C THIS SUBROUTINE CHECKS IF THIS LOADS ALREADY EXIST IN A PREVIOUS LOADED
C APPLICATION. SET FLAG ALREADY_LOADED ACCORDINGLY
C
C
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE CHECK_ALREADY_LOADED(STATION_NO, ACTLOAD_NO, ACTAPP_NO,
     *                                  ACTFORE_BACK,ROMREV_IDX,
     *                                  SELECTIVE,APP_TO_SEND,
     *				        ALREADY_LOADED)
C
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:MSGCOM.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2XREL.DEF'
        INCLUDE 'INCLIB:X2RLOD.DEF'
C
	INTEGER*4 STATION_NO,STNCLS
	INTEGER*4 ACTLOAD_NO,ACTAPP_NO,ACTFORE_BACK
	INTEGER*4 APP_TO_SEND, ACTNAME
	INTEGER*4 ILOOP
	INTEGER*4 ROMREV_IDX,RIDX,ACT_ROMREV
	INTEGER*4 FORE_BCKGND	
	INTEGER*4 APPLICATION_NO,LOAD_NO
C
	INTEGER*2 ACTTIN,ACTREVISION
C
	LOGICAL ALREADY_LOADED,SELECTIVE
C
C       SET VARIABLES DEFAULTS
C
        ALREADY_LOADED = .FALSE.
C
	ROMREV_IDX = ROMREV_IDX	! REMOVES COMPILER ERROR ;-)
C
        ACTNAME = SMFDLNAM(1,ACTLOAD_NO,ACTAPP_NO)
        ACTREVISION = SMFDLTAB(ACTLOAD_NO,LODREV,ACTAPP_NO)
        ACTTIN = SMFDLTAB(ACTLOAD_NO,TERMINAL_ID_NO,ACTAPP_NO)
C
C       IF THIS IS THE FIRST ROM INDEX FOR THE CLASS AND IT IS A FOREGROUND LOAD
C       THEN IT IS IMPOSSIBLE FOR THIS LOAD TO HAVE BEEN SENT
C
        IF(ACTAPP_NO .EQ. 1 .AND. 
     *     ACTFORE_BACK .EQ.FOREGROUND_LOAD) RETURN
C
C       DETERMINE WHAT ROM REVISIONS WE ARE TO SENDING TO
C       BASED ON THE VALUES IN THE STATION CLASS RECORD
C
	RIDX = 1
	IF (APP_TO_SEND.EQ.X2XRF_BACKGROUND) THEN
           FORE_BCKGND = BACKGROUND_LOAD
        ELSE
	   FORE_BCKGND = FOREGROUND_LOAD
        ENDIF
C
C       DETERMINE THIS ROMREV
C
1000	CONTINUE
        ACT_ROMREV = 0
	IF(STATION_NO.NE.0) THEN
	   STNCLS = X2XS_STNCLS(STATION_NO)
	   IF (STNCLS.NE.0) THEN
	      IF (RIDX.EQ.1) THEN
	         ACT_ROMREV = X2XC_ROMREV1(STNCLS)
	      ELSE IF (RIDX.EQ.2) THEN
	         ACT_ROMREV = X2XC_ROMREV2(STNCLS)
	      ELSE IF (RIDX.EQ.3) THEN
	         ACT_ROMREV = X2XC_ROMREV3(STNCLS)
              ELSE
                 RETURN !RIDX TO LARGE
	      ENDIF
           ELSE
             RETURN !NO CLASS DEFINE  
	   ENDIF
	ELSE
          RETURN !NO STATION DEFINED
        ENDIF
C
C       IF ROM REVISION IS NOT SET THEN RETURN 
C       OTHERWISE SET UP
C
C
C       GET THE APPLICATION NUMBER ASSOCIATED WITH THIS LOAD'S
C       ROM REVISION NUMBER
C
	IF (ACT_ROMREV.EQ.0) THEN
          IF (APP_TO_SEND.EQ.X2XRF_BOTH) THEN
	     IF (FORE_BCKGND.EQ.FOREGROUND_LOAD) THEN
	         FORE_BCKGND = BACKGROUND_LOAD
	         ACT_ROMREV = X2XC_ROMREV1(STNCLS)
                 RIDX = 1
	     ENDIF
          ENDIF
        ELSE
          RIDX = RIDX + 1
        ENDIF
C
	CALL X2GETAPPNO(ACT_ROMREV,APPLICATION_NO,FORE_BCKGND)
C
	IF (APPLICATION_NO.LE.0 .OR. APPLICATION_NO.GE.ACTAPP_NO) THEN
            RETURN
        ENDIF
C
C       LOOP THRU ALL THE LOADS IN DLLTABLE LOOKING FOR THE LOAD
C       NUMBER THAT WE WISH TO SEND. IF THE APPLICATION NAME AND
C       THE TERMINAL ID ARE IDENTICAL TO THE DESIRED LOAD THEN
C       THIS LOAD HAS ALREADY BEEN SENT. IF THE TYPE OF LOAD IS
C       SELECTIVE THEN THE SAME PROCEDURE IS PERFORMED EXCEPT THAT
C       WE ARE ALSO CONCERNED THAT THE SEND_FLAG IS SET.
C
	IF (SELECTIVE) THEN
C
C          SELECTIVE LOADS... 
C
	   DO 100 ILOOP = 1,MAXLOADS
	      IF (X2DLL_TIMES_TO_SEND(ILOOP).LT.0) GOTO 100
	      IF (SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. '    ' .AND.
     *            SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. 0 .AND.
     *            SMFDLTAB(ILOOP,SNDFLG,APPLICATION_NO) .EQ. 1) THEN
C
	         LOAD_NO=ILOOP
	         IF (LOAD_NO.EQ.ACTLOAD_NO) THEN
		   IF (ACTNAME.EQ.SMFDLNAM(1,LOAD_NO,APPLICATION_NO)     .AND.
     *		       ACTREVISION.EQ.SMFDLTAB(LOAD_NO,LODREV,APPLICATION_NO)
     *		       .AND. ACTTIN.EQ.SMFDLTAB(LOAD_NO,TERMINAL_ID_NO,
     *				          APPLICATION_NO)) THEN
		           ALREADY_LOADED = .TRUE.
		           RETURN
		   ELSE
		           GOTO 1000
		   ENDIF
	         ENDIF
	       ENDIF
100	    CONTINUE
C
	ELSE
C
C           ALL LOADS...
C
	    DO 300 ILOOP = 1,MAXLOADS
	       IF (X2DLL_TIMES_TO_SEND(ILOOP).LT.0) GOTO 300
	       IF (SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. '    ' .AND.
     *             SMFDLNAM(1,ILOOP,APPLICATION_NO) .NE. 0) THEN
	         LOAD_NO=ILOOP
	         IF (LOAD_NO.EQ.ACTLOAD_NO) THEN
		   IF (ACTNAME.EQ.SMFDLNAM(1,LOAD_NO,APPLICATION_NO) .AND.
     *		       ACTREVISION.EQ.SMFDLTAB(LOAD_NO,LODREV,APPLICATION_NO) 
     *		       .AND. ACTTIN.EQ.SMFDLTAB(LOAD_NO,TERMINAL_ID_NO,
     *			                  APPLICATION_NO)) THEN
			    ALREADY_LOADED = .TRUE.
			    RETURN
		   ELSE
                     GOTO 1000
		   ENDIF
		 ENDIF
	       ENDIF
300	    CONTINUE
	   ENDIF
C
C       TRY NEXT ROM_REVISION NUMBER
C
        GOTO 1000
C
	END
