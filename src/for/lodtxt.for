C
C SUBROUTINE LODTXT
C
C LODTXT.FOR
C
C V31 29-NOV-2000 UXN  TOTOGOLO ADDED.
C V30 03-MAR-2000 OXK  Vakio changes
C V29 07-SEP-1999 UXN  Fix for Pitka closing time.
C V28 14-MAY-1999 UXN  Super Triple added.
C V27 05-MAY-1999 UXN  Closing time added for PITKÄ rows.
C V26 26-MAR-1999 RXK  Game type/game index change.
C V25 17-APR-1996 HXK  Release of Finland for X.25, Telephone Betting, 
C                      Instant Pass Thru Phase 1
C V24 15-MAR-1996 HXK  Putting Rita's fixes (RXK) into PVCS archive
C V23 08-MAR-1996 RXK  Fix for 23 competitors problem for Winners Tip game
C V22 20-FEB-1996 HXK  Fix for "12-12" problem, i.e. when total row 
C                      names = 17+7 = 24
C V21 15-DEC-1995 HXK  Fixes for Double, Couple checksum
C V20 13-DEC-1995 HXK  Interim version of code ....
C V19 07-DEC-1995 HXK  Modified text for Couple
C V18 10-NOV-1995 HXK  Further changes for Double, Couple
C V17 16-DEC-1993 HXK  FIX FOR SMALL TULOSVETO.
C V16 31-AUG-1993 SXH  Fixed bug with MOVBYT CALL for RAVI,
C                      Zero checksum is legitimate so take account of it
C V15 10-AUG-1993 HXK  DO NOT SEND DOWN TEAM NAME LENGTH
C V14 06-AUG-1993 GXA  Do not include quick pick horses in Ravi checksum 
C                      calculation, this is requested by the terminl dudes.
C V13 26-JUL-1993 GXA  Adjusted starting offset of checksum routine to start 
C                      with zero.
C V12 19-JUL-1993 GXA  Changed Toto Select checksuming not to include the draw
C                      dates, why? because the terminal dudes wants it that way!
C V11 15-JUL-1993 GXA  Added checksumming of RAVI "text" message.
C V10 14-JUL-1993 CXK  Removed Teame Name Length from Toto Select message.
C V09 08-JUL-1993 GXA  Changed Ravi text NOT to include the Popularity list.
C                      Corrected Sports text to work as the others.
C                      Changed Win Tip to include a option byte and act on it.
C V08 22-JUN-1993 GXA  Released for Finland Dec Conversion / Oddset.
C V07 21-JAN-1993 DAB  Initial Release
C                      Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                      DEC Baseline
C V06 16-JUL-1992 GCAN ADDED TOTO SELECT DRAW DATES INTO MSG. COMM.
C V05 26-JUN-1992 GCAN CLEANED UP TOTO SELECT AND SCORE GAMES.
C V04 01-JUN-1992 GCAN ALLWAYS INCREASE THE CONTROL REV# FOR SPORTS.
C                      FORCE IT TO CHANGE. (NO TEAMS ENTERED IN HOLLAND).
C V03 21-FEB-1992 GCAN PARAMETERIZED LENGHTS. DO NOT SEND ALL IF NOT NEEDED.
C V02 12-NOV-1991 MTK  INITIAL RELEASE FOR NETHERLANDS (REMOVE @ STUFF)
C V01 01-AUG-1990 XXX  RELEASED FOR VAX
C
C SUBROUTINE TO LOAD GAME TEXT DATA INTO MESSAGE COMMON
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1997 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE LODTXT(GAM)
	IMPLICIT NONE
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'
	INCLUDE 'INCLIB:PRMDLL.DEF'
	INCLUDE 'INCLIB:SPTCOM.DEF'
	INCLUDE 'INCLIB:TGLCOM.DEF'
	INCLUDE 'INCLIB:SCRCOM.DEF'
	INCLUDE 'INCLIB:WITCOM.DEF'
	INCLUDE 'INCLIB:TSLCOM.DEF'
	INCLUDE 'INCLIB:DBLCOM.DEF'
	INCLUDE 'INCLIB:CPLCOM.DEF'
	INCLUDE 'INCLIB:SSCCOM.DEF'
	INCLUDE 'INCLIB:TRPCOM.DEF'
	INCLUDE 'INCLIB:STRCOM.DEF'
C
        ! parameters
	INTEGER*4  MAXMSG
	PARAMETER (MAXMSG=252)	  !Max Message Length 
C
        ! arguments
        INTEGER*4  GAM                     !

	INTEGER*4  WRKMES(128)             !
        INTEGER*4  BYTTAB(1200)            !
	INTEGER*4  TXTERR                  !
	INTEGER*4  BUFIDX                  !
	INTEGER*4  GNUM                    !
	INTEGER*4  MESNUM                  !
	INTEGER*4  I4TEMP                  !
	INTEGER*4  GTYP                    !
	INTEGER*4  GIND                    !
	INTEGER*4  ST                      !
	INTEGER*4  BUFIND                  !
	INTEGER*4  BLANK                   !
	INTEGER*4  SEGNUM                  !
	INTEGER*4  I                       !
	INTEGER*4  J                       !
	INTEGER*4  OUTLEN                  !
	INTEGER*4  TSUM                    !
	INTEGER*4  REV3                    !
	INTEGER*4  REV4                    !
	INTEGER*4  S                       !
	INTEGER*4  FLAG                    !
	INTEGER*4  CNTIND                  !
	INTEGER*4  EV_ACT		   !
C
	INTEGER*4  NAME_LEN                ! Length of name filed
C                                          ! (Need to be adjusted sometimes)
	INTEGER*4  ENTITY_LEN		   ! Length of one ods+name Entity
	INTEGER*4  ENTITY_NUM		   ! Number of Entities in a MAXMSG rec.
	INTEGER*4  MESLEN		   ! Message Length without header part
	INTEGER*4  EVTNUM		   ! # active Events on WINTIP, DOUBLE
	INTEGER*4  EVTNUM1		   ! # active Events on COUPLE evt 1
	INTEGER*4  EVTNUM2		   ! # active Events on COUPLE evt 2
	INTEGER*4  COUNT                   !
	INTEGER*4  TRPOPT(10)               !option for Todays Triple(max 5 segm)
	INTEGER*4  USDLEN(10)               !used space in segment/Triple
	INTEGER*4  MASTER	           !actual length of master name/Triple
	INTEGER*4  INMIXED       
	INTEGER*4  ALREADY_GONE
	INTEGER*4  DES_LEN(3),EV_LEN(3)

	BYTE I1MESS(512),I1TEMP(4)

	CHARACTER CHRMES(512)

	EQUIVALENCE (WRKMES,CHRMES,I1MESS)
	EQUIVALENCE (I1TEMP,I4TEMP)

	DATA BLANK/'    '/

        LOGICAL    EMPTY /.TRUE./
C
C
	EVTNUM = 0
	TXTERR = 0
	BUFIDX = 1
	CALL FASTSET(0,BYTTAB,1200)
	GTYP = GNTTAB(GAMTYP,GAM)
	GIND = GNTTAB(GAMIDX,GAM)
	IF(GTYP.LE.0.OR.GTYP.GT.MAXTYP) RETURN
	IF(GIND.LE.0.OR.GIND.GT.MAXIND) RETURN
	GNUM = GTNTAB(GTYP,GIND)
	IF(GTYP.EQ.TTSL) GOTO 1000
	IF(GTYP.EQ.TWIT) GOTO 2000
	IF(GTYP.EQ.TSCR) GOTO 3000
	IF(GTYP.EQ.TSPT) GOTO 4000
	IF(GTYP.EQ.TDBL) GOTO 6000
	IF(GTYP.EQ.TCPL) GOTO 7000
	IF(GTYP.EQ.TSSC) GOTO 8000
	IF(GTYP.EQ.TTRP) GOTO 9000
	IF(GTYP.EQ.TSTR) GOTO 10000
	IF(GTYP.EQ.TTGL) GOTO 11000
	RETURN
C
C TOTO SELECT GAMES
C
1000	CONTINUE
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM=GAMTXT(GNUM)
	BUFIDX=1
	BUFIND=1
	SEGNUM=1
	EVTNUM = TSLRWS(GIND)			!ACTUAL ROWS SENT
        CALL FASTSET(BLANK,WRKMES(1),128)
	I1MESS(BUFIND)=SEGNUM
	BUFIND=BUFIND+1
	CNTIND = BUFIND
	BUFIND = BUFIND + 1
C***	I1MESS(BUFIND) = TNMS_LEN		 !LENGTH IN BYTES OF EACH NAME
C***	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES,ODDS AND DATES WILL FIT IN ONE SEGMENT
C
	NAME_LEN = TNMS_LEN - 2			 !SORRY
	ENTITY_LEN = TODS_LEN*3 + NAME_LEN*2 +   !LENGTH OF ONE SET OF ODS+NAMES
     *               TDAT_LEN + TTIM_LEN	 !+DRAW DATE + CLOSING TIME
	MESLEN = MAXMSG - BUFIND - 1 - 6	 !LENGTH TO USE FOR ENTITIES
C                                                !LESS CNTRL/SEQ,TYP/SUB,
C                                                !CHKSUM,GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN	 !# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
	IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *	MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
	   ENTITY_NUM = ENTITY_NUM - 1
	ENDIF
C
C LOAD UP DATES, ODDS AND PLAYER NAMES
C
	COUNT = 0
	DO 1030 I = 1,EVTNUM
	  CALL REVBYT(TSLDAT(I,GIND),TDAT_LEN,WRKMES,BUFIND,TDAT_LEN)
	  BUFIND = BUFIND + TDAT_LEN
C	  CALL REVBYT(TSLDAT(I,GIND),TDAT_LEN,BYTTAB,BUFIDX,TDAT_LEN)
C         BUFIDX = BUFIDX + TDAT_LEN

          I4TEMP = TSLTIM(I,GIND)
          IF(I4TEMP.GE.'40000000'X) I4TEMP = I4TEMP - '40000000'X
        
          I1MESS(BUFIND+0) = I4TEMP/3600 ! HRS
          I4TEMP = I4TEMP - (I4TEMP/3600)*3600
          I1MESS(BUFIND+1) = I4TEMP/60   ! MIN
          I4TEMP = I4TEMP - (I4TEMP/60)*60
          I1MESS(BUFIND+2) = I4TEMP      ! SEC
          BUFIND = BUFIND + 3
C
	  DO 1010 J = 1,3   
	    CALL REVBYT(TSLODS(J,I,GIND),TODS_LEN,WRKMES,BUFIND,TODS_LEN)
	    BUFIND = BUFIND + TODS_LEN
	    CALL REVBYT(TSLODS(J,I,GIND),TODS_LEN,BYTTAB,BUFIDX,TODS_LEN)
	    BUFIDX = BUFIDX + TODS_LEN
1010	  CONTINUE
C
	  DO 1020 J=1,2                          !FOR ALL TEAMS
	    CALL MOVBYT(TSLNMS(1,J,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	    BUFIND = BUFIND + NAME_LEN
	    CALL MOVBYT(TSLNMS(1,J,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	    BUFIDX = BUFIDX + NAME_LEN
1020	  CONTINUE
	  COUNT = COUNT + 1
C
C IF SEGMENT IS COMPLETE CHECKSUM FROM BYTE 4 TO LENGTH
C AND SAVE INTO MESSAGE COMMON.
C
	  IF(MOD(I,ENTITY_NUM).EQ.0.AND.I.NE.EVTNUM) THEN
	    I1MESS(CNTIND) = COUNT
	    COUNT = 0
	    OUTLEN = BUFIND - 1
	    CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	    IF(ST.NE.0) THEN
	      WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	      CALL GPAUSE
	    ENDIF
	    BUFIND = 1
	    MESNUM = MESNUM + 1
	    SEGNUM = SEGNUM + 1
	    CALL FASTSET(BLANK,WRKMES(1),128)
	    I1MESS(BUFIND) = SEGNUM
	    BUFIND = BUFIND + 1
	    CNTIND = BUFIND
	    BUFIND = BUFIND + 1
C***	    I1MESS(BUFIND) = NAME_LEN		   !LENGTH IN BYTES OF NAMES
C***	    BUFIND = BUFIND + 1
	  ENDIF
1030	CONTINUE
C
C RECALCULATE TEXT CHEKSUM, IF DIFFERENT STORE THE NEW
C THEN BUMP THE TEXT REVISION NUMBER.
C
	I1MESS(CNTIND) = COUNT
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = TSLREV(GIND)
	REV3 = ZEXT(I1TEMP(3))
	REV4 = ZEXT(I1TEMP(4))
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),TSLREV(GIND),I4TEMP
	   TSLREV(GIND) = I4TEMP
	ENDIF
C
C NOW BUILD LAST SEGMENT WITH TEXT REVISION DATA.
C
	CALL MOVBYT(TSLREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C WINNERS TIP
C
2000	CONTINUE
C
C FIGURE OUT HOW MANY NONE EMPTY ROWS THERE ARE TO BE SENT
C
	EVTNUM=0
        DO 2005 I = 1, MAXWRW
        IF(WITNMS(1,I,GIND).NE.BLANK) EVTNUM=I
2005    CONTINUE
C
C
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	SEGNUM = 1
	BUFIND = 1
	BUFIDX = 1
	COUNT=0
	NAME_LEN = WNMS_LEN - 2
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = SEGNUM
	BUFIND = BUFIND + 1
C
	I1MESS(BUFIND) = '80'X			!OPTION BYTE
        I1MESS(BUFIND) = IOR(I1MESS(BUFIND),'40'X) 
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = WENM_LEN		!EVENT FIELD LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(WITENM(1,GIND),1,WRKMES,BUFIND,WENM_LEN) !EVENT NAME
        BUFIND = BUFIND + WENM_LEN
        CALL MOVBYT(WITENM(1,GIND),1,BYTTAB,BUFIDX,WENM_LEN)
        BUFIDX = BUFIDX + WENM_LEN
	I1MESS(BUFIND) = WDES_LEN		!EVENT DESCRIPTION LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(WITDES(1,GIND),1,WRKMES,BUFIND,WDES_LEN) !EVENT DESCRIPTION
        BUFIND = BUFIND + WDES_LEN
        CALL MOVBYT(WITDES(1,GIND),1,BYTTAB,BUFIDX,WDES_LEN)
        BUFIDX = BUFIDX + WDES_LEN
	CNTIND=BUFIND
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = NAME_LEN		!TEAM NAME FIELD LENGTH
	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
        IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *  MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
           ENTITY_NUM = ENTITY_NUM - 1
        ENDIF
C
C LOAD UP PLAYER NAMES , THAT IS ALL THAT ARE DEFINED 
C
	COUNT=0
	DO 2010 I = 1,EVTNUM                      
	CALL MOVBYT(WITNMS(1,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	BUFIND = BUFIND + NAME_LEN
	CALL MOVBYT(WITNMS(1,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	BUFIDX = BUFIDX + NAME_LEN
	COUNT = COUNT + 1
C
C
	IF(MOD(COUNT,ENTITY_NUM).EQ.0.AND.I.NE.EVTNUM) THEN
	   I1MESS(CNTIND) = COUNT
	   COUNT = 0
	   OUTLEN = BUFIND - 1
	   CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	   IF(ST.NE.0) THEN
	     WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	     CALL GPAUSE
	   ENDIF
           CALL FASTSET(BLANK,WRKMES(1),128)
	   BUFIND = 1
	   SEGNUM = SEGNUM + 1
	   MESNUM = MESNUM + 1
	   I1MESS(BUFIND) = SEGNUM
	   BUFIND = BUFIND + 1
	   I1MESS(BUFIND) = 0			   !OPTION  BYTE
	   BUFIND = BUFIND + 1
	   CNTIND = BUFIND
      	   BUFIND = BUFIND + 1
      	   I1MESS(BUFIND) = NAME_LEN               !TEAM NAME FIELD LENGTH
      	   BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	   ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	   MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	   ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
           IF(ENTITY_NUM.EQ.EVTNUM-I.AND.
     *     MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
              ENTITY_NUM = ENTITY_NUM - 1
           ENDIF
	ENDIF
2010	CONTINUE
C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	I1MESS(2) = I1MESS(2) + '20'X			!TEXT REV OPTION
C
	I1MESS(CNTIND) = COUNT
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = WITREV(GIND)
	REV3 = ZEXT(I1TEMP(3))      
	REV4 = ZEXT(I1TEMP(4))      
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),WITREV(GIND),I4TEMP
	   WITREV(GIND) = I4TEMP
 	ENDIF
C
	CALL MOVBYT(WITREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C SCORE GAMES
C
3000	CONTINUE
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	SEGNUM = 1
	BUFIND = 1
	BUFIDX = 1
	NAME_LEN = SNMS_LEN - 2
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = 1
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = NAME_LEN              !LENGTH IN BYTES OF NAME FIELD
	BUFIND = BUFIND + 1
C
	CALL MOVBYT(SCRNM1(1,GIND),1,WRKMES,BUFIND,NAME_LEN)  !HOME TEAM
	BUFIND = BUFIND + NAME_LEN
	CALL MOVBYT(SCRNM1(1,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	BUFIDX = BUFIDX + NAME_LEN
	CALL MOVBYT(SCRNM2(1,GIND),1,WRKMES,BUFIND,NAME_LEN)  !AWAY TEAM
	BUFIND = BUFIND + NAME_LEN
	CALL MOVBYT(SCRNM2(1,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	BUFIDX = BUFIDX + NAME_LEN
C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = SCRREV(GIND)
	REV3 = ZEXT(I1TEMP(3))
	REV4 = ZEXT(I1TEMP(4))
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV4 = TSUM
	   REV3 = REV3 + 1
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),SCRREV(GIND),I4TEMP
	   SCRREV(GIND) = I4TEMP
	ENDIF
C
	CALL MOVBYT(SCRREV(GIND),3,WRKMES,BUFIND,2)    !REV NUMBER
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C SPORTS GAMES
C
4000	CONTINUE
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM=GAMTXT(GNUM)
	BUFIND=1
	NAME_LEN = SPNMS_LEN - 2
	EVTNUM = SPTMAX(GIND)
	CALL FASTMOV(BLANK,WRKMES(1),128)
	SEGNUM=1
	CALL MOVBYT(SEGNUM,1,WRKMES,BUFIND,1)  !SEGMENT NUMBER
	BUFIND=BUFIND+1

	I1MESS(BUFIND) = SPEVN_LEN
	CALL MOVBYT(SPEVN_LEN,1,WRKMES,BUFIND,1)  !EVENT NAME LENGTH
	BUFIND=BUFIND+1

	CALL MOVBYT(SPTEVN(1,GIND),1,WRKMES,BUFIND,SPEVN_LEN)
	BUFIND=BUFIND+SPEVN_LEN

	I1MESS(BUFIND) = 0
	CNTIND = BUFIND
	BUFIND = BUFIND + 1
C***	I1MESS(BUFIND) = NAME_LEN	       !LENGTH IN BYTES OF NAMES
C***	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN*2 	       !LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND -1 - 6	       !LENGTH TO USE FOR ENTITIES
C                                              !LESS CNTRL/SEQ,TYP/SUB,
C                                              !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN       !# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
	IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *	MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
	   ENTITY_NUM = ENTITY_NUM - 1
	ENDIF
C
C LOAD UP TEAM NAMES
C
	COUNT=0
	DO 4020 I=1,SPTMAX(GIND)                     !FOR MAX TEAMS
	   DO 4010 J=1,2			     !FOR ALL TEAMS
	      IF(SPTNMS(1,J,I,GIND).EQ.0.OR.SPTNMS(1,J,I,GIND).EQ.BLANK)
     *	      TXTERR=1
	      CALL MOVBYT(SPTNMS(1,J,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	      BUFIND=BUFIND+NAME_LEN
4010	   CONTINUE
	   COUNT=COUNT+1
C
C
	   IF(MOD(I,ENTITY_NUM).EQ.0.AND.I.NE.SPTMAX(GIND)) THEN
	      I1MESS(CNTIND) = COUNT
	      COUNT = 0
	      OUTLEN = BUFIND - 1
	      CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	      IF(ST.NE.0) THEN
	         WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	         CALL GPAUSE
	      ENDIF
	      BUFIND=1
	      MESNUM=MESNUM+1
	      CALL FASTSET(BLANK,WRKMES(1),128)
	      SEGNUM=SEGNUM+1
	      CALL MOVBYT(SEGNUM,1,WRKMES,BUFIND,1)  !SEGMENT NUMBER
	      BUFIND=BUFIND+1
	      I1MESS(BUFIND) = 0	             !NUBER OF ROWS PLAYED ON
              CNTIND=BUFIND                          !REV 1.8
	      BUFIND = BUFIND + 1
C***	      I1MESS(BUFIND) = NAME_LEN		     !LENGTH IN BYTES OF EACH NAME
C***	      BUFIND = BUFIND + 1
	      ENTITY_NUM = MESLEN / ENTITY_LEN       !# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
	      IF(ENTITY_NUM.EQ.EVTNUM-I.AND.
     *	      MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
	         ENTITY_NUM = ENTITY_NUM - 1
	      ENDIF
C
	   ENDIF
4020	CONTINUE
C
        I1MESS(CNTIND)=COUNT  !REV 1.8
C
	IF(TXTERR.EQ.1) THEN
	  WRITE(6,920) IAM(),GTNAMES(GTYP),GIND
	  CALL YESNO(FLAG)
	  IF(FLAG.NE.1) STOP
	ENDIF
C
C CALCULATE CHECKSUM
C
	BUFIDX=1
	BYTTAB(BUFIDX)=SPTMAX(GIND)
	BUFIDX=BUFIDX+1

        CALL MOVBYT(SPTEVN(1,GIND),1,BYTTAB,BUFIDX,SPEVN_LEN)
        BUFIDX=BUFIDX+SPEVN_LEN

	DO I=1,SPGNBR
           DO J=1,2
              CALL MOVBYT(SPTNMS(1,J,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
              BUFIDX=BUFIDX+NAME_LEN
           ENDDO
        ENDDO
        BUFIDX=BUFIDX-1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
C
C NOW BUILD LAST SEGMENT WITH TEXT REVISION DATA.
C
        I4TEMP=SPTREV(GIND)
        REV3=ZEXT(I1TEMP(3))
        REV4=ZEXT(I1TEMP(4))
        IF(REV4.NE.TSUM) THEN
           WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
           REV4=TSUM
           REV3=REV3+1
           I1TEMP(3)=REV3
           I1TEMP(4)=REV4
           WRITE(6,940) IAM(),SPTREV(GIND),I4TEMP
        ENDIF
 	SPTREV(GIND)=I4TEMP
C
	CALL MOVBYT(SPTREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND=BUFIND + 2
	OUTLEN=BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C DOUBLE
C
6000	CONTINUE
C
C FIGURE OUT HOW MANY NONE EMPTY ROWS THERE ARE TO BE SENT
C
	EVTNUM=0
        DO 6005 I = 1, MAXDBLRW
           IF(DBLNMS(1,I,GIND).NE.BLANK) EVTNUM=I
6005    CONTINUE
C
C
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	SEGNUM = 1
	BUFIND = 1
	BUFIDX = 1
	COUNT=0
	NAME_LEN = DBLNMS_LEN - 2
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = SEGNUM
	BUFIND = BUFIND + 1
C
	I1MESS(BUFIND) = '80'X			!OPTION BYTE
        I1MESS(BUFIND) = IOR(I1MESS(BUFIND),'40'X)
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = DBLENM_LEN		!EVENT FIELD LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(DBLENM(1,GIND),1,WRKMES,BUFIND,DBLENM_LEN) !EVENT NAME
        BUFIND = BUFIND + DBLENM_LEN
        CALL MOVBYT(DBLENM(1,GIND),1,BYTTAB,BUFIDX,DBLENM_LEN)
        BUFIDX = BUFIDX + DBLENM_LEN + 2        !pad for terminal checksum
	I1MESS(BUFIND) = DBLDES_LEN		!EVENT DESCRIPTION LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(DBLDES(1,GIND),1,WRKMES,BUFIND,DBLDES_LEN) !EVENT DESCRIPTION
        BUFIND = BUFIND + DBLDES_LEN
        CALL MOVBYT(DBLDES(1,GIND),1,BYTTAB,BUFIDX,DBLDES_LEN)
        BUFIDX = BUFIDX + DBLDES_LEN
	CNTIND=BUFIND
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = NAME_LEN		!TEAM NAME FIELD LENGTH
	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
        IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *  MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
           ENTITY_NUM = ENTITY_NUM - 1
        ENDIF
C
C LOAD UP PLAYER NAMES , THAT IS ALL THAT ARE DEFINED 
C
	COUNT=0
	DO 6010 I = 1,EVTNUM                      
	CALL MOVBYT(DBLNMS(1,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	BUFIND = BUFIND + NAME_LEN
	CALL MOVBYT(DBLNMS(1,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	BUFIDX = BUFIDX + NAME_LEN
	COUNT = COUNT + 1
C
C
	IF(MOD(COUNT,ENTITY_NUM).EQ.0.AND.COUNT.NE.EVTNUM) THEN
	   I1MESS(CNTIND) = COUNT
	   COUNT = 0
	   OUTLEN = BUFIND - 1
	   CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	   IF(ST.NE.0) THEN
	     WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	     CALL GPAUSE
	   ENDIF
           CALL FASTSET(BLANK,WRKMES(1),128)
	   BUFIND = 1
	   SEGNUM = SEGNUM + 1
	   MESNUM = MESNUM + 1
	   I1MESS(BUFIND) = SEGNUM
	   BUFIND = BUFIND + 1
	   I1MESS(BUFIND) = 0			   !OPTION  BYTE
	   BUFIND = BUFIND + 1
	   CNTIND = BUFIND
      	   BUFIND = BUFIND + 1
      	   I1MESS(BUFIND) = NAME_LEN               !TEAM NAME FIELD LENGTH
      	   BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	   ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	   MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	   ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
           IF(ENTITY_NUM.EQ.EVTNUM-I.AND.
     *     MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
              ENTITY_NUM = ENTITY_NUM - 1
           ENDIF
	ENDIF
6010	CONTINUE
C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	I1MESS(2) = I1MESS(2) + '20'X			!TEXT REV OPTION
C
	I1MESS(CNTIND) = COUNT
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = DBLREV(GIND)
	REV3 = ZEXT(I1TEMP(3))      
	REV4 = ZEXT(I1TEMP(4))      
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),DBLREV(GIND),I4TEMP
	   DBLREV(GIND) = I4TEMP
 	ENDIF
C
	CALL MOVBYT(DBLREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C COUPLE
C
7000	CONTINUE
C
C FIGURE OUT HOW MANY NONE EMPTY ROWS THERE ARE TO BE SENT
C
        SEGNUM = 1
	EVTNUM1=0
	EVTNUM2=0
        DO I = 1,MAXCPLRW/2
           IF(CPLNMS(1,I,GIND).NE.BLANK) EVTNUM1=I
        ENDDO
        DO I = (MAXCPLRW/2)+1,MAXCPLRW
           IF(CPLNMS(1,I,GIND).NE.BLANK) EVTNUM2=I-MAXCPLRW/2
        ENDDO

	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	BUFIND = 1
	BUFIDX = 1
	COUNT=0
	NAME_LEN = CPLNMS_LEN - 2
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = SEGNUM
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = '80'X			!OPTION BYTE
        I1MESS(BUFIND) = IOR(I1MESS(BUFIND),'40'X)
	BUFIND = BUFIND + 1

	I1MESS(BUFIND) = CPLENM_LEN		!EVT1 NAM LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(CPLENM(1,1,GIND),1,WRKMES,BUFIND,CPLENM_LEN) !EVT1 NAM
        BUFIND = BUFIND + CPLENM_LEN
        CALL MOVBYT(CPLENM(1,1,GIND),1,BYTTAB,BUFIDX,CPLENM_LEN) !EVT1 NAM CHK
        BUFIDX = BUFIDX + CPLENM_LEN

	I1MESS(BUFIND) = CPLDES_LEN		!EVT1 DES LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(CPLDES(1,1,GIND),1,WRKMES,BUFIND,CPLDES_LEN) !EVENT 1 DES
        BUFIND = BUFIND + CPLDES_LEN
	!note that evt1 des chk is not done here, it is done later!

C CREATE FIRST MESSAGE
        I1MESS(BUFIND) = 0  ! no rows sent in the first segment
	BUFIND = BUFIND + 1

	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	   WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	   CALL GPAUSE
	ENDIF
        CALL FASTSET(BLANK,WRKMES(1),128)
	BUFIND = 1
	SEGNUM = SEGNUM + 1
	MESNUM = MESNUM + 1
	I1MESS(BUFIND) = SEGNUM
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = '80'X		        !OPTION  BYTE
        I1MESS(BUFIND) = IOR(I1MESS(BUFIND),'40'X)
	BUFIND = BUFIND + 1

	I1MESS(BUFIND) = CPLENM_LEN		!EVT2 NAM LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(CPLENM(1,2,GIND),1,WRKMES,BUFIND,CPLENM_LEN) !EVT2 NAM
        BUFIND = BUFIND + CPLENM_LEN
        CALL MOVBYT(CPLENM(1,2,GIND),1,BYTTAB,BUFIDX,CPLENM_LEN) !EVT2 NAM CHK
        BUFIDX = BUFIDX + CPLENM_LEN

	I1MESS(BUFIND) = CPLDES_LEN		!EVT2 DES LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(CPLDES(1,2,GIND),1,WRKMES,BUFIND,CPLDES_LEN) !EVT2 DES
        BUFIND = BUFIND + CPLDES_LEN

        CALL MOVBYT(CPLDES(1,1,GIND),1,BYTTAB,BUFIDX,CPLDES_LEN) !EVT1 DES CHK
        BUFIDX = BUFIDX + CPLDES_LEN

        CALL MOVBYT(CPLDES(1,2,GIND),1,BYTTAB,BUFIDX,CPLDES_LEN) !EVT2 DES CHK
        BUFIDX = BUFIDX + CPLDES_LEN
C
C TEAM NAMES
C
	CNTIND=BUFIND
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = NAME_LEN		!TEAM NAME FIELD LENGTH
	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN		!LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT

C
C CHECK IF THERE IS ENOUGH SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
        IF(ENTITY_NUM.EQ.EVTNUM1+EVTNUM2.AND.
     *     MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
              ENTITY_NUM = ENTITY_NUM - 1
        ENDIF
C
C LOAD UP PLAYER NAMES , THAT IS ALL THAT ARE DEFINED 
C
	COUNT=0
	DO I = 1,MAXCPLRW/2+EVTNUM2

           IF(I.GT.EVTNUM1.AND.I.LE.MAXCPLRW/2) THEN
	      BUFIDX = BUFIDX + NAME_LEN   ! keep checksum same as terminal
              GOTO 100
	   ENDIF
	   CALL MOVBYT(CPLNMS(1,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	   BUFIND = BUFIND + NAME_LEN
	   CALL MOVBYT(CPLNMS(1,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	   BUFIDX = BUFIDX + NAME_LEN
	   COUNT = COUNT + 1
C
	   IF(MOD(COUNT,ENTITY_NUM).EQ.0.AND.I.NE.MAXCPLRW/2+EVTNUM2) THEN
	      I1MESS(CNTIND) = COUNT
	      COUNT = 0
	      OUTLEN = BUFIND - 1
	      CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	      IF(ST.NE.0) THEN
	         WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	         CALL GPAUSE
	      ENDIF
              CALL FASTSET(BLANK,WRKMES(1),128)
	      BUFIND = 1
	      SEGNUM = SEGNUM + 1
	      MESNUM = MESNUM + 1
	      I1MESS(BUFIND) = SEGNUM
	      BUFIND = BUFIND + 1
	      I1MESS(BUFIND) = 0			   !OPTION  BYTE
	      BUFIND = BUFIND + 1
	      CNTIND = BUFIND
      	      BUFIND = BUFIND + 1
      	      I1MESS(BUFIND) = NAME_LEN               !TEAM NAME FIELD LENGTH
      	      BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	      ENTITY_LEN = NAME_LEN		!LENGTH OF ONE SET OF NAMES
	      MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	      ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
              IF(ENTITY_NUM.EQ.EVTNUM1+EVTNUM2-I.AND.
     *           MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
                    ENTITY_NUM = ENTITY_NUM - 1
              ENDIF
	   ENDIF
100        CONTINUE
	ENDDO

C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	I1MESS(2) = I1MESS(2) + '20'X	!TEXT REV OPTION
	I1MESS(CNTIND) = COUNT
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = CPLREV(GIND)
	REV3 = ZEXT(I1TEMP(3))      
	REV4 = ZEXT(I1TEMP(4))      
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),CPLREV(GIND),I4TEMP
	   CPLREV(GIND) = I4TEMP
 	ENDIF
	CALL MOVBYT(CPLREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	   WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	   CALL GPAUSE
	ENDIF
	RETURN
C
C SUPERSCORE GAMES
C
8000    CONTINUE
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	SEGNUM = 1
	BUFIND = 1
	CALL FASTMOV(BLANK,WRKMES(1),128)

	EV_ACT = 0 ! NUMBER OF SETS ACTIVE...
        DO J=1,3
           IF(SSCEST(J,GIND).EQ.GAMOPN) EV_ACT=EV_ACT+1
        ENDDO
	I4TEMP = EV_ACT
	I1MESS(BUFIND) = I1TEMP(1)
	BUFIND = BUFIND + 1

	EMPTY = .TRUE.

	DO I=1, SSDES_LEN/4
	   IF (SSCDES(I,GIND).NE.BLANK) EMPTY = .FALSE.
	ENDDO

        IF(EMPTY) THEN
	   I1MESS(BUFIND) = 0	 		!OPTION BYTE
	   BUFIND = BUFIND + 1
	ELSE
	   I1MESS(BUFIND) = '40'X	 	!OPTION BYTE
	   BUFIND = BUFIND + 1

	   I1MESS(BUFIND) = SSDES_LEN      !LENGTH IN BYTES OF DESCRIPTION FIELD
	   BUFIND = BUFIND + 1
	   CALL MOVBYT(SSCDES(1,GIND),1,WRKMES,BUFIND,SSDES_LEN)  !DECRIPTION
	   BUFIND = BUFIND + SSDES_LEN
	ENDIF

	NAME_LEN = SSNMS_LEN
	I1MESS(BUFIND) = NAME_LEN       !LENGTH IN BYTES OF MASTER EVENT NAME
	BUFIND = BUFIND + 1
	CALL MOVBYT(SSCMNM(1,GIND),1,WRKMES,BUFIND,NAME_LEN)  !MASTER EVENT NAME
	BUFIND = BUFIND + NAME_LEN
C
	DO I=1,EV_ACT
	    I1MESS(BUFIND) = NAME_LEN       !LENGTH IN BYTES OF SET 1 NAME
	    BUFIND = BUFIND + 1
	    CALL MOVBYT(SSCSNM(1,I,GIND),1,WRKMES,BUFIND,NAME_LEN)  !SET 1-3 NAME
	    BUFIND = BUFIND + NAME_LEN
	ENDDO
C
C CALCULATE THE CHECKSUM...
C
	BUFIDX = 1
	CALL MOVBYT(SSCDES(1,GIND),1,BYTTAB,BUFIDX,SSDES_LEN)
	BUFIDX = BUFIDX + SSDES_LEN
	CALL MOVBYT(SSCMNM(1,GIND),1,BYTTAB,BUFIDX,SSNMS_LEN)  
	BUFIDX = BUFIDX + SSNMS_LEN
	CALL MOVBYT(SSCSNM(1,1,GIND),1,BYTTAB,BUFIDX,3*SSNMS_LEN) 
	BUFIDX = BUFIDX + 3*SSNMS_LEN
C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = SSCREV(GIND)
	REV3 = ZEXT(I1TEMP(3))
	REV4 = ZEXT(I1TEMP(4))
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV4 = TSUM
	   REV3 = REV3 + 1
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),SSCREV(GIND),I4TEMP
	   SSCREV(GIND) = I4TEMP
	ENDIF
C
	CALL MOVBYT(SSCREV(GIND),3,WRKMES,BUFIND,2)    !REV NUMBER
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C TODAY'S TRIPLE
C
9000	CONTINUE
C
C FIGURE OUT HOW MANY NONE EMPTY ROWS THERE ARE TO BE SENT
C SET VALUES FOR OPTION BYTES
C
	EVTNUM=TRPRWS(1,GIND)+TRPRWS(2,GIND)+TRPRWS(3,GIND)

        CALL FASTSET(0,TRPOPT,10)
        CALL FASTSET(5,USDLEN,10)    ! 5 top bytes of a segment used for header
	SEGNUM = 1
C
C RESERVE SPACE FOR AT LEAST 1 COMPETITOR
C
	USDLEN(SEGNUM)=USDLEN(SEGNUM)+1+TRPNMS_LEN
C
C Descriptions 1-3
C

	DO I=1,3
	   DES_LEN(I) = TRPDES_LEN
           DO J=TRPDES_LEN/4,1,-1
              IF(TRPDES(J,I,GIND).EQ.BLANK) THEN
		 DES_LEN(I) = DES_LEN(I) - 4
	      ELSE
                 GOTO 9001
	      ENDIF		
           ENDDO
9001	   CONTINUE 
	   IF(DES_LEN(I).GT.0) THEN
             IF(DES_LEN(I)+USDLEN(SEGNUM).GT.MAXMSG) SEGNUM = SEGNUM + 1
	     TRPOPT(SEGNUM) = IBSET(TRPOPT(SEGNUM),8-I) ! '80'X,'40'X,'20'X
	     USDLEN(SEGNUM) = USDLEN(SEGNUM) + 1 + DES_LEN(I)
	   ENDIF
	ENDDO
C
C Master event name
C
        MASTER=TRPENM_LEN
        DO I=TRPENM_LEN/4,1,-1
            IF(TRPMNM(I,GIND).EQ.BLANK) THEN
	         MASTER=MASTER-4
	    ELSE
                 GOTO 9130
            ENDIF
        ENDDO
9130    CONTINUE
	IF(MASTER.GT.0) THEN
           IF(MASTER+USDLEN(SEGNUM).GT.MAXMSG) SEGNUM = SEGNUM + 1
           TRPOPT(SEGNUM)=IOR(TRPOPT(SEGNUM),'10'X)
	   USDLEN(SEGNUM)=USDLEN(SEGNUM)+1+MASTER
	ENDIF
C
C Event 1-3 names.
C
	DO I = 1,3
          EV_LEN(I)=TRPENM_LEN
          DO J=TRPENM_LEN/4,1,-1
             IF(TRPENM(J,I,GIND).EQ.BLANK) THEN
	         EV_LEN(I)=EV_LEN(I)-4
	      ELSE
                 GOTO 9140
             ENDIF
          ENDDO
9140      CONTINUE
	  IF(EV_LEN(I).GT.0) THEN
	    IF(EV_LEN(I)+USDLEN(SEGNUM).GT.MAXMSG) SEGNUM = SEGNUM + 1
            TRPOPT(SEGNUM)=IBSET(TRPOPT(SEGNUM),4-I)
	    USDLEN(SEGNUM)=USDLEN(SEGNUM)+1+EV_LEN(I)
	  ENDIF
	ENDDO
C
C ALL SEGMENTS 
C
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)-1
	SEGNUM = 0
	ALREADY_GONE = 0    ! HOW MANY TEAM NAMES ALREADY IN PREVIOUS SEGMENT
9500	CONTINUE
	SEGNUM = SEGNUM + 1
	MESNUM = MESNUM + 1
	BUFIND = 1
	NAME_LEN = TRPENM_LEN
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = SEGNUM               
	BUFIND = BUFIND + 1

	I1MESS(BUFIND) = TRPNMS_LEN		!ROW FIELD LENGTH
	BUFIND = BUFIND + 1
	COUNT=0

        I4TEMP = TRPOPT(SEGNUM)
	I1MESS(BUFIND) = I1TEMP(1)           !OPTION BYTE
	BUFIND = BUFIND + 1
C
C Put descriptions...
C
	DO I=1,3
          IF(BTEST(TRPOPT(SEGNUM),8-I)) THEN
	    I1MESS(BUFIND) = DES_LEN(I)		!EVENT A DESCRIPTION LENGTH
	    BUFIND = BUFIND + 1
            CALL MOVBYT(TRPDES(1,I,GIND),1,WRKMES,BUFIND,DES_LEN(I)) 
            BUFIND = BUFIND + DES_LEN(I)
          ENDIF
	ENDDO
C	
C Master event name..
C
        IF(IAND(TRPOPT(SEGNUM),'10'X).NE.0) THEN
	   I1MESS(BUFIND) = MASTER		!MASTER EVENT NAME LENGTH
	   BUFIND = BUFIND + 1
           CALL MOVBYT(TRPMNM(1,GIND),1,WRKMES,BUFIND,MASTER) !MASTER EVENT
           BUFIND = BUFIND + MASTER
	ENDIF
C
C Put event 1-3 names...
C
	DO I=1,3
          IF(BTEST(TRPOPT(SEGNUM),4-I)) THEN
	    I1MESS(BUFIND) = EV_LEN(I)		!EVENT 1-3 NAME LENGTH
	    BUFIND = BUFIND + 1
            CALL MOVBYT(TRPENM(1,I,GIND),1,WRKMES,BUFIND,EV_LEN(I))
            BUFIND = BUFIND + EV_LEN(I)
	  ENDIF
	ENDDO
C
C Put competitor names into segments...
C
	INMIXED = MIN(MAX(1,(MAXMSG-USDLEN(SEGNUM))/(TRPNMS_LEN+1)),
     *               EVTNUM-ALREADY_GONE)
	I1MESS(BUFIND) = INMIXED ! NUMBER OF COMPETITOR NAMES IN THIS SEGMENT
	BUFIND = BUFIND + 1
	COUNT = 0
	IF(EVTNUM.EQ.0) GOTO 9020
	DO I = 1,3
           DO 9010 J = 1,TRPRWS(I,GIND)
	      COUNT = COUNT + 1
	      IF(COUNT.LE.ALREADY_GONE) GOTO 9010
	      CALL MOVBYT(TRPNMS(1,J,I,GIND),1,WRKMES,BUFIND,TRPNMS_LEN)
	      BUFIND = BUFIND + TRPNMS_LEN
	      INMIXED = INMIXED - 1
	      ALREADY_GONE = ALREADY_GONE + 1
	      IF(ALREADY_GONE.EQ.EVTNUM) GOTO 9600
	      IF(INMIXED.EQ.0) GOTO 9020
9010	   CONTINUE 
	ENDDO
9020	CONTINUE
	OUTLEN = BUFIND - 1                  !NEW(SECOND) SEGMENT 
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	     WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	     CALL GPAUSE
	ENDIF
	GOTO 9500   ! GET THE NEXT SEGMENT...
9600	CONTINUE
C
C CALCULATE THE CHECKSUM OVER EVENT NAMES,CONTEST NAMES,
C CONTEST DESCRIPTION AND ROW NAMES.
C
	BUFIDX = 1
	CALL MOVBYT(TRPMNM(1,GIND),1,BYTTAB,BUFIDX,TRPENM_LEN)
	BUFIDX = BUFIDX + TRPENM_LEN
	CALL MOVBYT(TRPENM(1,1,GIND),1,BYTTAB,BUFIDX,3*TRPENM_LEN)
	BUFIDX = BUFIDX + 3*TRPENM_LEN
	CALL MOVBYT(TRPDES(1,1,GIND),1,BYTTAB,BUFIDX,3*TRPDES_LEN)
	BUFIDX = BUFIDX + 3*TRPDES_LEN
	CALL MOVBYT(TRPNMS(1,1,1,GIND),1,BYTTAB,
     *               BUFIDX,TRPNMS_LEN*MAXTRPRW*3)
	BUFIDX = BUFIDX + TRPNMS_LEN*MAXTRPRW*3
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
C
	I4TEMP = TRPREV(GIND)
	REV3 = ZEXT(I1TEMP(3))      
	REV4 = ZEXT(I1TEMP(4))      
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),TRPREV(GIND),I4TEMP
	   TRPREV(GIND) = I4TEMP
 	ENDIF
C
	CALL MOVBYT(TRPREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C SUPER TRIPLE
C
10000	CONTINUE
C
C FIGURE OUT HOW MANY NONE EMPTY ROWS THERE ARE TO BE SENT
C
	EVTNUM=0
        DO 10005 I = 1, MAXSTRRW
           IF(STRNMS(1,I,GIND).NE.BLANK) EVTNUM=I
10005   CONTINUE
C
C
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM = GAMTXT(GNUM)
	SEGNUM = 1
	BUFIND = 1
	BUFIDX = 1
	COUNT=0
	NAME_LEN = STRNMS_LEN - 2
	CALL FASTMOV(BLANK,WRKMES(1),128)
	I1MESS(BUFIND) = SEGNUM
	BUFIND = BUFIND + 1
C
	I1MESS(BUFIND) = '80'X			!OPTION BYTE
        I1MESS(BUFIND) = IOR(I1MESS(BUFIND),'40'X) 
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = STRENM_LEN		!EVENT FIELD LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(STRENM(1,GIND),1,WRKMES,BUFIND,STRENM_LEN) !EVENT NAME
        BUFIND = BUFIND + STRENM_LEN
        CALL MOVBYT(STRENM(1,GIND),1,BYTTAB,BUFIDX,STRENM_LEN)
        BUFIDX = BUFIDX + STRENM_LEN + 2        !pad for terminal checksum
	I1MESS(BUFIND) = STRDES_LEN		!EVENT DESCRIPTION LENGTH
	BUFIND = BUFIND + 1
        CALL MOVBYT(STRDES(1,GIND),1,WRKMES,BUFIND,STRDES_LEN) !EVENT DESCRIPTION
        BUFIND = BUFIND + STRDES_LEN
        CALL MOVBYT(STRDES(1,GIND),1,BYTTAB,BUFIDX,STRDES_LEN)
        BUFIDX = BUFIDX + STRDES_LEN
	CNTIND=BUFIND
	BUFIND = BUFIND + 1
	I1MESS(BUFIND) = NAME_LEN		!TEAM NAME FIELD LENGTH
	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
        IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *  MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
           ENTITY_NUM = ENTITY_NUM - 1
        ENDIF
C
C LOAD UP PLAYER NAMES , THAT IS ALL THAT ARE DEFINED 
C
	COUNT=0
	DO 10010 I = 1,EVTNUM                      
	CALL MOVBYT(STRNMS(1,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	BUFIND = BUFIND + NAME_LEN
	CALL MOVBYT(STRNMS(1,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
	BUFIDX = BUFIDX + NAME_LEN
	COUNT = COUNT + 1
C
C
	IF(MOD(COUNT,ENTITY_NUM).EQ.0.AND.COUNT.NE.EVTNUM) THEN
	   I1MESS(CNTIND) = COUNT
	   COUNT = 0
	   OUTLEN = BUFIND - 1
	   CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	   IF(ST.NE.0) THEN
	     WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	     CALL GPAUSE
	   ENDIF
           CALL FASTSET(BLANK,WRKMES(1),128)
	   BUFIND = 1
	   SEGNUM = SEGNUM + 1
	   MESNUM = MESNUM + 1
	   I1MESS(BUFIND) = SEGNUM
	   BUFIND = BUFIND + 1
	   I1MESS(BUFIND) = 0			   !OPTION  BYTE
	   BUFIND = BUFIND + 1
	   CNTIND = BUFIND
      	   BUFIND = BUFIND + 1
      	   I1MESS(BUFIND) = NAME_LEN               !TEAM NAME FIELD LENGTH
      	   BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	   ENTITY_LEN = NAME_LEN			!LENGTH OF ONE SET OF NAMES
	   MESLEN = MAXMSG - BUFIND - 1 - 6	!LENGTH TO USE FOR ENTITIES
C                                               !LESS CNTRL/SEQ,TYP/SUB,
C                                               !CHKSUM, GAM IND.
	   ENTITY_NUM = MESLEN / ENTITY_LEN	!# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR CONTROL AND REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
           IF(ENTITY_NUM.EQ.EVTNUM-I.AND.
     *     MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
              ENTITY_NUM = ENTITY_NUM - 1
           ENDIF
	ENDIF
10010	CONTINUE
C
C RECALCULATE TEXT CHECKSUM AND IF DIFFERENT STORE THE NEW ONE,
C THEN BUMP THE TEXT REVISION NUMBER.
C
	I1MESS(2) = I1MESS(2) + '20'X			!TEXT REV OPTION
C
	I1MESS(CNTIND) = COUNT
	BUFIDX = BUFIDX - 1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
	I4TEMP = STRREV(GIND)
	REV3 = ZEXT(I1TEMP(3))      
	REV4 = ZEXT(I1TEMP(4))      
	IF(REV4.NE.TSUM) THEN
	   WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
	   REV3 = REV3 + 1
	   REV4 = TSUM
	   I1TEMP(3) = REV3
	   I1TEMP(4) = REV4
           WRITE(6,940) IAM(),STRREV(GIND),I4TEMP
	   STRREV(GIND) = I4TEMP
 	ENDIF
C
	CALL MOVBYT(STRREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND = BUFIND + 2
	OUTLEN = BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
C RESULTS GAMES
C
11000	CONTINUE
	WRITE(6,900) IAM(),GAM,GTNAMES(GTYP),GIND
	MESNUM=GAMTXT(GNUM)
	BUFIND=1
	NAME_LEN = TGNMS_LEN - 2
	EVTNUM = TGLMAX(GIND)
	CALL FASTMOV(BLANK,WRKMES(1),128)
	SEGNUM=1
	CALL MOVBYT(SEGNUM,1,WRKMES,BUFIND,1)  !SEGMENT NUMBER
	BUFIND=BUFIND+1

	I1MESS(BUFIND) = TGEVN_LEN
	CALL MOVBYT(TGEVN_LEN,1,WRKMES,BUFIND,1)  !EVENT NAME LENGTH
	BUFIND=BUFIND+1

	CALL MOVBYT(TGLEVN(1,GIND),1,WRKMES,BUFIND,TGEVN_LEN)
	BUFIND=BUFIND+TGEVN_LEN

	I1MESS(BUFIND) = 0
	CNTIND = BUFIND
	BUFIND = BUFIND + 1
C***	I1MESS(BUFIND) = NAME_LEN	       !LENGTH IN BYTES OF NAMES
C***	BUFIND = BUFIND + 1
C
C FIGURE OUT HOW MANY NAMES WILL FIT IN ONE SEGMENT
C
	ENTITY_LEN = NAME_LEN*2 	       !LENGTH OF ONE SET OF NAMES
	MESLEN = MAXMSG - BUFIND -1 - 6	       !LENGTH TO USE FOR ENTITIES
C                                              !LESS CNTRL/SEQ,TYP/SUB,
C                                              !CHKSUM, GAM IND.
	ENTITY_NUM = MESLEN / ENTITY_LEN       !# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
	IF(ENTITY_NUM.EQ.EVTNUM.AND.
     *	MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
	   ENTITY_NUM = ENTITY_NUM - 1
	ENDIF
C
C LOAD UP TEAM NAMES
C
	COUNT=0
	DO 11020 I=1,TGLMAX(GIND)                     !FOR MAX TEAMS
	   DO 11010 J=1,2			     !FOR ALL TEAMS
	      IF(TGLNMS(1,J,I,GIND).EQ.0.OR.TGLNMS(1,J,I,GIND).EQ.BLANK)
     *	      TXTERR=1
	      CALL MOVBYT(TGLNMS(1,J,I,GIND),1,WRKMES,BUFIND,NAME_LEN)
	      BUFIND=BUFIND+NAME_LEN
11010	   CONTINUE
	   COUNT=COUNT+1
C
C
	   IF(MOD(I,ENTITY_NUM).EQ.0.AND.I.NE.TGLMAX(GIND)) THEN
	      I1MESS(CNTIND) = COUNT
	      COUNT = 0
	      OUTLEN = BUFIND - 1
	      CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	      IF(ST.NE.0) THEN
	         WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	         CALL GPAUSE
	      ENDIF
	      BUFIND=1
	      MESNUM=MESNUM+1
	      CALL FASTSET(BLANK,WRKMES(1),128)
	      SEGNUM=SEGNUM+1
	      CALL MOVBYT(SEGNUM,1,WRKMES,BUFIND,1)  !SEGMENT NUMBER
	      BUFIND=BUFIND+1
	      I1MESS(BUFIND) = 0	             !NUBER OF ROWS PLAYED ON
              CNTIND=BUFIND                          !REV 1.8
	      BUFIND = BUFIND + 1
C***	      I1MESS(BUFIND) = NAME_LEN		     !LENGTH IN BYTES OF EACH NAME
C***	      BUFIND = BUFIND + 1
	      ENTITY_NUM = MESLEN / ENTITY_LEN       !# ENTITIES IN ONE SEGMENT
C
C CHECK IF THERE IS ENOUGHT SPACE FOR REVISION #'S.
C IF NOT, MAKE ROOM BY SENDING ONE LESS IN THIS MESSAGE.
C
	      IF(ENTITY_NUM.EQ.EVTNUM-I.AND.
     *	      MOD(MESLEN,ENTITY_LEN).EQ.0) THEN
	         ENTITY_NUM = ENTITY_NUM - 1
	      ENDIF
C
	   ENDIF
11020	CONTINUE
C
        I1MESS(CNTIND)=COUNT  !REV 1.8
C
	IF(TXTERR.EQ.1) THEN
	  WRITE(6,920) IAM(),GTNAMES(GTYP),GIND
	  CALL YESNO(FLAG)
	  IF(FLAG.NE.1) STOP
	ENDIF
C
C CALCULATE CHECKSUM
C
	BUFIDX=1
	BYTTAB(BUFIDX)=TGLMAX(GIND)
	BUFIDX=BUFIDX+1

        CALL MOVBYT(TGLEVN(1,GIND),1,BYTTAB,BUFIDX,TGEVN_LEN)
        BUFIDX=BUFIDX+TGEVN_LEN

	DO I=1,TGGNBR
           DO J=1,2
              CALL MOVBYT(TGLNMS(1,J,I,GIND),1,BYTTAB,BUFIDX,NAME_LEN)
              BUFIDX=BUFIDX+NAME_LEN
           ENDDO
        ENDDO
        BUFIDX=BUFIDX-1
	CALL CHECKSUM(BYTTAB,0,BUFIDX,TSUM)
C
C NOW BUILD LAST SEGMENT WITH TEXT REVISION DATA.
C
        I4TEMP=TGLREV(GIND)
        REV3=ZEXT(I1TEMP(3))
        REV4=ZEXT(I1TEMP(4))
        IF(REV4.NE.TSUM) THEN
           WRITE(6,930) IAM(),(GLNAMES(S,GNUM),S=1,4)
           REV4=TSUM
           REV3=REV3+1
           I1TEMP(3)=REV3
           I1TEMP(4)=REV4
           WRITE(6,940) IAM(),TGLREV(GIND),I4TEMP
        ENDIF
 	TGLREV(GIND)=I4TEMP
C
	CALL MOVBYT(TGLREV(GIND),3,WRKMES,BUFIND,2)
	BUFIND=BUFIND + 2
	OUTLEN=BUFIND - 1
	CALL ADDMSG(MESNUM,CHRMES,OUTLEN,ST)
	IF(ST.NE.0) THEN
	  WRITE(6,910) IAM(),GTNAMES(GTYP),GIND,MESNUM
	  CALL GPAUSE
	ENDIF
	RETURN
C
900	FORMAT(1X,A,' Loading game number ',I2,1X,A8,1X,I1,
     *	       ' game text ')
910	FORMAT(1X,A,1X,A8,1X,I1,' Text load error for message ',I3)
920	FORMAT(1X,A,1X,A8,1X,I1,' Text not entered! Continue (Y/N) ')
930	FORMAT(1X,A,1X,4A4,'- Recalculation of text checksum performed')
940	FORMAT(1X,A,1X,'Old: ',Z8.8,' New: ',Z8.8)
	END
