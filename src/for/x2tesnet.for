C
C PROGRAM X2TESNET
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2TESNET.FOV                                 $
C  $Date::   17 Apr 1996 16:38:36                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - x2tesnet.for;1 **
C
C X2TESNET.FOR
C
C V01 01-AUG-90 XXX RELEASED FOR VAX
C V02 02-SEP-93 MBK MULTIPLE PORTS
C V03 12-DEC-94 DAS Integrate UK changes into X2X Baseline
C
C This program will build a test network for the X2X Distributed
C Network System.
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	PROGRAM X2TESNET
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2XSTN.DEF'
	INCLUDE 'INCLIB:X2XTER.DEF'
	INCLUDE 'INCLIB:X2XSPC.DEF'
	INCLUDE 'INCLIB:X2XSCL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
	INCLUDE 'INCLIB:PRMAGT.DEF'
C
	INTEGER*2   DATBUF(12)      !Date buffer
	INTEGER*4   SYSDATE(3)      !System date
	INTEGER*4   DRP, EXSREC, SREC, ANS, STN, ST, REPLACE
	INTEGER*4   DROP, PORT, GROUP, STNCLS, STNADR
	INTEGER*4   ENDSTN, EXT, BEGSTN, TERPERSTN, TER, I, IDROP
	INTEGER*4   START_PVC_PORT,BEGPORT,STARTTER,NUMPORTS
	INTEGER*4   THISCNT,STNTER,TERPERPORT,IPORT
	INTEGER*4   MAXTERPERSTN,MAXTERPERPORT,DNIC,BROENA,STYPE
	CHARACTER   PROMPT*60       !Output prompt
	CHARACTER   NULL*60         !Null string
	CHARACTER   NULLEQV(60)*1   !Null string
	CHARACTER   X2FILNAM*20     !File name function
	CHARACTER   NEWDROP*2	    !Drop address
	LOGICAL     STNUPD          !Update station flag
	LOGICAL     NEWSTN          !New station flag
C
	DATA        TERPERSTN  /0/
	DATA        NULLEQV /60*Z00/
	EQUIVALENCE (NULL,NULLEQV)
C
	CALL COPYRITE
C
C CLEAR SCREEN AND DISPLAY TITLE.
C
	CALL CLRSCR(5)
	WRITE(5,9050)
C
C PROMPT FOR INPUT DATA.
C
        CALL INPNUM('Enter beginning station:... ',BEGSTN,1,
     *               X2X_STATIONS,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter ending station:...',ENDSTN,BEGSTN,
     *	             X2X_STATIONS,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter starting station address:...',STNADR,1,
     *	             99999999,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter network DNIC:.....',DNIC,1,
     *	             9999,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter station class:...',STNCLS,1,
     *               X2XC_CLASSES,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter station type:...',STYPE,0,3,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter station broena flag:...',BROENA,0,1,
     *               EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter starting group:...',GROUP,0,
     *               X2X_NUM_GROUPS,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter first station port number:...',BEGPORT,1,
     *               X2X_MAXPORT,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter number of terminals per port:...',
CX     *               TERPERPORT,0,X2X_MAXTERMS,EXT)
     *               TERPERPORT,0,32,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter MAX number of terminals per port:...',
CX     *               MAXTERPERPORT,0,X2X_MAXTERMS,EXT)
     *               MAXTERPERPORT,0,32,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter starting PVC port:...',START_PVC_PORT,
     *               0,99999,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
C	CALL WIMG(5,'Enter drop address:............')
C	READ(5,50) CDROP
C50	FORMAT(1A)
C	DROP=ICHAR(CDROP)-63
C
	CALL INPNUM('Enter starting terminal number:...',STARTTER,
     *               0,99999,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter number of terminals per station:...',
CX     *               TERPERSTN,1,X2X_MAXPORT*X2X_MAXTERMS,EXT)
     *               TERPERSTN,1,32,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL INPNUM('Enter MAX number of terminals per station:...',
CX     *               MAXTERPERSTN,1,X2X_MAXPORT*X2X_MAXTERMS,EXT)
     *               MAXTERPERSTN,1,32,EXT)
	IF(EXT.LT.0) CALL GSTOP(GEXIT_OPABORT)
C
	CALL WIMG(5,'Auto replace existing data: y/n')
	CALL YESNO(REPLACE)
	WRITE(5,*)
C
C OPEN THE STATION FILE.
C
	CALL OPENX(2,X2FILNAM(XSTN),4,0,0,ST)
	CALL IOINIT(X2XSTN_FDB,2,X2XSTN_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSTN),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C OPEN THE TERMINAL FILE.
C
	CALL OPENX(3,X2FILNAM(XTER),4,0,0,ST)
	CALL IOINIT(X2XTER_FDB,3,X2XTER_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XTER),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C OPEN THE STATION PORT CONFIGURATION FILE.
C
	CALL OPENX2X(X2FILNAM(XSPC),4)
C
C OPEN THE STATION CLASS FILE.
C
	CALL OPENX(10,X2FILNAM(XSCL),4,0,0,ST)
	CALL IOINIT(X2XSCL_FDB,10,X2XSCL_SECT*256)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSCL),'OPENX',ST,0)
	  CALL GPAUSE
	ENDIF
C
C DETERMINE THE CDC DATE FROM THE SYSTEM DATE.
C
	CALL XDAT(SYSDATE)
	DATBUF(VYEAR)=SYSDATE(1)
	DATBUF(VMON)=SYSDATE(2)
	DATBUF(VDAY)=SYSDATE(3)
	CALL BDATE(DATBUF)
C
	STNTER=STARTTER
C
C READ THE NEXT RECORD FROM THE BLD FILE.
C
	DO 100 STN=BEGSTN,ENDSTN
C
C ================== STATION FILE UPDATE ==================
C
C READ THE STATION RECORD - IF IT DOES NOT EXIST, CREATE IT.
C
	CALL READW(X2XSTN_FDB,STN,X2XSTN_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSTN),'READW',ST,STN)
	  CALL GPAUSE
	ENDIF
C
C IF AN EXISTING STATION ASK THE USER WHETHER THEY WISH TO
C UPDATE WITH THE NEW INPUT STATION PARAMETERS.
C
	STNUPD=.TRUE.
	NEWSTN=.TRUE.
	IF(X2XSTN_REC(1).GT.0.AND.REPLACE.NE.1) THEN
	  PROMPT=NULL
	  WRITE (PROMPT,9000) STN
	  CALL WIMG(5,PROMPT)
	  CALL YESNO(ANS)
	  IF(ANS.EQ.3) GOTO 100
	  IF(ANS.NE.1) STNUPD=.FALSE.
	  NEWSTN=.FALSE.
	ENDIF
C
C READ THE STATION CLASS RECORD TO OBTAIN THE DEFAULT VALUES.
C IF CLASS DOES NOT EXIST, DISPLAY A WARNING AND SKIP THE RECORD.
C
	IF(STNUPD) THEN
	  CALL READW(X2XSCL_FDB,STNCLS,X2XSCL_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XSCL),'READW',ST,STNCLS)
	    CALL GPAUSE
	  ENDIF
	  IF(X2XSCL_REC(1).LE.0) THEN
	    WRITE(5,9030) STN, STNCLS, CHAR(7)
	    GOTO 100
	  ENDIF
	  CALL X2TES_UPDSTN(STN,STNADR,STNCLS,GROUP,START_PVC_PORT,
     *                      BROENA,STYPE,DNIC,X2XSCL_REC)
	  START_PVC_PORT=START_PVC_PORT+1
	  STNADR=STNADR+1
C
C REWRITE THE STATION RECORD.
C
	  CALL WRITEW(X2XSTN_FDB,STN,X2XSTN_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XSPC),'WRITEW',ST,SREC)
	    CALL GPAUSE
	  ENDIF
C
C DISPLAY MESSAGE INFORMING OF UPDATE.
C
	  IF(NEWSTN) THEN
	    WRITE(5,9010) STN
	  ELSE
	    WRITE(5,9012) STN
	  ENDIF
	ENDIF
C
C HOW MANY PORTS FOR THIS STATION ?
C
	IF(TERPERPORT.EQ.0)TERPERPORT=X2X_MAXTERMS
	NUMPORTS=(TERPERSTN-1)/TERPERPORT+1
C
	IF(STARTTER.EQ.0) THEN
	   STNTER=(STN-1)*MAXTERPERSTN+1
	ENDIF
C
C ================== TERMINAL FILE UPDATE ==================
C
C READ THE TERMINAL RECORD.
C
	DO 120 I=1,TERPERSTN
	  PORT = (I-1)/TERPERPORT+1
	  TER = STNTER+(PORT-1)*MAXTERPERPORT+MOD(I-1,TERPERPORT)
C
	  IF(TER.LT.1.OR.TER.GT.NUMAGT) THEN
	    WRITE (5,9070) TER,STN
9070 	    FORMAT(1X,'Illegal ter #: ',I5,' skipping station:',I5)
	    STNTER=1
	    GOTO 125
	  ENDIF
C
	  CALL READW(X2XTER_FDB,TER,X2XTER_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XTER),'READW',ST,TER)
	    CALL GPAUSE
	  ENDIF
C
C IF AN EXISTING TERMINAL, ASK THE USER WHETHER THEY WISH TO
C MODIFY IT.
C
	  IF(X2XTER_REC(1).GT.0.AND.REPLACE.NE.1) THEN
	    PROMPT=NULL
	    WRITE (PROMPT,9005) TER
	    CALL WIMG(5,PROMPT)
	    CALL YESNO(ANS)
	    IF(ANS.NE.1) GOTO 120
	  ENDIF
C
C UPDATE THE TERMINAL FILE.
C
	  X2XTER_TER=TER
	  X2XTER_STN=STN
	  X2XTER_PORT=(BEGPORT-1)+(I-1)/TERPERPORT+1
	  IDROP=MOD(I-1,TERPERPORT)+1
	  IF(IDROP.LE.30) THEN
	    X2XTER_DROP=CHAR(IDROP+63)
	  ELSE IF(IDROP.LT.94) THEN
	    X2XTER_DROP(1:1)='^'
	    X2XTER_DROP(2:2)=CHAR(IDROP+63-30)
	  ELSE
	    X2XTER_DROP(1:1)='%'
	    X2XTER_DROP(2:2)=CHAR(IDROP+63-94)
	  ENDIF
	  X2XTER_STATE=X2XTS_DEFINED
	  X2XTER_UPDATE=DATBUF(VCDC)
	  X2XTER_BITMAP=0
	  X2XTER_BITMAP2=0
C
C REWRITE THE TERMINAL RECORD.
C
	  CALL WRITEW(X2XTER_FDB,TER,X2XTER_REC,ST)
	  IF(ST.NE.0) THEN
	    CALL OS32ER(5,X2FILNAM(XTER),'READW',ST,STN)
	    CALL GPAUSE
	  ENDIF
120	CONTINUE
C
	STNTER=STNTER+MAXTERPERSTN
125	CONTINUE
C
	DO 150 IPORT=1,NUMPORTS
	PORT=BEGPORT+IPORT-1
	IF(PORT.GT.X2X_MAXPORT) GOTO 150
C
C ================== STATION PORT UPDATE ==================
C
	CALL X2FNDSPC(STN,PORT,ST,SREC,EXSREC)
C
C IF STATION PORT DOES NOT EXIST, CREATE IT.
C
	IF(ST.NE.-1) THEN
    	  X2XSPC_STN=STN
	  X2XSPC_PORT=PORT
	  X2XSPC_TERCNT=X2X_MAXTERMS
	ENDIF
C
C UPDATE THE STATION PORT RECORD.
C
	IF(IPORT.EQ.NUMPORTS) THEN
	    THISCNT=TERPERSTN-(IPORT-1)*TERPERPORT
	ELSE
	    THISCNT=TERPERPORT
	ENDIF
C
	DO 130 DROP=1,THISCNT
	  IF(DROP.GE.1 .AND. DROP.LE.X2X_MAXTERMS) THEN
	    IF(DROP.LE.30) THEN
	      NEWDROP=CHAR(DROP+63)
	    ELSE IF(DROP.LT.94) THEN
	      NEWDROP(1:1)='^'
	      NEWDROP(2:2)=CHAR(DROP+63-30)
  	    ELSE
  	      NEWDROP(1:1)='%'
	      NEWDROP(2:2)=CHAR(DROP+63-94)
	    ENDIF
	    X2XSPC_TERCNT=THISCNT
	    X2XSPC_DROPS(DROP)=NEWDROP
	  ELSE
	    WRITE(5,9020) STN, TER
	    GOTO 130
	  ENDIF
 	  WRITE(5,9060) X2XSPC_STN, X2XSPC_PORT, X2XSPC_DROPS(DROP)
130	CONTINUE
	X2XSPC_UPDATE=DATBUF(VCDC)
	X2XSPC_BITMAP=0
	X2XSPC_BITMAP2=0
C
C STRIP OUT ANY NULLS FROM THE DROP TABLE.
C
	DO 210 DRP=1,X2X_MAXTERMS
	  IF(X2XSPC_DROPS(DRP).LE.'  ') X2XSPC_DROPS(DRP)=' '
210	CONTINUE
C
C REWRITE THE STATION PORT RECORD.
C
	CALL WRITX2X(4,SREC,X2XSPC_REC,ST)
	IF(ST.NE.0) THEN
	  CALL OS32ER(5,X2FILNAM(XSPC),'WRITEW',ST,SREC)
	  CALL GPAUSE
	ENDIF
C
150	CONTINUE
C
100	CONTINUE
C
C PROGRAM EXIT.
C
	CALL CLOSX2X(4)
	CALL CLOSEFIL(X2XSTN_FDB)
	CALL CLOSEFIL(X2XTER_FDB)
	CALL CLOSEFIL(X2XSCL_FDB)
	CALL USRCLOS1(6)
C
C     ===================== Format Statements ======================
C
9000	FORMAT(1X,'Station ',I5,' already exists - update it [Y/N/E] ')
9005	FORMAT(1X,'Terminal ',I5,' already exists - update it [Y/N] ')
9010	FORMAT(1X,'Station ',I5,' has been created ')
9012	FORMAT(1X,'Station ',I5,' has been updated ')
9020	FORMAT(1X,'Station ',I5,' Ter ',I5,'- bad drop /rec skipped')
9030	FORMAT(1X,'Station ',I5,' Unknown station class ',I5,A)
9050	FORMAT(//,T26,'GTECH Distributed Network',/,
     *	          T28,'Build Test Network',//)
9060	FORMAT(1X,'Station ',I5,' Port ',I2,' Drop ',A2,
     *	          ' has been added')
	END
