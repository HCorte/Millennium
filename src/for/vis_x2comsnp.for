C
C SUBROUTINE X2COMSNP
C
C*************************** START X2X PVCS HEADER ****************************
C
C  $Logfile::   GXAFXT:[GOLS]X2COMSNP.FOV                                 $
C  $Date::   17 Apr 1996 16:14:26                                         $
C  $Revision::   1.0                                                      $
C  $Author::   HXK                                                        $
C
C**************************** END X2X PVCS HEADER *****************************
C
C ** Source - vis_x2comsnp.for **
C
C X2COMSNP.FOR
C
C V06 28-FEB-96 wsm Rearranged order of VISCOM.DEF,AGTINF.DEF, changed to I8.8
C                   agent # display, ADR_DISP_LEN=5 for Finland.
C
C V05 14-SEP-94 GPR ADD SUBNETWORK, BCST, SAP
C V04 22-AUG-94 GPR USE BAUD FROM STATION CLASS
C V03 18-AUG-94 GPR MODIFY TO HANDLE XADR
C V02 03-FEB-94 GPR USE I5 FORMAT FOR STATION AND TERMINAL TYPE-OUTS
C V01 01-DEC-91 DAS RELEASED FOR VAX (NETHERLANDS)
C
C
C     X2COMSNP.FTN
C     ____________
C
C     ALL STATION COMM STATUS SNAPSHOT
C     THIS SNAPSHOT DISPLAYS:
C        STATION STATE (CONNECTED, INITIALIZED, DISABLED)
C        TERMINAL STATUSES (ACTIVE, DISABLED)
C        DELAYS FOR LAST TRANSACTION FOR EACH TERMINAL
C        NO OF TRANSACTIONS FROM EACH STATION
C        TIME SINCE LAST TRANSACTION FOR EACH TERMINAL
C        NO OF DELIVERY ERRORS FOR EACH STATION
C        NO OF DELIVERY ACKS FOR EACH STATION
C        NO OF UPLINE HELP REQUESTS (RESETS) FOR EACH STATION
C        NO OF TIMES STATIONS OR TERMINALS CHANGED STATUS:
C           X.25 TERMINALS NO OF TIMES STATION DISCONNECTED
C           FOR POLLING STATION NO OF TIMES EACH TERMINAL CHANGED
C               POLLING STATUS
C
C        DISPLAY ARE ACCUMULATIVE FOR THE DAY, NO OF STATION
C        TRANSACTIONS, NO OF ACKS, NO OF RESETS ARE ALSO FOR
C        2 LATEST TIME INTERVALS AS DEFINED IN X2GBLMEN
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1994 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE X2COMSNP(CLINE)
C
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:X2XCOM.DEF'
	INCLUDE 'INCLIB:X2VIS.DEF'
	INCLUDE 'INCLIB:AGTCOM.DEF'
        INCLUDE 'INCLIB:AGTINF.DEF'					    !V05
	INCLUDE 'INCLIB:VISCOM.DEF'
C
	INTEGER*4   CLINE(*)
	CHARACTER*1 SPACE/' '/,NOT_INIT/'N'/
	CHARACTER*1 BCST_CONNECTED/'B'/,BCST_NOT_CONNECTED/'b'/		    !V05
	CHARACTER*1 ACTIVE_CONNECTED/'X'/,SLOW_POLL_CONNECTED/'O'/
        CHARACTER*1 ACTIVE_DISCONNECTED/'x'/
        CHARACTER*1 SLOW_POLL_DISCONNECTED/'o'/
	CHARACTER*1 DISABLE/'d'/,DISABLE_CONNECTED/'D'/
	CHARACTER*1 DISP_TAB(100)/100*' '/ !MORE THAN ACTUAL DISPLAYED DATA
	CHARACTER*1 DISP_CHAR
	INTEGER*4 ADR_DISP_LEN		!Length of adress to display
	PARAMETER (ADR_DISP_LEN=5)
	INTEGER*4 SSTR			!Start of string for Snet/Addr
	PARAMETER (SSTR=7)
	INTEGER*4 ESTR			!End of string for Snet/Addr
	PARAMETER (ESTR=10)
        INTEGER*4 MAX_LIN
	PARAMETER (MAX_LIN=15)          !SO MANY LINE TO DISPLAY
        INTEGER*4 MAX_COL
	PARAMETER (MAX_COL=68)          !SO MANY COLUMNS TO DISPLAY
	LOGICAL STN_INIT                !.TRUE. IF STATION INITIALISE
	LOGICAL STN_DISABLE             !.TRUE. IF STATION DISABLED
	LOGICAL CONNECTED               !TRUE IF STATION CONNECTED
	LOGICAL CHK_CONNECTION          !TRU IF SHOUL CHECK CONN STAT
	LOGICAL CHK_TOT /.FALSE./	!TRUE IF XTOT ENTERED
	LOGICAL CHK_SAP /.FALSE./       !TRUE IF SHOULD SHOW SAP	    !V05
	LOGICAL CHK_BCST /.FALSE./      !TRUE IF SHOULD SHOW BCST	    !V05
	LOGICAL DISP_SUB /.FALSE./	!Display subnetwork		    !V05
	LOGICAL FOUND /.FALSE./		!Found station for ordered	    !V05
	INTEGER*4 STN			!STATION #
	INTEGER*4 CLASS			!STATION CLASS			    !V04
	INTEGER*4 SUBNET		!Subnetwork			    !V05
	INTEGER*4 SELECTED_SUBNET	!Selected Subnetwork		    !V05
	INTEGER*4 LSTSUB		!Last Selected Subnetwork	    !V05
	DATA	  LSTSUB  / ALLIDX /					    !V05
	INTEGER*4 STATION_NO,FIRST_STATION
	INTEGER*4 I4_SPACES /'    '/
	INTEGER*4 DISP_SAP						    !V05
	CHARACTER*1 DROPS(X2X_MAXTERMS) !Drops displayed
	CHARACTER*9 STATE_TAB(0:3)/'not conf ','not init ','active ',
     *	                           'disabled '/
	INTEGER*4 INIT_TAB(0:ALLIDX,0:3)    !NUM OF STN INIT E.T.C.	    !V05
	CHARACTER*1 DELAY_ZERO /'*'/,DELAY_NOT_INIT/'-'/
	INTEGER*4 REQUEST
	INTEGER*4 LAST_DELAYIND						    !V05
        INTEGER*4 CHK_STATUS, CHK_DELAY, CHK_TRANS
        INTEGER*4 CHK_TIME, CHK_ERROR, CHK_RESET
        INTEGER*4 CHK_ACK, CHK_STATE_CHG, GET_POSITION
        INTEGER*4 SWITCH_ORDER, SWITCH_MODE, SHOW_TERMINAL
        INTEGER*4 SHOW_SUBNET						    !V05
        INTEGER*4 SHOW_BCST						    !V05
        INTEGER*4 SHOW_SAP						    !V05
	INTEGER*4 SHOW_TOT
	PARAMETER (CHK_STATUS=0)	!CHK STATUS
	PARAMETER (CHK_DELAY=1)		!CHECK_DELAY
	PARAMETER (CHK_TRANS=2)		!NO OF TRANS
	PARAMETER (CHK_TIME=3)		!TIME LAST ACTIVE
	PARAMETER (CHK_ERROR=4)		!DELIVERY ERROR COUNT
	PARAMETER (CHK_RESET=5)		!# OF RESETS
	PARAMETER (CHK_ACK=6)		!# OF DELIVERY ACKS
	PARAMETER (CHK_STATE_CHG=7)	!STATE CHANGE
	PARAMETER (GET_POSITION=8)	!DISPLAY STATION AT POSITION
	PARAMETER (SWITCH_ORDER=9)	!TO TOGLE BETWEEN SEQUENTIAL AND
C**   					!AND ORDERED BY ADDRESS DISPLAY
	PARAMETER (SWITCH_MODE=10)	!TO TOGLE BETWEEN LAST PERIOD
C**   					!AND TOTAL STATISTICS
	PARAMETER (SHOW_TERMINAL=11)	!SHOW FROM TERMINAL
	PARAMETER (SHOW_SUBNET=12)	!SHOW SUBNETWORK		    !V05
	PARAMETER (SHOW_BCST=13)	!TO SHOW BCST STATS		    !V05
	PARAMETER (SHOW_SAP =14)	!TO SHOW SAP CONNECTED		    !V05
	PARAMETER (SHOW_TOT =15)	!SHOW # OF TERMS WITH ERRS, RESETS, ...
        INTEGER*4 NUM_KEYS
        PARAMETER (NUM_KEYS=15)         !NUMBER OF KEYS
	REAL*8 KEY_NAME(0:NUM_KEYS)
	DATA   KEY_NAME /'XSTAtus ','XDELay  ','XTRAns  ','XTIMe',
     *	                 'XERR    ','XRESet  ','XACK    ','XSTChg  ',
     *	                 'XPOS    ','XORDer  ','XMODe   ','XTERm   ',	    !V05
     *			 'XSNE    ','XBCSt   ','XSAP    ','XTOT    '/	    !V05
	CHARACTER*20 DISP_TYPE(0:7)	!SCREEN TITLE			    !V05
	DATA DISP_TYPE /'Terms Status ','Terms Delay ',			    !V05
     *	      'Trans for Stns','Term Time Since Last',			    !V05
     *	      'Errors for Stns','Resets for Stns',			    !V05
     *	      'Del Acks for Stns','Term State Changes'/			    !V05
C
	INTEGER*4 LAST_REQUEST/0/,LAST_STATION_NO/1/,LAST_POSITION/1/
	INTEGER*4 LAST_STATION/0/
	INTEGER*4 LAST_START_DISPLAY/0/
	INTEGER*4 LEAD_STN/0/
        INTEGER*4 POS, POSITION, ORDER, MODE, VALUE, STATE
        INTEGER*4 TERMINAL_NO, LIN_IDX, COL_IDX, FIRST_LIN
        INTEGER*4 STATUS,SAP,I, J					    !V05
	INTEGER*4 TOT_CONNECTED(0:ALLIDX)				    !V05
	INTEGER*4 CONF(0:ALLIDX)					    !V05
        INTEGER*4 DISPLAY_SET, LAST_STN, NEXT_STN, PORT
        INTEGER*4 TERMS, ADR_LEN, ERR, TERM, TERM_STATE
        INTEGER*4 DELAY, NO_TRANS, TIME, CNT1, CNT2, BAUD
        INTEGER*4 DWNTER, TERCNT, FIRSTDROP, STN_STATE, TER
        INTEGER*4 AN, TERM_NO
	LOGICAL DISPLAY_POSITION
	INTEGER*4 DISP_STATION/1/,LAST_ORDER/0/,LAST_MODE/0/
	CHARACTER CHRSTR(LXADR)*1                !ASCII address		!V05
	CHARACTER*7 DISPLAY_MODE
C
C     WE SHOULD DISPLAY POSITION IN VARIABLE RECORD 
C     FORTRAN DOES NOT SUPPORT IT VERY WELL, WE WILL BE CHANGING
C     POSITION IN I2_FORMAT_POSITIN(3) TO MARK # OF SPACES SKIPPED
C
	CHARACTER*4  ADDR_STR						!V05
	PARAMETER    (ADDR_STR='Addr')					!V05
	CHARACTER*4  SNET_STR						!V05
	PARAMETER    (SNET_STR='Snet')					!V05
	CHARACTER*5  ALLSTR			!ALL literal            !V05
	PARAMETER    (ALLSTR='ALL')					!V05
	CHARACTER*3  TEMPSTR			!String for write       !V05
	CHARACTER*1  MARKER						!V05
	PARAMETER    (MARKER='!')					!V05
	LOGICAL GET_TERMINAL
C
	CALL FASTSET(I4_SPACES,NEW(1,1),22*20) !INIT SCREEN
C
C
C     GET REQUEST AND STATION # REQUESTED
C
	POS=1
	STATION_NO=0
	LAST_DELAYIND=1							    !V05
	IF (X2XS_STATS_PNT.EQ.1) LAST_DELAYIND=2			    !V05
	POSITION=LAST_POSITION
	REQUEST=0
	ORDER=LAST_ORDER
	MODE=LAST_MODE
	REQUEST=LAST_REQUEST
	DISPLAY_POSITION = .FALSE.
	GET_TERMINAL=.FALSE.
C
	WRITE(CLIN5,9005)
9005	FORMAT('  Stn     ','.........1','.........2',
     *	     '.........3','.........4','.........5','.........6',
     *	     '.........7')
C
	CALL KEY(CLINE,KEY_NAME,NUM_KEYS+1,POS,VALUE)
C
	IF (VALUE.GT.0) CHK_TOT=.FALSE.
C
	IF (VALUE-1 .EQ. GET_POSITION) THEN
	   DISPLAY_POSITION=.TRUE.
	ELSEIF (VALUE-1.EQ.SWITCH_MODE) THEN
	   MODE=MOD(MODE+1,2)
	ELSEIF (VALUE-1.EQ.SWITCH_ORDER) THEN
	   ORDER=MOD(ORDER+1,2)
C
C	   ***** Start V05 Changes *****
C
	   LAST_START_DISPLAY=0
	ELSEIF (VALUE-1.EQ.SHOW_TERMINAL) THEN
	   GET_TERMINAL=.TRUE.
	ELSEIF (VALUE-1.EQ.SHOW_SUBNET) THEN
	   DISP_SUB=.NOT.(DISP_SUB)
	ELSEIF (VALUE-1.EQ.SHOW_BCST) THEN
	   IF (CHK_BCST) THEN
	      CHK_BCST=.FALSE.
	   ELSE
	      CHK_BCST=.TRUE.
	   ENDIF
	ELSEIF (VALUE-1.EQ.SHOW_SAP) THEN
	   IF (CHK_SAP) THEN
	      CHK_SAP=.FALSE.
	   ELSE
	      CHK_SAP=.TRUE.
	   ENDIF
	ELSEIF (VALUE-1.EQ.SHOW_TOT) THEN
	    CHK_TOT=.TRUE.
	ELSE
	   REQUEST=VALUE-1
	   IF (REQUEST.LT.0) POS=1
	   IF (REQUEST.LT.0) REQUEST=LAST_REQUEST
	   IF (REQUEST.GT.NUM_KEYS) REQUEST=0
	ENDIF
C
	IF (DISP_SUB) THEN
	   CLIN5(1)(SSTR:ESTR)=SNET_STR
	ELSEIF (ORDER.NE.0) THEN
	   CLIN5(1)(SSTR:ESTR)=ADDR_STR
	ELSE
	   CLIN5(1)(SSTR:ESTR)=SPACE
	ENDIF
C
C       Remember to subtract one from the selected
C       subnetwork which was added by x2linter or x2vissub
C

D       TYPE*,'X2FLDINF(XSUBIDX)= ',X2FLDINF(XSUBIDX)

	IF((X2FLDINF(XSUBIDX).GT.0) .AND.
     *     (X2FLDINF(XSUBIDX).LE.ALLIDX+1)) THEN
	   SELECTED_SUBNET=X2FLDINF(XSUBIDX)-1
	   IF (LSTSUB.NE.SELECTED_SUBNET) THEN
	      LAST_START_DISPLAY=0
	   ENDIF
	   LSTSUB=X2FLDINF(XSUBIDX)-1
	ELSE
	   SELECTED_SUBNET=LSTSUB
	   X2FLDINF(XSUBIDX)=LSTSUB+1
	ENDIF

D       TYPE*,'SELECTED_SUBNET= ',SELECTED_SUBNET

C
C	***** End V05 Changes *****
C
	IF (CHK_TOT) THEN
		CALL X2XTOT(SELECTED_SUBNET)
		CALL FASTSET(0,INIT_TAB,4*ALLIDX+1)
		CALL FASTSET(0,TOT_CONNECTED,ALLIDX+1)
		DO 30, STN=1,X2X_STATIONS
		     CALL ILBYTE(STATE,IX2XS_STATE,STN-1)
		     IF (STATE.EQ.X2XS_IDLE .OR. STATE.EQ.X2XS_INIT .OR.
     *	              STATE.EQ.X2XS_DISABLED) THEN
		        CLASS=X2XS_STNCLS(STN)
		        SUBNET=X2XC_SUBNETWORK(CLASS)
	      INIT_TAB(ALLIDX,STATE)=INIT_TAB(ALLIDX,STATE)+1
	      IF (SUBNET.EQ.SELECTED_SUBNET) THEN
	         INIT_TAB(SUBNET,STATE)=INIT_TAB(SUBNET,STATE)+1
	      ENDIF
	      CALL ILBYTE(SAP,IX2XS_SAP,STN-1)
	      IF (SAP.NE.0) THEN
	         TOT_CONNECTED(ALLIDX)=TOT_CONNECTED(ALLIDX)+1
	         IF (SUBNET.EQ.SELECTED_SUBNET) THEN
		    TOT_CONNECTED(SUBNET)=TOT_CONNECTED(SUBNET)+1
	         ENDIF
	      ENDIF
	   ENDIF
30	CONTINUE
C
	CONF(SELECTED_SUBNET)=INIT_TAB(SELECTED_SUBNET,1)+
     *	  INIT_TAB(SELECTED_SUBNET,2)+INIT_TAB(SELECTED_SUBNET,3)
C
C    DISPLAY TOTAL NO OF STATIONS CONNECTED AND INITIALIZED
C
C
C	***** Start V05 Changes *****
C
	IF (SELECTED_SUBNET.EQ.ALLIDX) THEN
	   TEMPSTR=ALLSTR
	ELSE
	   WRITE(TEMPSTR,9010)SELECTED_SUBNET
	ENDIF

C
		IF (.NOT.CHK_CONNECTION) THEN
		    WRITE (CLIN2,9002) TEMPSTR,CONF(SELECTED_SUBNET),
     *	        (INIT_TAB(SELECTED_SUBNET,I),I=1,3)
		ELSE
		    WRITE (CLIN2,90021) TEMPSTR,CONF(SELECTED_SUBNET),
     *		      (INIT_TAB(SELECTED_SUBNET,I),I=1,3),
     *		      TOT_CONNECTED(SELECTED_SUBNET)
		ENDIF
C
		GOTO 2001
	ENDIF
C
	VALUE=1
	CALL NUMB(CLINE,POS,VALUE)                 !GET VALUE
	IF (DISPLAY_POSITION) THEN
	   POSITION=VALUE
	   STATION_NO=LAST_STATION_NO
	   IF (POSITION.LE.0) POSITION=1
	   IF (POSITION.GE.70) POSITION=1
	ELSE
	   IF (GET_TERMINAL) THEN
	      TERMINAL_NO=VALUE
	      STATION_NO=0
	      IF (TERMINAL_NO.GT.0 .AND. TERMINAL_NO.LE.X2X_TERMS) THEN
	         STATION_NO=X2XT_STATION_NO(TERMINAL_NO)
		 IF (STATION_NO.EQ.0) STATION_NO=LAST_STATION_NO    !V05
		 IF (STATION_NO.GT.X2X_STATIONS) STATION_NO=1	    !V05
		 X2FLDINF(XSTNIDX)=STATION_NO			    !V05
	      ENDIF
	      IF (STATION_NO.EQ.0) STATION_NO=LAST_STATION_NO
	   ELSEIF (X2FLDINF(XSTNIDX).NE.LAST_STATION_NO) THEN	    !V03
	      STATION_NO=X2FLDINF(XSTNIDX)			    !V03
	      IF (STATION_NO.EQ.0) STATION_NO=LAST_STATION_NO	    !V03
	      IF (STATION_NO.GT.X2X_STATIONS) STATION_NO=1
	   ELSE
	      STATION_NO=VALUE
	      IF (STATION_NO.LE.0) STATION_NO=LAST_STATION_NO
	      IF (STATION_NO.GT.X2X_STATIONS) STATION_NO=1
	   ENDIF
	ENDIF
C
	IF (ORDER.NE.0 .AND. STATION_NO.EQ.0)
     *	         STATION_NO=X2X_SORTED_ADR(0,1)
C
C     REMEMBER LAST FOR NEXT RUN
C
	LAST_REQUEST=REQUEST
	LAST_STATION_NO=STATION_NO
	LAST_POSITION = POSITION
	LAST_ORDER = ORDER
	LAST_MODE = MODE
C
C     ENCODE FIRST TITLE LINE
C
C
	IF (REQUEST.EQ.CHK_STATUS) THEN
	   WRITE(CLIN3,9003)
9003	   FORMAT('''X/x'' terminal responding, ''O/o'' Slow Poll,',
     *	       ' ''N'' Not Init Stn,',' ''D'' Stn Disabled')
	ELSEIF (REQUEST.EQ.CHK_TRANS .OR. REQUEST.EQ.CHK_ERROR .OR.
     *	        REQUEST.EQ.CHK_STATE_CHG .OR.
     *	        REQUEST.EQ.CHK_RESET .OR. REQUEST.EQ.CHK_ACK) THEN
	   WRITE(CLIN3,90031)
90031	   FORMAT('''-'' stn not init, ',
     *	   '''*'' no term msg ')
	   WRITE(CLIN4,90041)
90041	    FORMAT('''0-9'':0-9, A-I:(10,20)-(90,100),'
     *	          ,' J-R:(100,200)-(900,1k), a-i:(1k,2k)-(9k-10k)')
	ELSEIF (REQUEST.EQ.CHK_DELAY .OR. REQUEST.EQ.CHK_TIME) THEN
	   WRITE(CLIN3,90032)
90032	   FORMAT(
     *	   T6,'0-9',T22,'A-E',T38,'J-R',T54,'a-e',T70,'j-r')
	   WRITE(CLIN4,90042)
90042	   FORMAT(
     *	          ' (0,1)-(9,10)s,(10,20)-(50,60)s',
     *	      ',(1,2)-(9-10)m,(10-20)-(50,60)m,(1,2)-(9-10)h')
	ENDIF
C
C     FIND IF YOU HAVE TO DISPLAY CONNECTION STATUS
C
	CHK_CONNECTION=.FALSE.
	IF (X2X_FE_SEND_DISCONNECT_FLAG.EQ.0) CHK_CONNECTION=.TRUE.
	LIN_IDX=0
	COL_IDX=0
	FIRST_LIN=5            !START WITH 1-ST LINE AFTER
C
C
C     FIND START TABLE
C
	IF (STATION_NO.LE.0) STATION_NO=1     !MAKE IT LEGAL FIRST
	IF (STATION_NO.GT.X2X_STATIONS) STATION_NO=1
C
C        FIND FIRST  VALID STATION
C
	FIRST_STATION=1
C
C	***** Start V05 Changes *****
C
	IF (ORDER.EQ.0) THEN
	   DO 10, STN=STATION_NO,X2X_STATIONS
	      CALL ILBYTE(STATE,IX2XS_STATE,STN-1)
	      IF (STATE.EQ.X2XS_IDLE .OR.
     *		  STATE.EQ.X2XS_INIT .OR.
     *	          STATE.EQ.X2XS_DISABLED) THEN
		 CLASS=X2XS_STNCLS(STN)
		 SUBNET=X2XC_SUBNETWORK(CLASS)
		 IF ((SUBNET.EQ.SELECTED_SUBNET).OR.
     *		     (SELECTED_SUBNET.EQ.ALLIDX)) THEN
		    FIRST_STATION=STN
		    GOTO 20
		 ENDIF
	      ENDIF
10	   CONTINUE
C
	ELSE                                  !IF SORTING BY ADDRESS
	   CALL X2STNSRC(STATION_NO,FIRST_STATION,STATUS)
	   IF (STATUS.NE.0) THEN
	      STN=1
	      FOUND=.FALSE.
	      DO WHILE ((.NOT.FOUND).AND.(STN.LE.X2X_STATIONS))
		 CALL ILBYTE(STATE,IX2XS_STATE,X2X_SORTED_ADR(0,STN)-1)
		 IF (STATE.EQ.X2XS_IDLE .OR. STATE.EQ.X2XS_INIT .OR.
     *		     STATE.EQ.X2XS_DISABLED) THEN
		    CLASS=X2XS_STNCLS(X2X_SORTED_ADR(0,STN))
		    SUBNET=X2XC_SUBNETWORK(CLASS)
		    IF ((SUBNET.EQ.SELECTED_SUBNET).OR.
     *                  (SELECTED_SUBNET.EQ.ALLIDX)) THEN
		       FIRST_STATION=STN
		       STATION_NO=FIRST_STATION
		       FOUND=.TRUE.
		    ELSE
		       STN=STN+1
		    ENDIF
		 ELSE
		    STN=STN+1
		 ENDIF
	      ENDDO
C
C	   If station found in sorted address table but
C	   not in the subnetwork then init the first station 
C
	   ELSEIF ((SUBNET.NE.SELECTED_SUBNET).AND.
     *             (SELECTED_SUBNET.NE.ALLIDX)) THEN
	      FIRST_STATION=1
	   ENDIF
	ENDIF
C
20	CONTINUE
C
C     FIND NO OF STATIONS CONNECTED, AND THEIR CONNECTION STATUS
C
	CALL FASTSET(0,INIT_TAB,4*ALLIDX+1)
	CALL FASTSET(0,TOT_CONNECTED,ALLIDX+1)
	DO STN=1,X2X_STATIONS
	   CALL ILBYTE(STATE,IX2XS_STATE,STN-1)
	   IF (STATE.EQ.X2XS_IDLE .OR. STATE.EQ.X2XS_INIT .OR.
     *	       STATE.EQ.X2XS_DISABLED) THEN
	      CLASS=X2XS_STNCLS(STN)
	      SUBNET=X2XC_SUBNETWORK(CLASS)
	      INIT_TAB(ALLIDX,STATE)=INIT_TAB(ALLIDX,STATE)+1
	      IF (SUBNET.EQ.SELECTED_SUBNET) THEN
	         INIT_TAB(SUBNET,STATE)=INIT_TAB(SUBNET,STATE)+1
	      ENDIF
	      CALL ILBYTE(SAP,IX2XS_SAP,STN-1)
	      IF (SAP.NE.0) THEN
	         TOT_CONNECTED(ALLIDX)=TOT_CONNECTED(ALLIDX)+1
	         IF (SUBNET.EQ.SELECTED_SUBNET) THEN
		    TOT_CONNECTED(SUBNET)=TOT_CONNECTED(SUBNET)+1
	         ENDIF
	      ENDIF
	   ENDIF
	END DO
C
	CONF(SELECTED_SUBNET)=INIT_TAB(SELECTED_SUBNET,1)+
     *	  INIT_TAB(SELECTED_SUBNET,2)+INIT_TAB(SELECTED_SUBNET,3)
C
C    DISPLAY TOTAL NO OF STATIONS CONNECTED AND INITIALIZED
C
C
C	***** Start V05 Changes *****
C
	IF (SELECTED_SUBNET.EQ.ALLIDX) THEN
	   TEMPSTR=ALLSTR
	ELSE
	   WRITE(TEMPSTR,9010)SELECTED_SUBNET
	ENDIF
9010    FORMAT(I3)
C
	IF (.NOT.CHK_CONNECTION) THEN
	  WRITE (CLIN2,9002) TEMPSTR,CONF(SELECTED_SUBNET),
     *	        (INIT_TAB(SELECTED_SUBNET,I),I=1,3)
9002	  FORMAT('Snet ',A,1X,I5,' Config''d ',I5,' Not Init ',
     *	       I5,' Init ',I5,' Disabled')
	ELSE
	  WRITE (CLIN2,90021) TEMPSTR,CONF(SELECTED_SUBNET),
     *	        (INIT_TAB(SELECTED_SUBNET,I),I=1,3),
     *		TOT_CONNECTED(SELECTED_SUBNET)
90021	  FORMAT('Snet ',A,1X,I5,' Config''d ',I5,' Not init ',
     *	       I5,' init ',I5,' disabled ',I5,' connected')
	ENDIF
C
C	***** End V05 Changes *****
C
C     LOOP THROUGH THE STATIONS AND DISPLAY SCREEN INFO
C
	DISPLAY_SET=0
	IF (.NOT.DISPLAY_POSITION) DISPLAY_SET = -1
	LAST_STN = FIRST_STATION
	IF (ORDER.NE.0) LAST_STN=X2X_SORTED_ADR(0,LAST_STN)		    !V05
C
	DO 100, NEXT_STN=FIRST_STATION,X2X_STATIONS
C
	   STN=NEXT_STN
	   IF (ORDER.NE.0) STN=X2X_SORTED_ADR(0,NEXT_STN)
	   IF (STN.EQ.0) GOTO 100
	   CLASS=X2XS_STNCLS(STN)					    !V05
	   IF (CLASS.EQ.0) GOTO 100					    !V05
	   SUBNET=X2XC_SUBNETWORK(CLASS)				    !V05
	   IF ((SUBNET.NE.SELECTED_SUBNET) .AND.			    !V05
     *	       (SELECTED_SUBNET.NE.ALLIDX)) GOTO 100			    !V05
C
C     ADJUST COLUMN/LINE
C
C           SKIP IF STATION NOT VALID
C
	   CALL ILBYTE(STATE,IX2XS_STATE,STN-1)
	   IF (STATE.NE.X2XS_IDLE .AND. STATE.NE.X2XS_INIT .AND.
     *	       STATE.NE.X2XS_DISABLED) GOTO 100
C
	   IF (COL_IDX.EQ.0) THEN
	      LIN_IDX=1
	      COL_IDX=1
	      LEAD_STN=STN
	   ENDIF

	   LAST_STN = STN

D	   TYPE *,'DISPLAY_SET,COL_IDX,POSITION,LAST_STN = ',
D    *	       DISPLAY_SET,COL_IDX,POSITION,LAST_STN

	   IF (COL_IDX .GT. POSITION .AND. DISPLAY_SET.EQ.0) THEN
	      DISPLAY_SET = -1
	   ENDIF
	   IF (LIN_IDX.EQ.1 .AND.
     *	       DISPLAY_SET .EQ.0) DISP_STATION = LAST_STN
C
	   STN_INIT=.FALSE.
	   STN_DISABLE=.FALSE.
	   IF (STATE.EQ.X2XS_INIT) STN_INIT=.TRUE.
	   IF (STATE.EQ.X2XS_DISABLED) STN_DISABLE=.TRUE.
C
C     STATION CONNECTION STATUS
C
	   CONNECTED=.TRUE.
	   IF (CHK_CONNECTION) THEN
	      CALL ILBYTE(SAP,IX2XS_SAP,STN-1)
	      IF (SAP.EQ.0) CONNECTED=.FALSE.
	   ENDIF
C
C        FILL UP TERMINAL/STATION INFO
C
	   DO 50, PORT=1,X2X_MAXPORT
C
C        IF TO MANY TO DISPLAY, WRITE THIS LINE AND GOT TO NEW LINE
C
	      TERMS=X2XS_NUM_TERMS(PORT,STN)
	      IF (COL_IDX+TERMS.GT.MAX_COL) THEN
C
C		 ***** Start V05 Changes *****
C
		 IF (DISP_SUB) THEN
C
C		    Display the subnetwork
C
		    CLASS=X2XS_STNCLS(LEAD_STN)
		    IF (CLASS.NE.0) THEN
		       SUBNET=X2XC_SUBNETWORK(CLASS)
		    ELSE
		       SUBNET=0
		    ENDIF
		    WRITE(XNEW(  FIRST_LIN+LIN_IDX),800) LEAD_STN,
     *		    SUBNET,(DISP_TAB(I),I=1,COL_IDX-1)
800		    FORMAT(I5,1X,I3,T10,69A1)

	         ELSEIF (ORDER.NE.0) THEN           !FOR ADDRESS ORDER
		    ADR_LEN=X2XS_ADRESS_LEN(LEAD_STN)
		    IF (ADR_LEN.GT.0) THEN
		       CALL HTOA(CHRSTR,1,ADR_LEN,
     *		                 X2XS_ADRESS(1,LEAD_STN),
     *			         ERR)
		    ELSE
		       ADR_LEN=1
		       CHRSTR(1)=SPACE
		    ENDIF
C
C		    DISP ONLY FIRST FEW CHARS OF ADR
C
	            WRITE(XNEW(  FIRST_LIN+LIN_IDX),900) LEAD_STN,
     *		    (CHRSTR(I),I=MAX0(ADR_LEN-ADR_DISP_LEN+1,1),ADR_LEN),
     *		    (DISP_TAB(I),I=1,COL_IDX-1)
900		    FORMAT(I5,1X,<MIN0(ADR_DISP_LEN,ADR_LEN)>A1,T10,69A1)
	         ELSE

	            WRITE(XNEW(  FIRST_LIN+LIN_IDX),905) LEAD_STN,
     *	                 (DISP_TAB(I),I=1,COL_IDX-1)
905	            FORMAT(I5,T10,69A1)
	         ENDIF
C
C	         ***** End V05 Changes *****
C
	         LEAD_STN=STN
	         COL_IDX=1
	         LIN_IDX=LIN_IDX+1
	         IF (LIN_IDX.GT.MAX_LIN) GOTO 200
	      ENDIF
	      LAST_STATION=STN
C
	      DISP_TAB(COL_IDX)=SPACE
	      COL_IDX=COL_IDX+1
C
C     FOR EVERY TERMINAL DEFINED ON THE STATION DISPLAY INFO
C     FOR THIS TERMINAL
C
	      DO 40, TERM=1,X2X_MAXTERMS
	         TERM_NO=X2XS_TERMS(TERM,PORT,STN)
	         IF (TERM_NO.EQ.0) GOTO 40    !SKIP IF NOT VALID TERM
C
C              GET TERMINAL STATE
C
	         CALL ILBYTE(TERM_STATE,IX2XT_STATE,TERM_NO-1)
	         IF (STN_INIT.OR.STN_DISABLE) THEN !IF STATION INIT
	            IF (REQUEST.EQ.CHK_STATUS) THEN
C
C     DISPLAY TERMINAL/STATION STATUS/CONNECTION STATUS
C
	               IF (TERM_STATE.EQ.X2XTS_SLOW_POLL) THEN
	                  IF (CONNECTED) THEN
	                     DISP_TAB(COL_IDX)=SLOW_POLL_CONNECTED
	                  ELSE
	                     DISP_TAB(COL_IDX)=SLOW_POLL_DISCONNECTED
	                  ENDIF
	               ELSE
	                  IF (CONNECTED) THEN
	                     DISP_TAB(COL_IDX)=ACTIVE_CONNECTED
	                  ELSE
	                     DISP_TAB(COL_IDX)=ACTIVE_DISCONNECTED
	                  ENDIF
	               ENDIF
	               IF (STN_DISABLE) THEN
	                 IF (CONNECTED) THEN
	                    DISP_TAB(COL_IDX)=DISABLE_CONNECTED
	                 ELSE
	                    DISP_TAB(COL_IDX)=DISABLE
	                 ENDIF
	               ENDIF
C
C		       ***** Start V05 changes *****
C
		       IF (CHK_BCST.AND.
     *			  X2XS_BCST_ACTIVE_BITMAP(STN).NE.0) THEN
			  IF (CONNECTED) THEN
			     DISP_TAB(COL_IDX)=BCST_CONNECTED
			  ELSE
			     DISP_TAB(COL_IDX)=BCST_NOT_CONNECTED
			  ENDIF
		       ENDIF
		       IF (CHK_SAP.AND.CONNECTED) THEN
			  DISP_SAP=MOD(SAP,1000)
			  CALL X2GETCHR(DISP_SAP,1,DISP_CHAR)
		          DISP_TAB(COL_IDX)=DISP_CHAR
		       ENDIF
C
C		       ***** End V05 changes *****
C
	            ELSEIF (REQUEST.EQ.CHK_DELAY) THEN
C
C     DISPLAY DELAY ON LAST TERMINAL TRANSACTION
C
	               DELAY=X2XT_NETWORK_DELAY(TERM_NO)
	               IF (DELAY.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(DELAY/1000,0,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_TRANS) THEN
C
C                    DISPLAY ACCUMULATIVE OR LAST
C                    PERIOD STATS FOR # OF TRANS FROM STATION
C
	               IF (MODE.EQ.0) THEN
	                  NO_TRANS=X2XS_CNT_ACTIVE(STN)
	               ELSE
	                  NO_TRANS=X2XS_CNT_ACTIVE_LAST(STN,1)+
     *	                     X2XS_CNT_ACTIVE_LAST(STN,2)
	               ENDIF
	               IF (NO_TRANS.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(NO_TRANS,1,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_TIME) THEN
C
C              DISPLAY TIME OF LAST TRANSACTION FOR EACH TERMINAL
C
	               TIME=X2X_SYSTIM-X2XT_TIME(TERM_NO)
	               IF (X2XT_TIME(TERM_NO).EQ.0 .OR. TIME.LT.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(TIME,0,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_ERROR) THEN
C
C     ERRORS FROM STATION
C
	               IF (MODE.EQ.0) THEN
	                  NO_TRANS=X2XS_ERR_CNT(STN)
	               ELSE
	                  CALL ILBYTE(CNT1,X2XS_ERR_CNT_LAST1,STN-1)
	                  CALL ILBYTE(CNT2,X2XS_ERR_CNT_LAST2,STN-1)
	                  NO_TRANS=CNT1+CNT2
	               ENDIF
	               IF (NO_TRANS.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(NO_TRANS,1,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_RESET) THEN
C
C     # OF HELP (RESET) REQUESTS FRO STATION
C
	               NO_TRANS=X2XS_RESET_CNT(STN)
	               IF (NO_TRANS.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(NO_TRANS,1,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_ACK) THEN
C
C     # OF STTION DELIVERY ACKS AS GENERATED BY FRONT END FOR THE STATION
C
	               IF (MODE.EQ.0) THEN
	                  NO_TRANS=X2XS_ACK_CNT(STN)
	               ELSE
C
C			  ***** Start V05 Changes *****
C
			  IF (LAST_DELAYIND.EQ.1) THEN
			     CALL ILBYTE(NO_TRANS,X2XS_ACK_CNT_LAST1,STN-1)
			  ELSE
			     CALL ILBYTE(NO_TRANS,X2XS_ACK_CNT_LAST2,STN-1)
			  ENDIF
C
C			  ***** End V05 Changes *****
C
		       ENDIF
	               IF (NO_TRANS.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(NO_TRANS,1,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ELSEIF (REQUEST.EQ.CHK_STATE_CHG) THEN
C
C     DISPLAY STATE CHANGES, FOR STATIONS WITH NO LOCAL CONNECTION
C     E.G. X.25 TERMINAL DISPLAY # OF TIMES STATION DISCONNECTED
C     FOR POLLING STATIONS # OF TIMES TERMINALS CHANGED STATUS
C     FROM SLOW POLL TO "ACTIVE" OR FROM "ACTIVE" TO SLOW POLL
C
C
C*!!                 CALL ILBYTE(NO_TRANS,IX2XT_STATE_CHG,TERM_NO-1)
	               NO_TRANS=0
		       CLASS=X2XS_STNCLS(STN)		        !V04
		       IF (CLASS.NE.0) THEN				    !V05
			  BAUD=X2XC_BAUD(CLASS)				    !V05
		       ELSE						    !V05
			  BAUD=0					    !V05
		       ENDIF						    !V05
	               IF (BAUD.EQ.0) NO_TRANS=X2XS_DISC_CNT(STN)
	               IF (NO_TRANS.EQ.0) THEN
	                  DISP_TAB(COL_IDX)=DELAY_ZERO
	               ELSE
	                  CALL X2GETCHR(NO_TRANS,1,DISP_CHAR)
	                  DISP_TAB(COL_IDX)=DISP_CHAR
	               ENDIF
	            ENDIF
	         ELSE
	            DISP_TAB(COL_IDX)=NOT_INIT
	            IF (REQUEST.NE.CHK_STATUS) THEN
	               DISP_TAB(COL_IDX)=DELAY_NOT_INIT
	            ENDIF
	         ENDIF
	         COL_IDX=COL_IDX+1
40	      CONTINUE
50	   CONTINUE
100	CONTINUE      !AND OF TERMINAL LOOP
C
C     DISPLAY LINE
C
C	***** Start V05 Changes *****
C
	IF (DISP_SUB) THEN
C
C	   Display the subnetwork
C
	   CLASS=X2XS_STNCLS(LEAD_STN)
	   IF (CLASS.NE.0) THEN
	      SUBNET=X2XC_SUBNETWORK(CLASS)
	   ELSE
	      SUBNET=0
	   ENDIF
	   WRITE(XNEW(  FIRST_LIN+LIN_IDX),800) LEAD_STN,
     *		SUBNET,(DISP_TAB(I),I=1,COL_IDX-1)
	ELSEIF (ORDER.NE.0) THEN           !FOR ADDRESS ORDER
	   ADR_LEN=X2XS_ADRESS_LEN(LEAD_STN)
	   IF (ADR_LEN.GT.0) THEN
	      CALL HTOA(CHRSTR,1,ADR_LEN,X2XS_ADRESS(1,LEAD_STN),
     *	              ERR)
	   ELSE
	      ADR_LEN=1
	      CHRSTR(1)=SPACE
	   ENDIF
C
C	   DISP ONLY FIRST FEW CHARS OF ADR
C
	   WRITE(XNEW(  FIRST_LIN+LIN_IDX),900) LEAD_STN,
     *		(CHRSTR(I),I=MAX0(ADR_LEN-ADR_DISP_LEN+1,1),ADR_LEN),
     *		(DISP_TAB(I),I=1,COL_IDX-1)
	ELSE
	   WRITE(XNEW(  FIRST_LIN+LIN_IDX),905) LEAD_STN,
     *		(DISP_TAB(I),I=1,COL_IDX-1)
	ENDIF
C
C	***** End V05 changes *****
C
	LIN_IDX=LIN_IDX+1
200	CONTINUE    !END OF STATIONS LOOP
	DISPLAY_MODE=' '
C
C     TOP LINE OF THE SCREEN
C
	IF (REQUEST.EQ.CHK_TRANS .OR.
     *	                    REQUEST.EQ.CHK_ERROR .OR.
     *	                    REQUEST.EQ.CHK_ACK) THEN
C
	   IF (MODE.EQ.0) THEN
	      DISPLAY_MODE='(Total)'
	   ELSE
	      DISPLAY_MODE='(Last)'
	   ENDIF
	ELSEIF (REQUEST.EQ.CHK_STATUS) THEN
	   IF (CHK_BCST) DISPLAY_MODE='(BCST)'
	   IF (CHK_SAP)  DISPLAY_MODE='(SAP)'
	ELSEIF (REQUEST.EQ.CHK_STATE_CHG) THEN
	   IF (CHK_BCST) THEN
      	      DISPLAY_MODE='(BCSTC)'
	   ELSE
      	      DISPLAY_MODE='(CONN)'
	   ENDIF
	ENDIF
C
C	***** Start V05 changes *****
C
	IF (ORDER.NE.0) THEN
	   WRITE(CLIN1,9001)DISP_TYPE(REQUEST),DISPLAY_MODE,
     *	        X2X_SORTED_ADR(0,FIRST_STATION),LAST_STATION
	ELSE
	   WRITE(CLIN1,9001)DISP_TYPE(REQUEST),DISPLAY_MODE,
     *	        FIRST_STATION,LAST_STATION
	ENDIF
9001	FORMAT(A,A,I5,':',I5)
C
C     DISPLAY ONLY ONE STATION AS REQUESTED BY ITS POSITION
C
	DWNTER=0
	TERCNT=0
	FIRSTDROP=0
	CLASS=X2XS_STNCLS(DISP_STATION)
	CALL ILBYTE(STN_STATE,IX2XS_STATE,DISP_STATION-1)
	IF (CLASS.NE.0) THEN						    !V05
	   BAUD=X2XC_BAUD(CLASS)					    !V05
	ELSE								    !V05
	   BAUD=0							    !V05
	ENDIF								    !V05
	DO 2000, PORT=1,X2X_MAXPORT
	DO 2000 I=1,X2X_MAXTERMS
	  TERM=X2XS_TERMS(I,PORT,DISP_STATION)
	  IF(TERM.NE.0) THEN
	    DROPS(I)=X2XT_DROP_AD(TERM)
	    TERCNT=TERCNT+1
	    IF(TERCNT.EQ.1) FIRSTDROP=I
	  ELSE
	    DROPS(I)=' '
	  ENDIF
	  IF(DROPS(I).LT.'@'.OR.DROPS(I).GT.'_') THEN
	    DROPS(I)=' '
	  ELSE
	    CALL ILBYTE(STATE,IX2XT_STATE,TERM-1)
	    IF(STATE.NE.X2XTS_ACTIVE) THEN
	      DROPS(I)=CHAR(ICHAR(DROPS(I))+32)
	      DWNTER=DWNTER+1
	    ENDIF
	  ENDIF
2000	CONTINUE
2001	ADR_LEN=X2XS_ADRESS_LEN(DISP_STATION)
	IF(ADR_LEN.GT.0) THEN
	  CALL HTOA(CHRSTR,1,ADR_LEN,X2XS_ADRESS(1,DISP_STATION),
     *	            ERR)
	ELSE
	  ADR_LEN=1
	  CHRSTR(1)=SPACE
	ENDIF
C
	IF (CLASS.NE.0) THEN
	   SUBNET=X2XC_SUBNETWORK(CLASS)
	ELSE
	   SUBNET=0
	ENDIF
C
	IF (SUBNET.EQ.ALLIDX) THEN
	   TEMPSTR=ALLSTR
	ELSE
	   WRITE(TEMPSTR,9010)SUBNET
	ENDIF
C
	IF (BAUD.NE.0) THEN
	   WRITE(XNEW(  21),9021) TEMPSTR,DISP_STATION,
     *    	(CHRSTR(J),J=MAX0(ADR_LEN-LXADR+1,1),ADR_LEN),
     *	        STATE_TAB(STN_STATE),DWNTER, TERCNT
9021	   FORMAT('Snet ',A,' Stn ',I5,1X,<MIN0(LXADR,ADR_LEN)>A1,1X,
     *		  'Addr ',A9,1X,'Trms Dwn ',I5,' Config''d ',I5)	!V02
	ELSE
	   TER=X2XS_TERMS(1,1,DISP_STATION)
	   AN=0
	   IF (TER.NE.0) AN=AGTTAB(AGTNUM,TER)
C
	   IF (.NOT.(CHK_TOT)) THEN
	      WRITE(XNEW(  21),90221) TEMPSTR,DISP_STATION,
     *    	(CHRSTR(J),J=MAX0(ADR_LEN-LXADR+1,1),ADR_LEN),
C-   *	        STATE_TAB(STN_STATE),TER,AN/10,MOD(AN,10)
     *	        STATE_TAB(STN_STATE),TER,AN
	   ENDIF
C
90221	   FORMAT('Snet ',A,' Stn ',I5,1X,<MIN0(LXADR,ADR_LEN)>A1,
C-   *		  1X,'Addr ',A,' Term ',I5,' Agent ',I8,'-',I1)		!V02
     *		  1X,'Addr ',A,' Term ',I5,' Agent ',I8.8)		!V02
	ENDIF
C
C	***** End V05 Changes *****
C
	IF (DISPLAY_POSITION .OR.
     *	    LAST_START_DISPLAY.EQ.LAST_STATION_NO) THEN
	   CLIN5(1)(POSITION+10:POSITION+10)=MARKER			!V05
	   LAST_START_DISPLAY=LAST_STATION_NO
	ENDIF
C
C     REQUEST LINE
C
	WRITE(CLIN22,9022)						!V05
	WRITE(CLIN23,9023)						!V05
9022	FORMAT('Enter XSTA, XDEL, XTRA, XTIM, XERR, XRES, XACK, XSTC, '	!V05
     *	       'XORD, XMOD, XSNE, XBCS,')				!V05
9023	FORMAT('or XSAP, XTOT, XPOS #, XTER #, XSTN #, XADR #, XSUB #')	!V05
C
	RETURN
	END
