C
C     FILE   : GSPAYORD.FOR
C     AUTHOR : J.H.R
C     VERSION: 01            DATE: 25 / 11 / 2002
C
C
C V02 18-OCT-2013 SCML Adding support for OP Generation Flag
C V01 XX-XXX-XXXX JHR  INITIAL RELEASE FOR PORTUGAL PROJECT
C
C GSALES PAYMENT ORDER, THIS PROGRAM RUNS GSALES LOADER FOR PAYMENT ORDERS
C
C     **************************************************************************
C
C        THIS ITEM IS THE PROPERTY OF GTECH CORPORATION, POVIDENCE, RHODE
C     ISLAND, AND CONTAINS CONFIDENTIAL AND TRADE SECRET INFORMATION. IT MAY
C     NOT BE TRANSFERRED FROM THE CUSTODY OR CONTROL OF GTECH EXCEPT AS AUTO -
C     RIZED IN WRITING BY AN OFFICER OF GTECH. NEITHER THIS ITEM NOR THE
C     INFORMATION IT CONTAINS MAY BE USED, TRANSFERRED, REPRODUCED, PUBLISHED
C     OR DISCLOSED, IN WHOLE OR IN PART, AND DIRECTLY OR INDIRECTLY, EXCEPT AS
C     EXPRESSLY AUTHORIZED BY AN OFFICER OR GTECH, PURSUANT TO WRITTEN AGREEMENT
C
C     Copyright 2000 GTECH Corporation. All Rigth Reserved
C
C     **************************************************************************
C
C THIS PROGRAM RUNS GSALES LOADERS FOR PAYMENT ORDERS
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      PROGRAM GSPAYORD
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO RUN GSALES PAYMENT ORDERS
C
      INCLUDE 'INCLIB:SYSPARAM.DEF'
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
C
C CONSTANT PARAMETER DEFINITION TO RUN GSALES PAYMENT ORDERS
C
      INTEGER * 4 VERSION           ! PAYMENT ORDERS VERSION
C
C INITIATE CONSTANT PARAMETER DEFINITION TO RUN PAYMENT ORDERS
C
      PARAMETER(VERSION = 1)        ! PAYMENT ORDERS VERSION
C
C VARIABLES DEFINITION TO RUN PAYMENT ORDERS
C
      CHARACTER * 25 FILENAME       ! GSALES FILE NAME LOADER
C
C DISPLAY USER INFORMATION ( RUNNING PAYMENT ORDER LOADER )
C
      CALL COPYRITE
      TYPE *, IAM()
      TYPE *, IAM(), 'Running Gsales Payment Order Loader'
      TYPE *, IAM()
C
C INITIATE VARIABLES TO RUN GSALES PAYMENT ORDERS LOADER
C
      FILRECCNT = 0
C
C SET PAYMENT ORDERS FILE NAME ( YYYYDDMM_P_ORDER.FIL )
C
      WRITE(FILENAME, 100) GET_YYYYMMDD_CDC(DAYCDC)
C
C IF GSALES PAYMENT ORDERS FILE EXIST, DELETE IT
C
      CALL DELETE_FILE_NAME(FILENAME)
C
C GET FREE IDENTIFICATION FILE NUMBER
C
      IDFIL = GET_FREE_IDFIL(0)
C
C OPEN YYYYDDMM_P_ORDER.FIL ( ASCII FILE, ALTHOUGH IT'S EXTENSION IS '.FIL' )
C
      CALL OPEN_FILE_NAME(IDFIL, FILENAME)
C
C WRITE PAYMENT ORDERS HEADER
C
      CALL GSHEADER(VERSION)
C
C REAL ALL VALIDATION DATABASE ( VLF.FIL ) AND PRINT GSALES INFORMATION
C
      CALL READ_ALL_VPF_FILE
C
C WRITE PAYMENT ORDER FOOTER
C
      CALL GSFOOTER
C
C CLOSE YYYYDDMM_P_ORDER.FIL GSALES LOADER FILE
C
      CALL USRCLOS1(IDFIL)
C
C DISPLAY MESSAGE TO USER
C
      TYPE *, IAM()
      TYPE *, IAM(), 'Generated Payment Orders File: ', FILENAME
      TYPE *, IAM()
C
C CREATE GSALES END FILE ( TO GSALES MEANS END OF PROCEDURE )
C
      WRITE(FILENAME, 200) GET_YYYYMMDD_CDC(DAYCDC)
      CALL CREATE_GSALES_END_FILE(FILENAME)
C
C PAYMENT ORDERS LOADER ENDS OK
C
      CALL GSTOP(GEXIT_SUCCESS)
C
C FORMATS DEFINITION TO RUN GSALES LOADERS FOR PAYMENT ORDERS
C
100   FORMAT('valx:', A8, '_p_order.fil')
200   FORMAT('valx:', A8, '_p_order.fin')
C
C THIS IS THE END TO RUN GSALES LOADERS FOR PAYMENT ORDERS
C
      END


C ******************************************************************************
C
C     SUBROUTINE: READ_ALL_VPF_FILE
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 11 / 2002
C
C ******************************************************************************
C
C FUNCTION TO READ ALL VALIDATION DATABASE AND PRINT GSALES LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE READ_ALL_VPF_FILE
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO READ ALL VALIDATION DATABASE AND PRINT GSALES LOADER
C
      INCLUDE 'INCLIB:SYSEXTRN.DEF'
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:PRMHSH.DEF'
      INCLUDE 'INCLIB:VALFIL.DEF'
C
C CONSTANT PARAMETERS DEFINITION TO READ ALL VALIDATION DATABASE
C
      INTEGER * 4 TUBSIZ                   ! TUBSIZE
C
C INITIATE CONSTANT PARAMETERS DEFINITION TO READ ALL VALIDATION DATABASE
C
      PARAMETER(TUBSIZ = I4BUCSIZ * 7)     ! TUBSIZE
C
C VARIABLES DEFINITION TO READ ALL VALIDATION DATABASE AND PRINT GSALES LOADER
C
      INTEGER * 4 FSTS                     ! FUNCTION STATUS
      INTEGER * 4 POS                      ! ARRAY POSITION COUNTER
      INTEGER * 4 VLFBUF(TUBSIZ)           ! VALIDATION RECORD BUFFER
C
C OPEN VALIDATION DATABASE ( VLF.FIL FILE )
C
      CALL IOPEN(SFNAMES(1, VLF), VLF, VFLEN * 2, VFSCDC, VFSSER * 2 - 1, FSTS)
      CALL ITUBSIZE(VLF, TUBSIZ)
C
C CHECK FOR OPEN VALIDATION FILE ERROR
C
      IF(FSTS .NE. 0) THEN
        TYPE 100, IAM(), (SFNAMES(POS, VLF), POS = 1, 4)
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C READ ONE VALIDATION RECORD FROM VALIDATION FILE DATABASE
C
1000  CONTINUE
      CALL ISREAD(V4BUF, VLF, VLFBUF, FSTS)
C
C CHECK IF IS LAST VALIDATION RECORD THAT FUNCTION HAS TO READ
C
      IF(FSTS .EQ. ERREND) GOTO 2000
C
C CHECK FOR VALIDATION FILE READ ERROR
C
      IF(FSTS .NE. 0) THEN
        TYPE 300, IAM(), (SFNAMES(POS, VLF), POS = 1, 4)
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF
C
C PRINT INFORMATION IN GSALES LOADER
C
      CALL PRINT_GSALES_PAY_ORDER(V4BUF)
C
C GO TO READ NEXT VALIDATION RECORD
C
      GOTO 1000
C
C CLOSE VALIDATION DATABASE ( VLF.FIL FILE )
C
2000  CONTINUE
      CALL ICLOSE(VLF, VLFBUF, FSTS)
C
C CHECK FOR CLOSE VALIDATION FILE ERROR
C
      IF(FSTS .NE. 0) THEN
        TYPE 200, IAM(), (SFNAMES(POS, VLF), POS = 1, 4)
        TYPE *, IAM()
        CALL GPAUSE
      ENDIF      
C
C FORMATS DEFINITION TO READ ALL VALIDATION DATABASE AND PRINT GSALES LOADER
C
100   FORMAT(A, 'Error Openning File: ', 5A4)
200   FORMAT(A, 'Error Closing File: ', 5A4)
300   FORMAT(A, 'Error Reading File: ', 5A4)
C
C THIS IS THE END TO READ ALL VALIDATION DATABASE AND PRINT GSALES LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_GSALES_PAY_ORDER
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 11 / 2002
C
C ******************************************************************************
C
C FUNCTION TO PRINT PAYMENT ORDER IN GSALES LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_GSALES_PAY_ORDER(V4BUF)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT PAYMENT ORDER IN GSALES LOADER
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:PRMHSH.DEF'
      INCLUDE 'INCLIB:VALFIL.DEF'
      INCLUDE 'INCLIB:DESVAL.DEF'
C
C VARIABLES DEFINITION TO PRINT PAYMENT ORDER IN GSALES LOADER
C
      INTEGER * 4 GNUM          ! GAME NUMBER
      INTEGER * 4 PAYORD_AMT    ! VALIDATION ORDER AMOUNT
      INTEGER * 4 TOT_WINDRW    ! TOTAL NUMBER OF WINNING DRAWS WITH PAYMENT
C
C SET FILE VALIDATION RECORD TO VALIDATION RECORD
C
      CALL LOGVAL(VALREC, V4BUF)
C
C IF IS NOT TODAY CASH CDC RETURN
C
      IF(VALREC(VCCDC) .NE. DAYCDC) RETURN
C
C IF VALIDATION HAS NOT PAYMENT ORDER THEN RETURN
C
      IF(VALREC(VOPSCNT) .LE. 0) RETURN
C
C PASSIVE GAME HAS NOT GOT PAYMENT ORDERS AND HAST NOT GOT JOKER GAME
C
      GNUM = VALREC(VGAM)
      IF(GNTTAB(GAMTYP, GNUM) .EQ. TPAS) RETURN
C
C COUNT NUMBER OF PAYMENT ORDERS FOR REGULAR GAME
C
      CALL GET_TOT_PAY_ORDER(GNUM, TOT_WINDRW, VALREC)
C
C IF WE HAVE PAYMENT ORDERS PRINT INFORMATION INTO GSALES LOADER
C
      PAYORD_AMT = VALREC(VOPSAMT)

C----+------------------------------------------------------------------
C V02| Adding support for OP Generation Flag
C----+------------------------------------------------------------------
C     IF(TOT_WINDRW .GT. 0 .AND. PAYORD_AMT .GT. 0) THEN
      IF(    TOT_WINDRW .GT. 0 .AND. PAYORD_AMT .GT. 0 
     * .AND. VALREC(VOPSCNT) .GT. 0) THEN
C----+------------------------------------------------------------------
C V02| Adding support for OP Generation Flag
C----+------------------------------------------------------------------
        CALL PRINT_PAY_ORDER(GNUM, PAYORD_AMT, TOT_WINDRW, VALREC)
      ENDIF
C
C COUNT ALL NUMBER OF PAYMENT ORDERS FOR JOKER GAME
C
      GNUM = VALREC(VKGME)
      CALL GET_TOT_PAY_ORDER(GNUM, TOT_WINDRW, VALREC)
C
C  IF WE HAVE PAYMENT ORDERS PRINT INFORMATION INTO GSALES LOADER
C
      PAYORD_AMT = VALREC(VKOPSAMT)
C----+------------------------------------------------------------------
C V02| Adding support for OP Generation Flag
C----+------------------------------------------------------------------
C     IF(TOT_WINDRW .GT. 0 .AND. PAYORD_AMT .GT. 0) THEN
      IF(    TOT_WINDRW .GT. 0 .AND. PAYORD_AMT .GT. 0 
     * .AND. VALREC(VOPSCNT) .GT. 0) THEN
C----+------------------------------------------------------------------
C V02| Adding support for OP Generation Flag
C----+------------------------------------------------------------------
        CALL PRINT_PAY_ORDER(GNUM, PAYORD_AMT, TOT_WINDRW, VALREC)
      ENDIF
C
C THIS IS THE END TO PRINT PAYMENT ORDER IN GSALES LOADER
C
      END


C ******************************************************************************
C
C     SUBROUTINE: GET_TOT_PAY_ORDER
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 11 / 2002
C
C ******************************************************************************
C
C FUNCTION TO GET TOTAL NUMBER OF PAYMENT ORDERS FOR ONE GAME
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE GET_TOT_PAY_ORDER(GNUM, TOT_WINDRW, VALREC)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO GET TOTAL NUMBER OF PAYMENT ORDERS FOR ONE GAME
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:DESVAL.DEF'
      INCLUDE 'INCLIB:VDETAIL.DEF'
C
C PARAMETERS DEFINITION TO GET TOTAL NUMBER OF PAYMENT ORDERS FOR ONE GAME
C
      INTEGER * 4 GNUM             ! GAME NUMBER
      INTEGER * 4 TOT_WINDRW       ! TOTAL NUMBER OF WINNING DRAWS WITH PAYMENT
C
C VARIABLES DEFINITION TO GET TOTAL NUMBER OF PAYMENT ORDERS FOR ONE GAME
C
      INTEGER * 4 DET_DRW          ! DETAILS DRAW COUNTER
C
      LOGICAL IS_JOKER             ! IS JOKER GAME ( YES / NO )
C
C INITIATE VARIABLES WITH DEFAULT VALUES
C
      TOT_WINDRW = 0
C
C SET IF IF JOKER GAME
C
      IS_JOKER = .FALSE.
      IF(VALREC(VKGME) .EQ. GNUM) IS_JOKER = .TRUE.
C
C GET ALL VALIDATION DETAILS
C
      CALL DLOGVAL(VALREC, VDETAIL)
C
C LOOP TO SEAR ALL PAYMENTS ORDERS THAT MATCH WITH THE GAME
C
      DO 1000 DET_DRW = 1, VALREC(VPZOFF)
C
C CHECK WIN DETAIL RECORD HAS PAYMENT ORDER
C
        IF(VDETAIL(VOP, DET_DRW) .NE. 1) GOTO 1000
C
C CHEKC IF WE HAVE TO INCREASE TOTAL NUMBER OF PAYMEMT ORDERS
C
        IF(IS_JOKER .EQ. .TRUE.  .AND. VDETAIL(VKIK, DET_DRW) .NE. 1) GOTO 1000 
        IF(IS_JOKER .EQ. .FALSE. .AND. VDETAIL(VKIK, DET_DRW) .NE. 0) GOTO 1000
C
C INCREASE TOTAL NUMBER OF PAYMEMT ORDERS
C
        TOT_WINDRW = TOT_WINDRW + 1
C
C END OF LOOP TO SEAR ALL PAYMENTS ORDERS THAT MATCH WITH THE GAME
C
1000  CONTINUE
C
C THIS IS THE END TO GET TOTAL NUMBER OF PAYMENT ORDERS FOR ONE GAME
C
      END


C ******************************************************************************
C
C     SUBROUTINE: PRINT_PAY_ORDER
C     AUTHOR    : J.H.R
C     VERSION   : 01            DATE: 25 / 11 / 2002
C
C ******************************************************************************
C
C FUNCTION TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
C=======OPTIONS /CHECK = NOOVERFLOW /EXT
      SUBROUTINE PRINT_PAY_ORDER(GNUM, PAYORD_AMT, TOT_WINDRW, VALREC)
      IMPLICIT NONE
C
C INCLUDES DEFINITION TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
      INCLUDE 'INCLIB:GLOBAL.DEF'
      INCLUDE 'INCLIB:AGTCOM.DEF'
      INCLUDE 'INCLIB:CONCOM.DEF'
      INCLUDE 'INCLIB:DESVAL.DEF'
      INCLUDE 'INCLIB:GSALES.DEF'
      INCLUDE 'INCLIB:VDETAIL.DEF'
C
C PARAMETERS DEFINITION TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
      INTEGER * 4 GNUM           ! GAME NUMBER
      INTEGER * 4 PAYORD_AMT     ! PAYMENT ORDER AMOUNT
      INTEGER * 4 TOT_WINDRW     ! TOTAL NUMBER OF WINNING DRAWS WITH PAYMENT
C
C VARIABLES DEFINITION TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
      INTEGER * 4 DET_DRW        ! DETAILS DRAW COUNTER
      INTEGER * 4 POS            ! ARRAY WRITE POSITION
      INTEGER * 4 JUL_VAL        ! JULIAN VALIDATION
      INTEGER * 4 SEARIAL_VAL    ! SERIAL NUMBER VALIDATION
      INTEGER * 4 CHKDIG_VAL     ! CHECK DIGITS VALIDATION
      INTEGER * 4 JUL_WAG        ! JULIAN WAGER
      INTEGER * 4 SEARIAL_WAG    ! SERIAL NUMBER WAGER
      INTEGER * 4 CHKDIG_WAG     ! CHECK DIGITS WAGER
      INTEGER * 4 PSONLG         ! PASSIVE ON LINE FLAG
      INTEGER * 4 AGT_NUM        ! AGENT NUMBER
      INTEGER * 4 VAL_CDC        ! VALIDATION CDC
C
      LOGICAL IS_JOKER           ! IS JOKER GAME ( YES / NO )
C
C GET ALL VALIDATION DETAILS
C
      CALL DLOGVAL(VALREC, VDETAIL)
C
C SET IF IF JOKER GAME
C
      IS_JOKER = .FALSE.
      IF(VALREC(VKGME) .EQ. GNUM) IS_JOKER = .TRUE.
C
C SET IF ACTIVE GAME IT'S ON LINE GAME OR PASSIVE GAME
C
        PSONLG = 2
        IF(GNTTAB(GAMTYP, GNUM) .EQ. TPAS) PSONLG = 1
C
C GET VALIDATION SERIAL NUMBER / CHECK DIGITS
C
      CALL OUTGEN(VALREC(VCCDC), VALREC(VCSER), SEARIAL_VAL, CHKDIG_VAL)
C
C GET WAGER SERIAL NUMBER / CHECK DIGITS
C
      CALL OUTGEN(VALREC(VSCDC), VALREC(VSSER), SEARIAL_WAG, CHKDIG_WAG)
C
C GET WAGER AND VALIDATION JULIAN DATE
C
      JUL_VAL = GET_JULIAN_CDC(VALREC(VCCDC))
      JUL_WAG = GET_JULIAN_CDC(VALREC(VSCDC))
C
C GET AGENT NUMBER / VALIDATION CDC
C
      VAL_CDC = VALREC(VCCDC)
      AGT_NUM = AGTTAB(AGTNUM, VALREC(VCTER))
C
C PRINT PAYMENT ORDER GENERAL INFORMATION
C
        WRITE(FILREC, 100)
     *
     *        JUL_VAL,                   ! JULIAN VALIDATION
     *        SEARIAL_VAL,               ! SERIAL NUMBER VALIDATION
     *        CHKDIG_VAL,                ! CHECK DIGITS VALIDATION
     *        JUL_WAG,                   ! JULIAN WAGER
     *        SEARIAL_WAG,               ! SERIAL NUMBER WAGER
     *        CHKDIG_WAG,                ! CHECK DIGITS WAGER
     *        PSONLG,                    ! ON LINE GAME
     *        GNUM,                      ! GAME NUBMER
     *        AGT_NUM,                   ! AGENT NUMBER
     *        VAL_CDC,                   ! VALIDATION DAY CDC
     *        GET_YYYYMMDD_CDC(VAL_CDC), ! VALIDATION DAY CDC ( YYYYMMDD )
     *        PRNT_AMT(PAYORD_AMT, 2),   ! PAYMENT ORDER AMOUNT
     *        TOT_WINDRW                 ! TOTAL NUMBER OF WIND DRAWS
C
        FILRECLNG = 3 + 9 + 3 + 3 + 9 + 3 + 1 + 2 + 7 + 4 + 8 + 12 + 2
C
C LOOP TO SEAR ALL PAYMENTS ORDERS THAT MATCH WITH THE GAME
C
      DO 1000 DET_DRW = 1, VALREC(VPZOFF)
C
C CHECK WIN DETAIL RECORD HAS PAYMENT ORDER
C
        IF(VDETAIL(VOP, DET_DRW) .NE. 1) GOTO 1000
C
C CHECK IF WE HAVE TO PRINT PAYMENT ORDER DETAIL
C
        IF(IS_JOKER .EQ. .TRUE.  .AND. VDETAIL(VKIK, DET_DRW) .NE. 1) GOTO 1000 
        IF(IS_JOKER .EQ. .FALSE. .AND. VDETAIL(VKIK, DET_DRW) .NE. 0) GOTO 1000
C
C GET WRITE POSITION IN GSALES FILE RECORD
C
        POS = FILRECLNG + 1
C
C PRINT_PAYMENT ORDER DETAIL
C
        WRITE(FILREC(POS:POS + 10), 200)
     *
     *        VDETAIL(VDRW, DET_DRW),           ! WINNING DRAW NUMBER
     *        VDETAIL(VDIV, DET_DRW),           ! WINNING DIVISION
     *        VDETAIL(VSHR, DET_DRW)            ! NUMBER OF WINNING SHARES
C
        FILRECLNG = FILRECLNG + 6 + 2 + 3
C
C END OF LOOP TO SEAR ALL PAYMENTS ORDERS THAT MATCH WITH THE GAME
C
1000  CONTINUE
C
C WRITE INFORMATION IN GSALES FILE AND INCREASE NUMBER OF FILE RECORDS WRITEN
C
        WRITE(IDFIL, 300) FILREC(1:FILRECLNG)
        FILRECCNT = FILRECCNT + 1
C
C FORMATS DEFINITION TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
100   FORMAT(I3.3, I9.9, I3.3, I3.3, I9.9, I3.3, I1.1, I2.2, I7.7, I4.4, 
     *       A8, A12, I2.2)
C
200   FORMAT(I6.6, I2.2, I3.3)
300   FORMAT(A)
C
C THIS IS THE END TO PRINT ONE PAYMENT ORDER IN GSALES FILE LOADER
C
      END

