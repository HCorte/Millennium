C
C PROGRAM ERRLOG
C
C V15 24-AUG-2021 SCML New Terminals Project - OLM
C V14 25-FEB-2014 SCML Placard Project.
C V13 24-JAN-2011 RXK Change for DATE_AND_TIME.
C V12 30-OCT-2000 UXN Alpha baseline changes.
C V11 01-AUG-2000 UXN DATE_AND_TIME added.
C V10 30-NOV-1999 UXN Y2K update.
C V09 08-JUL-1993 HXK COMMENTED OUT XFRPRO STUFF
C V08 21-JAN-1993 DAB Initial Release
C                     Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                     DEC Baseline
C V07 25-NOV-1991 TKO Do write breakthru
C V06 29-MAY-1991 TKO Put space before output to disk
C V05 17-MAY-1991 TKO do IAM for disk output also
C V04 09-MAY-1991 MP  ADDED CALL TO SNIF_AND_WRKSET
C V03 19-APR-1991 KWP ADD IAM TO ERRLOG CONSOLE OUTPUT
C V02 26-MAR-1991 TKO USE ERXXXX.DAT FOR OUTPUT
C V01 01-AUG-1990 XXX RELEASED FOR VAX
C V01 01-OCT-1989 LOU R. INITIAL RELEASE FOR FINLAND
C
C This program automatically opens ERxxxx.DAT for output, where xxxx is
C today's CDC date.  It also automatically deletes ERyyyy.DAT where yyyy is
C yesterday's CDC date.
C
C
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1991 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
PROGRAM ERRLOG
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:PROCOM.DEF'
	INCLUDE 'INCLIB:TASKID.DEF'
C
	INTEGER*4 EBUF(40),CDAT(8),QU(2)
	INTEGER*4 MESNUM, MESTYP, TNUM, BUF, I, MESQUE, STATUS, BLANK
	CHARACTER EBUF_C1*160, EBUF_C4*148, EBUF_C6*140
	EQUIVALENCE (EBUF(1), EBUF_C1)
	EQUIVALENCE (EBUF(4), EBUF_C4)
	EQUIVALENCE (EBUF(6), EBUF_C6)
C
	LOGICAL ALARM,NOMESS
	CHARACTER*160 CEBUF
	EQUIVALENCE (EBUF,CEBUF)
	DATA BLANK/'    '/
	DATA QU/'????','??  '/
	CHARACTER*12 CLOCK(3)
C

	CALL COPYRITE
C V04
	CALL SNIF_AND_WRKSET
C
C WAIT FOR SOMETHING TO DO
C IF END OF DAY THEN STOP EXECUTION.
C
10      CONTINUE
	IF(DAYSTS.EQ.DSCLOS)THEN
	  CLOSE(1)
	  CALL GSTOP(GEXIT_SUCCESS)
	ENDIF
C
	CALL HOLD(0,STATUS)
	IF(DAYSTS.EQ.DSSUSP) GOTO 10
C
C IF MESSAGE QUEUE EXCEEDS MAXIMUM LIMIT
C THEN FLUSH ALL PENDING MESSAGES AND PRINT
C A WARNING MESSAGE
C
20      CONTINUE
	ALARM=.FALSE.
	NOMESS=.FALSE.
	CALL FASTSET(BLANK,EBUF,40)
	CALL DATE_AND_TIME(CLOCK(1),CLOCK(2),CLOCK(3),CDAT)
	WRITE (EBUF_C1,900) CDAT(2),CDAT(3),CDAT(1)
C
C
	IF(P(MESFUL).EQ.1) THEN
	  MESQUE=ACTTSK(ERR)
	  DO 30 I=1,MESQUE
	  CALL DQUTRA(ERR,BUF)
	  IF(ACTTSK(ERR).LT.0) ACTTSK(ERR)=0
	  IF(BUF.EQ.0) GOTO 40
	  CALL RELBUF(BUF)
30        CONTINUE
40        CONTINUE
	  P(MESFUL)=0
	  WRITE (EBUF_C4,910)
	  ALARM=.TRUE.
	  CALL LOGMES(EBUF,ALARM)
	  GOTO 20
	ENDIF
C
C GET BUFFER NUMBER FROM TOP OF ERRLOG QUEUE. IF NO
C BUFFERS QUEUED, GO BACK TO WAIT STATE
C
	CALL DQUTRA(ERR,BUF)
	IF(BUF.EQ.0) THEN
	   ACTTSK(ERR)=0
	   GOTO 10
	ENDIF
C
C GET TASK NAME
C
	TNUM=PRO(ETASK,BUF)
	IF(TNUM.LT.1.OR.TNUM.GT.NUMTSK) THEN
	  CALL FASTMOV(QU,EBUF(4),2)
	ELSE
	  CALL FASTMOV(TSKNAM(TNUM),EBUF(4),2)
	ENDIF
C
C GET MESSAGE TYPE AND NUMBER
C
	MESTYP=PRO(ETYPE,BUF)
	MESNUM=PRO(EMESS,BUF)
C
C PROCESS SYSTEM MESSAGES
C
	IF(MESTYP.EQ.TESYS) THEN
	  CALL MESSYS(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C PROCESS LOGGER MESSAGES
C
	IF(MESTYP.EQ.TELOG) THEN
	  CALL MESLGR(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C PROCESS COMMAND MESSAGES
C
	IF(MESTYP.EQ.TECMD) THEN
	  CALL MESCMD(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C PROCESS GENERAL MESSAGES
C
	IF(MESTYP.EQ.TEGEN) THEN
	  CALL MESGEN(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C PROCESS COMMUNICALTIONS MESSAGES
C
	IF(MESTYP.EQ.TECOM) THEN
	  IF(P(MESLOG).EQ.4) NOMESS=.TRUE.
	  CALL MESCOM(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C PROCESS SYSTEM NETWORK MESSAGES
C
	IF(MESTYP.EQ.TENET) THEN
	  CALL MESNET(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C EURO MIL PROJECT - SHOW INTO MONITOR ERROR MESSAGES...
C
	IF(MESTYP.EQ.TEEUM) THEN
	  CALL MESEUM(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C V14 - START - PLACARD PROJECT - SHOW INTO MONITOR ERROR MESSAGES...
C
	IF(MESTYP.EQ.TEIGS) THEN
	  CALL MESIGS(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C V14 - END - PLACARD PROJECT - SHOW INTO MONITOR ERROR MESSAGES...
C
C
C V15 - START - NEW TERMINALS PROJECT - SHOW INTO MONITOR ERROR MESSAGES...
C
	IF(MESTYP.EQ.TEOLM) THEN
	  CALL MESOLM(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
	  GOTO 100
	ENDIF
C
C V15 - END - NEW TERMINALS PROJECT - SHOW INTO MONITOR ERROR MESSAGES...
C
C PROCESS XFRPRO, DATA TRANSFERE MESSAGES (COMMENTED OUT FOR FINLAND)
C
C***    IF(MESTYP.EQ.TEXFR) THEN
C***      CALL MESXFR(MESNUM,PRO(EDATA,BUF),EBUF_C6,ALARM)
C***      GOTO 100
C***    ENDIF
C
C INVALID MESSAGE TYPE
C
	WRITE (EBUF_C4,920) MESTYP,MESNUM
100     CONTINUE
	CALL RELBUF(BUF)
	IF(.NOT.NOMESS) CALL LOGMES(EBUF,ALARM)
	CALL FASTSET(BLANK,EBUF,40)
	ALARM=.FALSE.
	GOTO 20
C
C
900     FORMAT(I2.2,'/',I2.2,'/',I4.4,2X)
910     FORMAT(1X,'ERRLOG  WARNING DATA LOST-QUEUE OVERFLOW')
920     FORMAT(' ERRLOG  INVALID MESSAGE TYPE> ',I2,' NUMBER> ',I3)
	END