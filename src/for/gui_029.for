C GUI_029.FOR
C
c V04 11-MAR-2010 RXK Claims replaced with returns
C V03 19-FEB-2001 HXK removed clerk, added cdc, get passnum from memory
C V02 06-FEB-2001 HXK ADDED CITY,FIXED RETURNED GNUM,REDMIN
C V01 12-DEC-2000 HXK Initial release.
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 2001 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C This subroutine returns GUI FUNCTION.
C
C Input parameters:
C	NONE               
C
C Output parameters:
C
C	BYTE		OUTBUF(*)    OUTPUT MESSAGE
C	INTEGER*4	MES_LEN	     MESSAGE LENGTH
C	INTEGER*4	RET_CODE:
C		0		-  no error, message accepted;
C		value >= 11	-  error number to be sent to Client.
C
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE GUI_029(OUTBUF,MES_LEN,RET_CODE)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'

	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
        INCLUDE 'INCLIB:AGTCOM.DEF'
        INCLUDE 'INCLIB:AGTINF.DEF'
        INCLUDE 'INCLIB:RECAGT.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'

	INCLUDE 'INCLIB:GUIMPRM.DEF'
	INCLUDE 'INCLIB:GUIARGS.DEF'
	INCLUDE 'INCLIB:GUIFIL.DEF'
C
C
	BYTE	    OUTBUF(*)
	INTEGER*4   MES_LEN,RET_CODE
	CHARACTER*14 SPACES
C
	INTEGER*4   NUM_COLS,NUM_ROWS
        INTEGER*4   GNUM,GIND,GTYP,ST
        INTEGER*4   AGTNO,CLKNO,TERNO
	INTEGER*4   LEN,TEMP
C
        CHARACTER*14 REQDATE
        BYTE         BREQDATE(14)
        EQUIVALENCE(REQDATE,BREQDATE)

	INTEGER*2   I2TEMP
	BYTE	    I1TEMP(2)
	EQUIVALENCE(I2TEMP,I1TEMP)
C
	INTEGER*2   DD,MM,YY
C
        ! parameters
	INTEGER*4   GAMIND
        INTEGER*4   CANIND,CLMIND,DSCIND,SALIND,VALIND
        INTEGER*4   REFIND,LENIND
        PARAMETER   (GAMIND=1)
        PARAMETER   (CANIND=GAMIND+1)
        PARAMETER   (CLMIND=GAMIND+2)
        PARAMETER   (DSCIND=GAMIND+3)
        PARAMETER   (SALIND=GAMIND+4)
        PARAMETER   (VALIND=GAMIND+5)
        PARAMETER   (REFIND=GAMIND+6)
        PARAMETER   (LENIND=REFIND)
C
        ! arguments
        INTEGER*4  AGT                     !
C        INTEGER*4  LAGT                    !
        INTEGER*4  GNUMREQ                 !Game # to display sales for.
C
        ! parameters
        INTEGER*4  INDVTAB(AGAMLEN,MAXGAM) !
        INTEGER*4  ADJUST(2)               !
        INTEGER*4  AMTDUE(2)               !
        INTEGER*4  COMAMT(2)               !
        INTEGER*4  NETSAL                  !
        INTEGER*4  GAM                     !
        INTEGER*4  TKC                     !
        INTEGER*4  TCOM(2)                 !
        INTEGER*4  DAY                     !
        INTEGER*4  I                       !
        INTEGER*4  CCOM(2)                 !
        INTEGER*4  CNT(LENIND)             !
        INTEGER*4  AMT(LENIND)             !
        INTEGER*4  DUMMY                   !
 
        INTEGER*4  FROM,UNTIL              
        INTEGER*4  CARTEL,CERR
     
	INTEGER*4  CDC                     !
        INTEGER*2  DBUF(LDATE_LEN)         !

	INTEGER*4 PSVDVLCNT                ! Passive Total Returns
	INTEGER*4 PSVDVLAMT                ! 

        LOGICAL    ALLON
        INTEGER*4  CLERKON  
	CHARACTER  CZERO
	DATA       CZERO/Z0/
C
	RET_CODE = 0	
	SPACES = ' '	
	CALL GUI_GETPARAMS(OUTBUF,ST)
	IF(ST.NE.0) THEN
	    RET_CODE = 11
	    RETURN
	ENDIF
	AGTNO = GUI_ARGVAL(1)
	!CLKNO = GUI_ARGVAL(2)
  	CDC = GUI_ARGVAL(2)
        LEN = GUI_ARGLEN(3)
        IF(LEN.GT.0) THEN
           DO I=1,14  !replace 14 with a parameter
              BREQDATE(I) = B_GUI_ARGCHAR(I,3)
           ENDDO
        ELSE
           REQDATE = SPACES
        ENDIF
        GNUM = GUI_ARGVAL(4)
        TERNO = GUI_ARGVAL(5)       

        IF((AGTNO.LT.1 .OR. AGTNO.GT.9999999) .AND.
     *      TERNO.LT.1 .OR. TERNO.GT.9999) THEN
           RET_CODE = 11
           RETURN
        ENDIF

	IF(CDC.EQ.0) THEN
	   CALL ASCBIN(BREQDATE, 5,2,DD,ST)
	   CALL ASCBIN(BREQDATE, 8,2,MM,ST)
	   CALL ASCBIN(BREQDATE,13,2,YY,ST)
	   IF(DD.EQ.0 .OR. MM.EQ.0 .OR. YY.EQ.0) THEN
	      CDC = DAYCDC
	   ELSE
	      DBUF(VMON)  = MM
	      DBUF(VDAY)  = DD
	      DBUF(VYEAR) = YY
	      CALL LBDATE(DBUF)
	      CDC = DBUF(VCDC)
           ENDIF
	ENDIF

	IF(CDC.LT.0 .OR. CDC.GT.DAYCDC) CDC = DAYCDC

	IF(GNUM.LT.1.OR.GNUM.GT.MAXGAM) GNUM = 0
	IF(GNUM.NE.0) THEN
	  GTYP = GNTTAB(GAMTYP,GNUM)
	  GIND = GNTTAB(GAMIDX,GNUM)
	  IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) THEN
	    RET_CODE = 11
	    RETURN
	  ENDIF
	  IF(GIND.LT.1.OR.GIND.GT.MAXIND) THEN
	    RET_CODE = 11
	    RETURN
	  ENDIF
	ENDIF
	GNUMREQ = GNUM

C
C
C GET DATA FROM COMMON OR DISK
C
C READ AGENTS RECORD
C
        AGT = TERNO
	IF(AGT.LT.1 .OR. AGT.GT.9999) THEN !if term# is => agtno is valid, so use agtno
           DO I=1,NUMAGT  !get term# in agent common
            IF(AGTNO.EQ.AGTTAB(AGTNUM,I)) THEN
              AGT=I
              GOTO 100
            ENDIF
          ENDDO
100	  CONTINUE
	ENDIF

	IF(AGT.LT.1 .OR. AGT.GT.9999) THEN !if term# is still invalid
	  AGT = 1
	ENDIF
	CLKNO = 0

C Force always to read from disk 
C
C        IF(LAGT.EQ.AGT .AND. AGT.NE.0) GOTO 120
C        LAGT = AGT
C
	IF(CLKNO.EQ.0) THEN
          ALLON=.TRUE.
          !CLRKNO=AGTHTB(AGTPASOFF,AGT)
          CALL GETCLERK(AGT,CLKNO,1,INDVTAB)  !check this call
          CLERKON=0
	ENDIF
C
        CALL READW(ASFFDB,AGT,ASFREC,ST)
        IF(ST.NE.0) THEN
	    CALL OPS('Failed to read ASF file',ST,AGT)
	    RET_CODE = 11
            RETURN
        ENDIF
        DO I=1,512
            IF(ASFBYT(I).EQ.CZERO) ASFBYT(I)=' '
        END DO
C
        CARTEL=0
        CALL ASCBIN(ASFINF,SCHAN,LCHAN,CARTEL,CERR)
C
120     CONTINUE
        CALL FASTSET(0,AMT,LENIND)
        CALL FASTSET(0,CNT,LENIND)
        TCOM(1)=0
        TCOM(2)=0
        CCOM(1)=0
        CCOM(2)=0
        ADJUST(1)=0
        ADJUST(2)=0
        TKC=0
        IF(CDC.EQ.DAYCDC) GOTO 160
C
C IF NOT TODAYS SALES THEN GET SALES DATA FROM FILE
C
        DO DAY=1,9
            IF(ASFDAT(ASFCDC,DAY).EQ.CDC) GOTO 140
        END DO
        CALL GUIARG_EMPTY_RESPONSE(OUTBUF, MES_LEN)
        RETURN

140     CONTINUE

        IF(GNUMREQ.EQ.0) THEN
           FROM=1
           UNTIL=MAXGAM
        ELSE
           FROM=GNUMREQ
           UNTIL=GNUMREQ
        ENDIF
        DO 150 GAM=FROM,UNTIL
            GTYP=GNTTAB(GAMTYP,GAM)
            GIND=GNTTAB(GAMIDX,GAM)
            IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) GOTO 150
            CNT(GAMIND)=CNT(GAMIND)+ASFDAY(GSCNT,GAM,DAY)-
     *                        ASFDAY(GCCNT,GAM,DAY)
            AMT(GAMIND)=AMT(GAMIND)+ASFDAY(GSAMT,GAM,DAY)-
     *                        ASFDAY(GCAMT,GAM,DAY)

            CNT(SALIND)=CNT(SALIND)+ASFDAY(GSCNT,GAM,DAY)-
     *                              ASFDAY(GCCNT,GAM,DAY)
            AMT(SALIND)=AMT(SALIND)+ASFDAY(GSAMT,GAM,DAY)-
     *                              ASFDAY(GCAMT,GAM,DAY)

            CNT(VALIND)=CNT(VALIND)+ASFDAY(GVCNT,GAM,DAY)
            AMT(VALIND)=AMT(VALIND)+ASFDAY(GVAMT,GAM,DAY)

            CNT(CANIND)=CNT(CANIND)+ASFDAY(GCCNT,GAM,DAY)
            AMT(CANIND)=AMT(CANIND)+ASFDAY(GCAMT,GAM,DAY)

            CNT(CLMIND)=CNT(CLMIND)+ASFDAY(GCLCNT,GAM,DAY)
            AMT(CLMIND)=AMT(CLMIND)+ASFDAY(GCLAMT,GAM,DAY)

            CNT(DSCIND)=CNT(DSCIND)+ASFDAY(GDCNT,GAM,DAY)
            AMT(DSCIND)=AMT(DSCIND)+ASFDAY(GDAMT,GAM,DAY)

            CNT(REFIND)=CNT(REFIND)+ASFDAY(GRCNT,GAM,DAY)
            AMT(REFIND)=AMT(REFIND)+ASFDAY(GRAMT,GAM,DAY)

            TKC=TKC+ASFDAY(GTKCHG,GAM,DAY)
            NETSAL=ASFDAY(GSAMT,GAM,DAY)-ASFDAY(GCAMT,GAM,DAY)
            CALL GETCOM(NETSAL,TWAG,GAM,COMAMT,TCOM,GTYP,GIND,AGT)
            ALLON=.TRUE.
150     CONTINUE

        DUMMY=0
        CALL GETCOM(AMT(VALIND),TVAL,GAM,COMAMT,CCOM,DUMMY,DUMMY,DUMMY)
        DO 155 I=1,15
            IF(ASFLGR(LGRCDC,I).NE.CDC) GOTO 155
            CALL ADDI8I8(ADJUST,ASFLGR(LGRAMTU,I),BETUNIT)
155     CONTINUE
        GOTO 180
C
C TODAYS SALES
C
C
160     CONTINUE
C
C IF LAST CLERK SIGNED ON NOT SAME AS CURRENT ONE SIGNED ON AND
C IN CLERK MODE CLEAR SUMMARY TABLE.
C
        IF(P(CLRKACT).EQ.0) THEN
            IF(CLERKON.NE.AGTHTB(AGTPASOFF,AGT).AND.(.NOT.ALLON)) THEN
                CALL FASTSET(0,INDVTAB,AGAMLEN*MAXGAM)
                CLERKON=AGTHTB(AGTPASOFF,AGT)
            ENDIF
            IF(CLERKON.NE.AGTHTB(AGTPASOFF,AGT).AND.ALLON) THEN
                CLERKON=0
                !CLRKNO=AGTHTB(AGTPASOFF,AGT)
                CALL GETCLERK(AGT,CLKNO,1,INDVTAB)
            ENDIF
            IF(.NOT.(ALLON)) THEN
                CALL FASTSET(0,INDVTAB,AGAMLEN*MAXGAM)
            ENDIF
        ENDIF
C
C
        IF(GNUMREQ.EQ.0) THEN
           FROM=1
           UNTIL=MAXGAM
        ELSE
           FROM=GNUMREQ
           UNTIL=GNUMREQ
        ENDIF
C
        DO 170 GAM=FROM,UNTIL
            GTYP=GNTTAB(GAMTYP,GAM)
            GIND=GNTTAB(GAMIDX,GAM)
            IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) GOTO 170

            CNT(GAMIND)=CNT(GAMIND)+AGTGAM(GSCNT,GAM,AGT)-
     *                        AGTGAM(GCCNT,GAM,AGT)
            AMT(GAMIND)=AMT(GAMIND)+AGTGAM(GSAMT,GAM,AGT)-
     *                        AGTGAM(GCAMT,GAM,AGT)

            CNT(SALIND)=CNT(SALIND)+AGTGAM(GSCNT,GAM,AGT)-
     *                              AGTGAM(GCCNT,GAM,AGT)
            AMT(SALIND)=AMT(SALIND)+AGTGAM(GSAMT,GAM,AGT)-
     *                              AGTGAM(GCAMT,GAM,AGT)

            CNT(VALIND)=CNT(VALIND)+AGTGAM(GVCNT,GAM,AGT)
            AMT(VALIND)=AMT(VALIND)+AGTGAM(GVAMT,GAM,AGT)

            CNT(CANIND)=CNT(CANIND)+AGTGAM(GCCNT,GAM,AGT)
            AMT(CANIND)=AMT(CANIND)+AGTGAM(GCAMT,GAM,AGT)

            CNT(CLMIND)=CNT(CLMIND)+AGTGAM(GCLCNT,GAM,AGT)
            AMT(CLMIND)=AMT(CLMIND)+AGTGAM(GCLAMT,GAM,AGT)

            CNT(DSCIND)=CNT(DSCIND)+AGTGAM(GDCNT,GAM,AGT)
            AMT(DSCIND)=AMT(DSCIND)+AGTGAM(GDAMT,GAM,AGT)

            CNT(REFIND)=CNT(REFIND)+AGTGAM(GRCNT,GAM,AGT)
            AMT(REFIND)=AMT(REFIND)+AGTGAM(GRAMT,GAM,AGT)

            TKC=TKC+AGTGAM(GTKCHG,GAM,AGT)
            NETSAL=AGTGAM(GSAMT,GAM,AGT)-AGTGAM(GCAMT,GAM,AGT)
            CALL GETCOM(NETSAL,TWAG,GAM,COMAMT,TCOM,GTYP,GIND,AGT)
170     CONTINUE
        DUMMY=0
        CALL GETCOM(AMT(VALIND),TVAL,GAM,COMAMT,CCOM,DUMMY,DUMMY,DUMMY)
C
C GET ADJUSTMENT AMOUNT FROM FILE
C
        DO 173 I=1,15
            IF(ASFLGR(LGRCDC,I).NE.CDC) GOTO 173
            CALL ADDI8I8(ADJUST,ASFLGR(LGRAMTU,I),BETUNIT)
173     CONTINUE
C       ADJUST(1)=AGTTAB(AGTADU,AGT)
C       ADJUST(2)=AGTTAB(AGTADP,AGT)
C
C ADD UP FROM CLERK FILE
C
        IF(P(CLRKACT).EQ.0) THEN
            DO 175 GAM=FROM,UNTIL
                GTYP=GNTTAB(GAMTYP,GAM)
                GIND=GNTTAB(GAMIDX,GAM)
                IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) GOTO 175

                CNT(GAMIND)=CNT(GAMIND)+INDVTAB(GSCNT,GAM)-
     *                            INDVTAB(GCCNT,GAM)
                AMT(GAMIND)=AMT(GAMIND)+INDVTAB(GSAMT,GAM)-
     *                            INDVTAB(GCAMT,GAM)

                CNT(SALIND)=CNT(SALIND)+INDVTAB(GSCNT,GAM)-
     *                                  INDVTAB(GCCNT,GAM)
                AMT(SALIND)=AMT(SALIND)+INDVTAB(GSAMT,GAM)-
     *                                  INDVTAB(GCAMT,GAM)

                CNT(VALIND)=CNT(VALIND)+INDVTAB(GVCNT,GAM)
                AMT(VALIND)=AMT(VALIND)+INDVTAB(GVAMT,GAM)

                CNT(CANIND)=CNT(CANIND)+INDVTAB(GCCNT,GAM)
                AMT(CANIND)=AMT(CANIND)+INDVTAB(GCAMT,GAM)

                CNT(CLMIND)=CNT(CLMIND)+INDVTAB(GCLCNT,GAM)
                AMT(CLMIND)=AMT(CLMIND)+INDVTAB(GCLAMT,GAM)

                CNT(DSCIND)=CNT(DSCIND)+INDVTAB(GDCNT,GAM)
                AMT(DSCIND)=AMT(DSCIND)+INDVTAB(GDAMT,GAM)

                CNT(REFIND)=CNT(REFIND)+INDVTAB(GRCNT,GAM)
                AMT(REFIND)=AMT(REFIND)+INDVTAB(GRAMT,GAM)

                TKC=TKC+INDVTAB(GTKCHG,GAM)
                NETSAL=INDVTAB(GSAMT,GAM)-INDVTAB(GCAMT,GAM)
                CALL GETCOM(NETSAL,TWAG,GAM,COMAMT,TCOM,GTYP,GIND,AGT)
175         CONTINUE
        ENDIF
C
C
180     CONTINUE
        IF(TSBIT(AGTTAB(AGTTYP,AGT),AGTNCM).NE.0) THEN
          TCOM(1)=0
          TCOM(2)=0
          CCOM(1)=0
          CCOM(2)=0
        ENDIF
        AMTDUE(1)=0
        AMTDUE(2)=0
        CALL ADDI8I4(AMTDUE,AMT(SALIND),BETUNIT)
        CALL SUBI8I4(AMTDUE,AMT(VALIND),VALUNIT)
        CALL SUBI8I4(AMTDUE,AMT(REFIND),BETUNIT)
        CALL SUBI8I4(AMTDUE,AMT(DSCIND),BETUNIT)
        CALL ADDI8I8(AMTDUE,ADJUST,BETUNIT)
        CALL ADDI8I4(AMTDUE,TKC,BETUNIT)
        CALL SUBI8I8(AMTDUE,TCOM,BETUNIT)
        CALL SUBI8I8(AMTDUE,CCOM,BETUNIT)
C
C Add Total Passive returns
C
	PSVDVLCNT = 0   !Value for returns count is in CNT(CLMIND)
	PSVDVLAMT = 0   !Value for returns amount is in AMT(CLMIND)
        !DO 190 GAM = 1,MAXGAM
        !  GTYP = GNTTAB(GAMTYP,GAM)
        !  GIND = GNTTAB(GAMIDX,GAM)
        !  IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) GOTO 190
	!  IF (GTYP.EQ.TPAS) THEN
	!     PSVDVLCNT = PSVDVLCNT + AGTGAM(GCCNT,GAM,AGT)
	!     PSVDVLAMT = PSVDVLAMT + AGTGAM(GCAMT,GAM,AGT)
	!     GOTO 190
        !   ENDIF
190    CONTINUE 
C
C
C ENCODE AGENT FINANCIAL OUTPUT
C
C INITIALIZE OUTPUT 
C
	CALL GUIARG_INIT()
C
	NUM_COLS = 36
	NUM_ROWS = 1
	CALL GUIARG_NEXT_SET(OUTBUF,NUM_COLS)
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SAGNO)),LAGNO)  !lagno = 7
	CALL GUIARG_INT4(OUTBUF,CDC)
	IF(CDC.EQ.0) THEN
	    CALL GUIARG_CHAR(OUTBUF,%REF(SPACES),14)
	ELSE
	    CALL GUIARG_DATE(OUTBUF,CDC)
	ENDIF
	CALL GUIARG_BYTE(OUTBUF,GNUM)
	CALL GUIARG_INT4(OUTBUF,AGT)
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SXSTN)),LXSTN)     !lxstn = 5  
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SDROP)),LDROP)     !ldrop = 2
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SNAME)),LNAME)     !lname = 27
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SSTRT)),LSTRT)     !lstrt = 30
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SCITY)),LCITY)     !lcity = 18
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SSTTE)),LSTTE)     !lstate= 2
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SZIPC)),LZIPC)     !lzip  = 9
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(SCONT)),LCONT)     !lcont = 27
	CALL GUIARG_CHAR(OUTBUF,%REF(ASFBYT(STELE)),LTELE)     !ltele = 12
	CALL GUIARG_INT4(OUTBUF,AGTTAB(ALSTRA,AGT))
	CALL GUIARG_INT4(OUTBUF,AGTTAB(ALSWAG,AGT))
	CALL GUIARG_INT4(OUTBUF,AGTTAB(APSNUM,AGT))
	CALL GUIARG_BYTE(OUTBUF,AGTHTB(AOPSTS,AGT))          
        CALL ASCBIN(ASFINF,SARED,LARED,TEMP,CERR)             
	CALL GUIARG_MONY(OUTBUF,TEMP)
        CALL ASCBIN(ASFINF,SARMN,LARMN,TEMP,CERR)
	CALL GUIARG_MONY(OUTBUF,TEMP)
	CALL GUIARG_INT4(OUTBUF,CNT(SALIND))
	CALL GUIARG_MONY(OUTBUF,AMT(SALIND))
	CALL GUIARG_INT4(OUTBUF,CNT(VALIND))
	CALL GUIARG_MONY(OUTBUF,AMT(VALIND))
	CALL GUIARG_INT4(OUTBUF,CNT(CANIND))
	CALL GUIARG_MONY(OUTBUF,AMT(CANIND))
	CALL GUIARG_INT4(OUTBUF,CNT(CLMIND))
	CALL GUIARG_MONY(OUTBUF,AMT(CLMIND))
	CALL GUIARG_INT4(OUTBUF,CNT(REFIND))
	CALL GUIARG_MONY(OUTBUF,TCOM)
	CALL GUIARG_MONY(OUTBUF,CCOM)
	CALL GUIARG_MONY(OUTBUF,ADJUST)
	CALL GUIARG_MONY(OUTBUF,TKC)
	CALL GUIARG_MONY(OUTBUF,AMTDUE)
	CALL GUIARG_INT4(OUTBUF,CNT(GAMIND))
	CALL GUIARG_MONY(OUTBUF,AMT(GAMIND))
	!CALL GUIARG_INT4(OUTBUF,PSVDVLCNT)
	!CALL GUIARG_MONY(OUTBUF,PSVDVLAMT)
C
C FINALLY SET OUTPUT MESSAGE LENGTH 
C
	CALL GUIARG_SET_MESLEN(MES_LEN)
C
	RETURN
C
	END
