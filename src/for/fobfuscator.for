C
C *** INPVER
C
C This function will convert an external serial number into an internal
C serial number and check the checksum as it does so.  If a checksum error
C occurs, this function returns a non-zero value.  Note, however, that the
C internal serial number will be changed in any case.
C
C CALLING SEQUENCE:
C        RETURN_CODE = INPVER( CDC, EXTSER, INTSER, CHKDIG)
C INPUT:
C	 CDC	    CDC date of ticket
C	 EXTSER	    External serial number
C	 CHKDIG	    Check digits
C
C OUTPUT:
C	 INTSER	    Internal serial number
C	 INPVER	    Status (0 = ok, 15 = error in checksum)
C	
C SUBROUTINES CALLED:
C        GENKEY, GENCHK
C
C
C        SUBROUTINE INPVER(XCDC, XEXTSER, XINTSER, XCHKDIG)
        INTEGER*4 FUNCTION INPVER(XCDC, XEXTSER, XINTSER, XCHKDIG)
	IMPLICIT NONE
C
C	INCLUDE 'INCLIB:SYSPARAM.DEF'
C
	INTEGER*4      XCDC       ! INPUT: CDC OF TICKET
	INTEGER*4      XEXTSER    ! INPUT: EXTERNAL SRL #
	INTEGER*4      XINTSER    !OUTPUT: INTERNAL SRL #
	INTEGER*4      XCHKDIG    ! INPUT: CHECK DIGITS OF EXT SRL #
C
	INTEGER*4      CDC,EXTSER,CHKDIG !INTERNAL COPIES
C
	INTEGER*4      CDCH      !HIGH PORTION OF CDC
	INTEGER*4      CDCL      ! LOW PORTION OF CDC
C
	INTEGER*4      HTIC      !HIGH PORTION OF SERIAL #
	INTEGER*4      LTIC      ! LOW PORTION OF SERIAL #
C
	INTEGER*4      SYSIDX    ! VARIANT FOR THE SITE
C
	INTEGER*4      TIC2,TIC3,TIC4,X
C
C
C
	CDC     = XCDC
	EXTSER  = XEXTSER
	CHKDIG  = XCHKDIG
C
C
C
	CALL MIXCHK( EXTSER, CHKDIG )    !UNMIX CHKDIGIT
	CALL GENKEY( CDC, CDCH, CDCL, SYSIDX)   !GET CDCH, CDCL
C
C Assume at this point that the external srl # is as follows:
C
C 0000 0000 abcd efgh ijkl mnop qrst uvwx
C
	LTIC = IAND ( EXTSER, '0000FFFF'X)  !LTIC=ijkl mnop qrst uvwx
	HTIC = ISHFT( EXTSER, -16)
	HTIC = IAND ( HTIC, '0000007F'X)    !HTIC=0bcd efgh
	TIC4 = IAND ( LTIC, '0000007F'X)    !TIC4=0rst uvwx
	TIC3 = ISHFT( LTIC, -8)
	TIC3 = IAND ( TIC3, '0000007F'X)    !TIC3=0jkl mnop
	TIC2 = IAND ( HTIC, '0000007F'X)    !TIC2=0bcd efgh
C
	TIC4 = ISHFT( TIC4, 6)
	TIC2 = IEOR ( TIC2, TIC4)
	TIC4 = ISHFT( TIC4, -1)
	TIC2 = IEOR ( TIC2, TIC4)
	TIC4 = ISHFT( TIC4, -1)
	TIC2 = IEOR ( TIC2, TIC4)
	TIC4 = ISHFT( TIC4, -4)
	TIC2 = IEOR ( TIC2, TIC4)
	TIC4 = IEOR ( TIC4, TIC3)
	TIC3 = IEOR ( TIC3, TIC2)
	TIC2 = IAND ( TIC2, '0000007F'X)
	TIC3 = IAND ( TIC3, '0000007F'X)
	TIC4 = IAND ( TIC4, '0000007F'X)
C
	HTIC = IAND ( HTIC, '0000FF80'X)    !HTIC=0000 0000
	LTIC = IAND ( LTIC, '00008080'X)    !LTIC=i000 0000 q000 0000
	LTIC = LTIC + TIC4
	TIC3 = ISHFT( TIC3, 8)
	LTIC = LTIC + TIC3
	HTIC = HTIC + TIC2
C
C Now subtract CDCL and CDCH from LTIC, HTIC with carry
C
	LTIC = LTIC - CDCL
	IF(LTIC.LT.0) HTIC = HTIC - 1
	HTIC = HTIC - CDCH
	IF(HTIC.LT.0) HTIC = HTIC + 128
C
	LTIC = IAND ( LTIC, '0000FFFF'X)
C
C Get the 24th bit from the original serial # and put into result
C
	X    = ISHFT( XEXTSER, -16)
	X    = IAND ( X, '00000080'X)
	HTIC = IOR  ( HTIC, X)
C
C Put in high 3 bits of check digit
C
	X   = CHKDIG - SYSIDX              !(SUBTRACT OUT SITE CODE)
	X    = IAND ( X, '00000007'X)       !3 BITS ONLY
	X    = ISHFT( X, 8)
	HTIC = IOR  ( HTIC, X)
C
C Set internal serial #
C
	XINTSER = ISHFT(HTIC, 16) + LTIC
C
C
C Compare check digits
C
	CALL GENCHK(XCDC, XINTSER, XEXTSER, CHKDIG, SYSIDX)
	IF(CHKDIG.EQ.XCHKDIG)THEN
	  INPVER = 0
	ELSE
	  INPVER = 15		    !FOR COMPATABILITY
	ENDIF
C
	RETURN
	END
C
C SUBROUTINE OUTGEN
C $Log:   GXAFXT:[GOLS]OUTGEN.FOV  $
C
C     Rev 1.0   17 Apr 1996 14:20:30   HXK
C  Release of Finland for X.25, Telephone Betting, Instant Pass Thru Phase 1
C
C     Rev 1.0   21 Jan 1993 17:14:20   DAB
C  Initial Release
C  Based on Netherlands Bible, 12/92, and Comm 1/93 update
C  DEC Baseline
C
C ** Source - nrm_scram.for **
C
C
C
C
C
C *** OUTGEN
C This subroutine will convert from an internal serial number to an external
C serial # and checkdigits
C
C CALLING SEQUENCE:
C        CALL OUTGEN ( CDC, INTSER, EXTSER, CHKDIG)
C
C INPUT:
C	 CDC	    Date of ticket
C	 INTSER	    Internal serial #
C
C OUTPUT:
C	 EXTSER	    External serial #
C	 CHKDIG	    Check digits
C
C SUBROUTINES CALLED:
C        GENKEY,GENCHK
C
C
C	OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE OUTGEN(XCDC, XINTSER, XEXTSER, XCHKDIG)
	IMPLICIT NONE
C
C	INCLUDE 'INCLIB:SYSPARAM.DEF'
C
	INTEGER*4      XCDC       ! INPUT: CDC OF TICKET
	INTEGER*4      XINTSER    !OUTPUT: INTERNAL SRL #
	INTEGER*4      XEXTSER    ! INPUT: EXTERNAL SRL #
	INTEGER*4      XCHKDIG    ! INPUT: CHECK DIGITS OF EXT SRL #
C
	INTEGER*4      CDC,INTSER,CHKDIG !INTERNAL COPIES
C
	INTEGER*4      CDCH      !HIGH PORTION OF CDC
	INTEGER*4      CDCL      ! LOW PORTION OF CDC
C
	INTEGER*4      HINT      !HIGH PORTION OF SERIAL #
	INTEGER*4      LINT      ! LOW PORTION OF SERIAL #
C
	INTEGER*4      SYSIDX    ! SITE VARIANT
C
	INTEGER*4      INT4, INT43, X, LINTCOMP
	PARAMETER (LINTCOMP = '0000FFFF'X)
C
C
C
C
	CDC     = XCDC
	INTSER  = XINTSER
C
C
C
	CALL GENKEY( CDC, CDCH, CDCL, SYSIDX)   !GET CDCH, CDCL
C
	HINT = ISHFT( INTSER, -16)
	HINT = IAND ( HINT, '0000007F'X)
	LINT = IAND ( INTSER, '0000FFFF'X)
	LINT = LINT + CDCL
	IF( LINT.GT. LINTCOMP)THEN        !IF CARRY
	  HINT = HINT + 1
	  LINT = IAND (LINT,'0000FFFF'X)
	ENDIF
	HINT = HINT + CDCH
	HINT = IAND ( HINT, '0000007F'X)
C
	INT4 = IAND ( LINT, '000000FF'X)
	INT43= ISHFT( INT4,8) + ISHFT( LINT, -8)
C
	INT43= IEOR ( INT43, HINT)
	INT4 = IEOR ( INT4,  INT43)
	HINT = IEOR ( HINT,  INT4)
C
	INT4 = ISHFT( INT4, 6)
	HINT = IEOR ( HINT, INT4)
	INT4 = ISHFT( INT4, -1)
	HINT = IEOR ( HINT, INT4)
	INT4 = ISHFT( INT4, -1)
	HINT = IEOR ( HINT, INT4)
	INT4 = ISHFT( INT4, -4)
C
	HINT = IAND ( HINT, '0000007F'X)
	INT43= IAND ( INT43,'0000007F'X)
	INT4 = IAND ( INT4, '0000007F'X)
	LINT = IAND ( LINT, '00008080'X)
	LINT = LINT + INT4
	INT43= ISHFT( INT43,8)
	LINT = LINT + INT43
C
	LINT = IAND ( LINT, '0000FFFF'X)
C
C Get the 24th bit from the original serial # and put into result
C
	X    = ISHFT( XINTSER, -16)
	X    = IAND ( X, '00000080'X)
	HINT = IOR  ( HINT, X)
C
	XEXTSER = ISHFT(HINT,16) + LINT
C
C Set check digits
C
	CALL GENCHK(XCDC, XINTSER, XEXTSER, CHKDIG, SYSIDX)
C
	XCHKDIG = CHKDIG
C
	RETURN
	END

	SUBROUTINE GENCHK ( CDC, INTSER, EXTSER, CHKDIG, SYSIDX)
	IMPLICIT NONE
C
C	INCLUDE 'INCLIB:SYSPARAM.DEF'
C
	INTEGER*4      CDC
	INTEGER*4      INTSER
	INTEGER*4      EXTSER
	INTEGER*4      CHKDIG
	INTEGER*4      SYSIDX
C
C
	INTEGER*4       EVN
	PARAMETER      (EVN = 0)
	INTEGER*4       ODD
	PARAMETER      (ODD = 1)
C
	INTEGER*4      K
C
	INTEGER*4      PARITY(0:255)
	DATA (PARITY(K),K=0,63)/
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !00-07
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !08-0F
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !10-17
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !18-1F
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !20-27
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !28-2F
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !30-37
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN/    !38-3F
	DATA (PARITY(K),K=64,127)/
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !40-47
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !48-4F
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !50-57
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !58-5F
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !60-67
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !68-6F
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !70-77
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD/    !78-7F
	DATA (PARITY(K),K=128,191)/
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !80-87
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !88-8F
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !90-97
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !98-9F
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !A0-A7
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !A8-AF
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !B0-B7
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD/    !B8-BF
	DATA (PARITY(K),K=192,255)/
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !C0-C7
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !C8-CF
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !D0-D7
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !D8-DF
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN,    !E0-E7
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !E8-EF
     *	  EVN,ODD,ODD,EVN,ODD,EVN,EVN,ODD,    !F0-F7
     *	  ODD,EVN,EVN,ODD,EVN,ODD,ODD,EVN/    !F8-FF
C
	INTEGER*4       MASK1
	PARAMETER      (MASK1 = '0000CCCC'X)
	INTEGER*4       MASK2
	PARAMETER      (MASK2 = '00005555'X)
	INTEGER*4       MASK3
	PARAMETER      (MASK3 = '0000AAAA'X)
C
	INTEGER*4      X,CHK,EXT,R5,R6,R7,INTHI
C
C
C
	X   = IAND ( CDC, '00000003'X)      !LOW 2 BITS
	INTHI = ISHFT( INTSER, -24)         !LOW 3 BITS OF HIGH BYTE
	INTHI = IAND ( INTHI, '00000007'X)
	CHK   = ISHFT(X,3) + INTHI
C
C Now get high 3 bits of the check digit
C
	EXT = IAND (EXTSER, '000000FF'X)    !LOW BYTE
	R5  = IAND (EXT, MASK1)
	R6  = IAND (EXT, MASK2)
	R7  = IAND (EXT, MASK3)
	IF( PARITY(R5).EQ.ODD) CHK = IEOR(CHK,'00000080'X)
	IF( PARITY(R6).EQ.ODD) CHK = IEOR(CHK,'00000040'X)
	IF( PARITY(R7).EQ.ODD) CHK = IEOR(CHK,'00000020'X)
C
	EXT = IAND (EXTSER, '0000FF00'X)    !MIDDLE BYTE
	EXT = ISHFT(EXT, -8)
	R5  = IAND (EXT, MASK1)
	R6  = IAND (EXT, MASK2)
	R7  = IAND (EXT, MASK3)
	IF( PARITY(R5).EQ.ODD) CHK = IEOR(CHK,'00000080'X)
	IF( PARITY(R6).EQ.ODD) CHK = IEOR(CHK,'00000040'X)
	IF( PARITY(R7).EQ.ODD) CHK = IEOR(CHK,'00000020'X)
C
	EXT = IAND (EXTSER, '00FF0000'X)    !HIGH BYTE
	EXT = ISHFT(EXT, -16)
	R5  = IAND (EXT, MASK1)
	R6  = IAND (EXT, MASK2)
	R7  = IAND (EXT, MASK3)
	IF( PARITY(R5).EQ.ODD) CHK = IEOR(CHK,'00000080'X)
	IF( PARITY(R6).EQ.ODD) CHK = IEOR(CHK,'00000040'X)
	IF( PARITY(R7).EQ.ODD) CHK = IEOR(CHK,'00000020'X)
C
	EXT = INTHI                         !HI 3 BITS OF INTERNAL
	R5  = IAND (EXT, MASK1)
	R6  = IAND (EXT, MASK2)
	R7  = IAND (EXT, MASK3)
	IF( PARITY(R5).EQ.ODD) CHK = IEOR(CHK,'00000080'X)
	IF( PARITY(R6).EQ.ODD) CHK = IEOR(CHK,'00000040'X)
	IF( PARITY(R7).EQ.ODD) CHK = IEOR(CHK,'00000020'X)
C
C Add in system ID
C
	CHK = CHK + SYSIDX
C
C Now mix up with external serial #
C
	CALL MIXCHK( EXTSER, CHK)
	CHKDIG = CHK
C
	RETURN
	END
	SUBROUTINE GENKEY(CDC, CDCH, CDCL, SYSIDX)
	IMPLICIT NONE
C
C	INCLUDE 'INCLIB:SYSPARAM.DEF'
C
	INTEGER*4  CDC           ! INPUT: CDC DATE
	INTEGER*4  CDCH          !OUTPUT: CDC HIGH KEY
	INTEGER*4  CDCL          !OUTPUT: CDC LOW  KEY
	INTEGER*4  SYSIDX        !OUTPUT: VALUE OF SYSIDC
C
	INTEGER*4  SYSID1        !SITE SPECIFIC KEY 1
	PARAMETER (SYSID1 = 143)
C
	INTEGER*4  SYSID2        !SITE SPECIFIC KEY 2
	PARAMETER (SYSID2 = 914)
C
	INTEGER*4  SYSIDC        !SITE SPECIFIC KEY 3 (0-255)
	PARAMETER (SYSIDC = 25)
C
	CDCL = IOR( CDC, '0000FC00'X) !HIGH 6 BITS
C
	CDCH = CDC
	IF( IAND( CDCL, '01'X).NE.0)THEN      !IF ODD...
	  CDCH = IOR( CDCH, '00000040'X)      !  SET THIS BIT
	ENDIF
C
	CDCL = CDCL + SYSID1
	CDCH = CDCH + SYSID2
	CDCH = IAND( CDCH, '0000007F'X)       !LAST 7 BITS
	CDCL = IAND( CDCL, '0000FFFF'X)       !LAST 16 BITS
C
	SYSIDX = SYSIDC
	RETURN
	END
	SUBROUTINE MIXCHK( EXTSER, CHKDIG )
	IMPLICIT NONE
C
C	INCLUDE 'INCLIB:SYSPARAM.DEF'
C
	INTEGER*4      EXTSER    ! INPUT: EXTERNAL SRL #
	INTEGER*4      CHKDIG    ! INPUT/OUTPUT: CHECKSUM
C
	INTEGER*4      EXT
	INTEGER*4      CHK
C
	INTEGER*4      SITE
	PARAMETER(SITE='13'X)
C
	EXT = EXTSER
	CHK = CHKDIG
C
	CHK = IEOR ( EXT, CHK)
	EXT = ISHFT( EXT, -7)
	CHK = IEOR ( EXT, CHK)
	EXT = ISHFT( EXT, -7)
	CHK = IEOR ( EXT, CHK)
C
	CHK = IEOR ( CHK, SITE )
C
	CHKDIG = IAND ( CHK, '000000FF'X)
C
	RETURN
	END
