C
C SUBROUTINE ODBKKREP
C
C ODBKKREP.FOR
C
C V10 13-OCT-1999 RXK MAXTYP changed to 18.
C V09 14-MAY-1999 UXN Super Triple added.
C V08 23-JAN-1998 UXN Super Score and Todays Triple added.
C V07 12-JAN-1996 HXK Added check for Double / Couple
C V06 23-NOV-1995 PXB Couple and Double games added
C V05 24-APR-1995 HXK Merge of V5 development with March 10th 1995 bible
C V04 02-MAR-1995 HXK Changed commission calculation for V5
C V03 24-AUG-1993 GXA Extended Game Type Prefixes.
C V02 21-JAN-1993 DAB Initial Release
C                     Based on Netherlands Bible, 12/92, and Comm 1/93 update
C                     DEC Baseline
C V01 13-APR-1992 GCAN INITIAL RELEASE FOR THE NETHERLANDS.
C
C SUBROUTINE TO GENERATE BOOK KEEPING REPORTS FOR ALL ODDSET GAMES.
C (TOTO SELECT, WINNERS TIP, SCORE)
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C This item is the property of GTECH Corporation, Providence, Rhode
C Island, and contains confidential and trade secret information. It
C may not be transferred from the custody or control of GTECH except
C as authorized in writing by an officer of GTECH. Neither this item
C nor the information it contains may be used, transferred,
C reproduced, published, or disclosed, in whole or in part, and
C directly or indirectly, except as expressly authorized by an
C officer of GTECH, pursuant to written agreement.
C
C Copyright 1999 GTECH Corporation. All rights reserved.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======OPTIONS /CHECK=NOOVERFLOW
	SUBROUTINE ODBKKREP(GNUM,DRAW,COPY)
	IMPLICIT NONE
C
	INCLUDE 'INCLIB:SYSPARAM.DEF'
	INCLUDE 'INCLIB:SYSEXTRN.DEF'
C
	INCLUDE 'INCLIB:GLOBAL.DEF'
	INCLUDE 'INCLIB:CONCOM.DEF'
	INCLUDE 'INCLIB:DSCREC.DEF'
	INCLUDE 'INCLIB:DWIREC.DEF'
	INCLUDE 'INCLIB:DTSREC.DEF'
	INCLUDE 'INCLIB:DDBREC.DEF'
	INCLUDE 'INCLIB:DCPREC.DEF'
	INCLUDE 'INCLIB:DSSREC.DEF'
	INCLUDE 'INCLIB:DTRREC.DEF'
	INCLUDE 'INCLIB:DSTREC.DEF'
	INCLUDE 'INCLIB:DATBUF.DEF'
	INCLUDE 'INCLIB:GTNAMES.DEF'
C
	INTEGER*4   REV,REPLU,GAMLU                               
	PARAMETER   (REV  =01)		    !Program Revision.
	PARAMETER   (REPLU=07)		    !Report File Logical Unit.          
	PARAMETER   (GAMLU=08)		    !Game File Logical Unit.
C
	INTEGER*2   BEGSAL(LDATE_LEN)	    !Beginning Sales Date. 
	INTEGER*2   ENDSAL(LDATE_LEN)	    !Ending Sales Date.
C
	INTEGER*4   FDB(7)		    !Game File Descriptor Block.
	INTEGER*4   GNUM		    !Game Number.
	INTEGER*4   GTYP		    !Game Type.
	INTEGER*4   GIND		    !Game Index.
	INTEGER*4   DRAW		    !Draw Number to Read from.
	INTEGER*4   ST			    !Subroutine Return Status.
	INTEGER*4   PAGE		    !page Number for report.
	INTEGER*4   COPY		    !Number of Report Copies.
	INTEGER*4   K			    !Loop Variable(s).
	INTEGER*4   TOTSAL		    !Tatal Sales Amount.
	INTEGER*4   NETSAL		    !Net Sales Amount.
	INTEGER*4   REFUND		    !Refund Amount.
	INTEGER*4   NETPOL		    !Net Pool Amount.
	INTEGER*4   TOTWON		    !Total Won Amount.
	INTEGER*4   TOTBRK		    !Total Breakage Amount.
	INTEGER*4   TOTTAX		    !Total Tax Amount.
	INTEGER*4   ERFUND		    !Early Refund Amount.
	INTEGER*4   ROLOVR		    !Rolover Amount (Jackpot).
	INTEGER*4   COMAMT(2)		    !Commission Amount.
	INTEGER*4   TOTCOM(2)		    !Total Commission Amount.
        INTEGER*4   DUMMY
C
	CHARACTER   REPNAM*13		    !Report File Name.
	CHARACTER   HEAD*46		    !Report Header.
	CHARACTER*2   PREFIX(MAXTYP)	    !Game Prefix Names.
C
        DATA        PREFIX/'LO','SC','NB','JO','SK','TU',
     *                     'VO','PI','VX','SP','MV','BI','PP','ST','TR','IN',
     *                     'MY','  '/

	LOGICAL	    ERROR		    !Error condition accured.
C
C CLEAR / SET VARIABLES.
C
	PAGE   = 0
	TOTSAL = 0
	NETSAL = 0
	REFUND = 0
	NETPOL = 0
	TOTWON = 0
	TOTBRK = 0
	TOTTAX = 0
	ERFUND = 0
	COMAMT(1) = 0	
	COMAMT(2) = 0
	TOTCOM(1) = 0
	TOTCOM(2) = 0
C
	ERROR = .FALSE.
C
C GET GAME TYPE AND INDEX
C
	GTYP = GNTTAB(GAMTYP,GNUM)
	GIND = GNTTAB(GAMIDX,GNUM)
	IF(GTYP.LT.1.OR.GTYP.GT.MAXTYP) ERROR = .TRUE.
	IF(GIND.LT.1.OR.GIND.GT.MAXIND) ERROR = .TRUE.
	IF(GNUM.LT.1.OR.GNUM.GT.MAXGAM) ERROR = .TRUE.
	IF(ERROR) THEN
	   WRITE(5,900) IAM(),GNUM,GTYP,GIND
	   RETURN
	ENDIF
C
	WRITE(5,910) IAM(),GTNAMES(GTYP),GIND,DRAW,COPY
C
C OPEN GAME FILES BY GAME TYPE AND READ RECORD DRAW.
C
	CALL OPENW(GAMLU,GFNAMES(1,GNUM),4,0,0,ST)
	IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),1,ST,0)
C
	IF(GTYP.EQ.TSCR) THEN
	   CALL IOINIT(FDB,GAMLU,DSCSEC*256)
	   CALL READW(FDB,DRAW,DSCREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DSCBSD
	   ENDSAL(VCDC) = DSCESD
	   TOTSAL = DSCSAL
	   NETSAL = DSCSAL - DSCREF
	   REFUND = DSCREF
	   NETPOL = NETSAL * CALPER(DSCSPR)
	   NETPOL = NETPOL + DSCPOL(1)
	   TOTWON = DSCWON - DSCREF
	   IF(DSCPOL(1).GT.0) THEN
	      ROLOVR = -DSCPOL(1)
	   ELSE
	      ROLOVR = DSCPOL(2)
	   ENDIF
	   TOTBRK = DSCBRK(2)
	   TOTTAX = DSCTAX
	ELSEIF(GTYP.EQ.TWIT) THEN
	   CALL IOINIT(FDB,GAMLU,DWISEC*256)
	   CALL READW(FDB,DRAW,DWIREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DWIBSD
	   ENDSAL(VCDC) = DWIESD
           TOTSAL = DWISAL
           NETSAL = DWISAL - DWIREF
           REFUND = DWIREF
           NETPOL = NETSAL * CALPER(DWISPR)
           TOTWON = DWIWON - DWIREF
	   IF(DWIPOL(1).GT.0) THEN
	      ROLOVR = -DWIPOL(1)
	   ELSE
	      ROLOVR =  DWIPOL(2)
	   ENDIF
           TOTBRK = DWIBRK(2)
           TOTTAX = DWITAX
	   ERFUND = DWIERF
	ELSEIF(GTYP.EQ.TTSL) THEN
	   CALL IOINIT(FDB,GAMLU,DTSSEC*256)
	   CALL READW(FDB,DRAW,DTSREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DTSBSD
	   ENDSAL(VCDC) = DTSESD
	   TOTSAL = DTSSAL
	   NETSAL = DTSSAL - DTSREF
C***	   NETPOL = NETSAL * CALPER(DTSSPR)
	   REFUND = DTSREF
	   TOTWON = DTSWON - DTSREF
	   TOTTAX = DTSTAX
	ELSE IF(GTYP.EQ.TDBL) THEN
	   CALL IOINIT(FDB,GAMLU,DDBSEC*256)
	   CALL READW(FDB,DRAW,DDBREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DDBBSD
	   ENDSAL(VCDC) = DDBESD
	   TOTSAL = DDBSAL(DOLAMT)
	   NETSAL = DDBSAL(DOLAMT) - DDBREF
	   REFUND = DDBREF
	   NETPOL = NETSAL * CALPER(DDBSPR)
	   NETPOL = NETPOL + DDBPOL(1)
	   TOTWON = DDBWON - DDBREF
	   IF(DDBPOL(1).GT.0) THEN
	      ROLOVR = -DDBPOL(1)
	   ELSE
	      ROLOVR = DDBPOL(2)
	   ENDIF
	   TOTBRK = DDBBRK(2)
	   TOTTAX = DDBTAX
	ELSE IF(GTYP.EQ.TCPL) THEN
	   CALL IOINIT(FDB,GAMLU,DCPSEC*256)
	   CALL READW(FDB,DRAW,DCPREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DCPBSD
	   ENDSAL(VCDC) = DCPESD
	   TOTSAL = DCPSAL(DOLAMT)
	   NETSAL = DCPSAL(DOLAMT) - DCPREF
	   REFUND = DCPREF
	   NETPOL = NETSAL * CALPER(DCPSPR)
	   NETPOL = NETPOL + DCPPOL(1)
	   TOTWON = DCPWON - DCPREF
	   IF(DCPPOL(1).GT.0) THEN
	      ROLOVR = -DCPPOL(1)
	   ELSE
	      ROLOVR = DCPPOL(2)
	   ENDIF
	   TOTBRK = DCPBRK(2)
	   TOTTAX = DCPTAX
	ELSE IF(GTYP.EQ.TSSC) THEN
	   CALL IOINIT(FDB,GAMLU,DSSSEC*256)
	   CALL READW(FDB,DRAW,DSSREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DSSBSD
	   ENDSAL(VCDC) = DSSESD
	   TOTSAL = DSSSAL
	   NETSAL = DSSSAL - DSSREF
	   REFUND = DSSREF
	   NETPOL = NETSAL * CALPER(DSSSPR)
	   NETPOL = NETPOL + DSSPOL(1)
	   TOTWON = DSSWON - DSSREF
	   IF(DSSPOL(1).GT.0) THEN
	      ROLOVR = -DSSPOL(1)
	   ELSE
	      ROLOVR = DSSPOL(2)
	   ENDIF
	   TOTBRK = DSSBRK(2)
	   TOTTAX = DSSTAX
	ELSE IF(GTYP.EQ.TTRP) THEN
	   CALL IOINIT(FDB,GAMLU,DTRSEC*256)
	   CALL READW(FDB,DRAW,DTRREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DTRBSD
	   ENDSAL(VCDC) = DTRESD
	   TOTSAL = DTRSAL(DOLAMT)
	   NETSAL = DTRSAL(DOLAMT) - DTRREF
	   REFUND = DTRREF
	   NETPOL = NETSAL * CALPER(DTRSPR)
	   NETPOL = NETPOL + DTRPOL(1)
	   TOTWON = DTRWON - DTRREF
	   IF(DTRPOL(1).GT.0) THEN
	      ROLOVR = -DTRPOL(1)
	   ELSE
	      ROLOVR = DTRPOL(2)
	   ENDIF
	   TOTBRK = DTRBRK(1)
	   TOTTAX = DTRTAX
	ELSE IF(GTYP.EQ.TSTR) THEN
	   CALL IOINIT(FDB,GAMLU,DSTSEC*256)
	   CALL READW(FDB,DRAW,DSTREC,ST)
	   IF(ST.NE.0) CALL FILERR(GFNAMES(1,GNUM),2,ST,DRAW)
	   BEGSAL(VCDC) = DSTBSD
	   ENDSAL(VCDC) = DSTESD
	   TOTSAL = DSTSAL(DOLAMT)
	   NETSAL = DSTSAL(DOLAMT) - DSTREF
	   REFUND = DSTREF
	   NETPOL = NETSAL * CALPER(DSTSPR)
	   NETPOL = NETPOL + DSTPOL(1)
	   TOTWON = DSTWON - DSTREF
	   IF(DSTPOL(1).GT.0) THEN
	      ROLOVR = -DSTPOL(1)
	   ELSE
	      ROLOVR = DSTPOL(2)
	   ENDIF
	   TOTBRK = DSTBRK(1)
	   TOTTAX = DSTTAX
	ENDIF
	CALL CLOSEFIL(FDB)
C
C GET COMMISSION FOR ALL GAMES
C
        DUMMY = 0
	CALL GETCOM(TOTSAL,TWAG,GNUM,COMAMT,TOTCOM,DUMMY,DUMMY,DUMMY)
C
C GET DATE IN A NICE FORM
C
	CALL LCDATE(BEGSAL)
	CALL LCDATE(ENDSAL)
C
C BUILD REPORT NAME AND HEADER
C
	WRITE(REPNAM,920) PREFIX(GTYP),GIND
	WRITE(HEAD  ,930) (GLNAMES(K,GNUM),K=1,4),DRAW,
     *			  (BEGSAL(K),K=9,11),(ENDSAL(K),K=9,13)
C
C OPEN REPORT FILE
C
	CALL ROPEN(REPNAM,REPLU,ST)
	IF(ST.NE.0) THEN
	   TYPE*,IAM(),REPNAM,' Open error  st> ',ST
	   CLOSE(REPLU)
	   CALL GSTOP(GEXIT_FATAL)
	ENDIF
C
C ENCODE BOOK KEEPING REPORT
C
	CALL TITLE(HEAD,REPNAM,REV,REPLU,PAGE,DAYCDC)
	WRITE(REPLU,940)
	WRITE(REPLU,950)
	WRITE(REPLU,960) CMONY(TOTSAL,12,BETUNIT)
	WRITE(REPLU,970) CMONY(COMAMT,12,BETUNIT)
C
	IF(ERFUND.NE.0) THEN
	   WRITE(REPLU,980) CMONY(REFUND,12,VALUNIT),
     *                      CMONY(ERFUND,12,VALUNIT)
	ELSE
	   WRITE(REPLU,990) CMONY(REFUND,12,VALUNIT)
	ENDIF
C
	IF(GTYP.NE.TTSL) THEN
	   WRITE(REPLU,1000) CMONY(NETPOL,12,BETUNIT)
	ENDIF
C
	WRITE(REPLU,1020) CMONY(TOTWON,12,VALUNIT)
C
	IF(GTYP.EQ.TSCR.OR.GTYP.EQ.TWIT.OR.GTYP.EQ.TDBL.OR.
     *     GTYP.EQ.TCPL.OR.GTYP.EQ.TSSC.OR.GTYP.EQ.TTRP.OR.
     *     GTYP.EQ.TSTR) THEN
	   WRITE(REPLU,1010) CSMONY(ROLOVR,12,BETUNIT)
	   WRITE(REPLU,1030) CSMONY(TOTBRK,12,BETUNIT)
	   IF (GTYP.EQ.TWIT) 
     *		  WRITE(REPLU,9999) CSMONY(DWITPL,12,BETUNIT)
	   IF (GTYP.EQ.TDBL) 
     *		  WRITE(REPLU,9999) CSMONY(DDBTPL,12,BETUNIT)
	   IF (GTYP.EQ.TCPL) 
     *		  WRITE(REPLU,9999) CSMONY(DCPTPL,12,BETUNIT)
	   IF (GTYP.EQ.TSSC) 
     *		  WRITE(REPLU,9999) CSMONY(DSSTPL,12,BETUNIT)
	   IF (GTYP.EQ.TTRP) 
     *		  WRITE(REPLU,9999) CSMONY(DTRTPL,12,BETUNIT)
	   IF (GTYP.EQ.TSTR) 
     *		  WRITE(REPLU,9999) CSMONY(DSTTPL,12,BETUNIT)
	ENDIF
C
	WRITE(REPLU,1040) CMONY(TOTTAX,12,BETUNIT)
C
C SPOOL REPORT TO THE PRINTER
C
	CLOSE(REPLU)
	CALL SPOOL(REPNAM,COPY,ST)
	IF(ST.NE.0) THEN
	   TYPE*,IAM(),'Error while spooling '//REPNAM,' to the printer'
	ENDIF
C
C
C FORMAT STATEMENTS FOR BOOK KEEPING REPORT
C
900	FORMAT(1X,A,'Game identification error Gnum> ',I2,
     *              'Gtyp> ',I2,' Gind> ',I2) 	
910	FORMAT(1X,A,'REPORT GENERATED: Game> ',A8,I1,
     *              ' Draw Number> ',I4.4,' Copies> ',I2.2)
920	FORMAT(A2,I1,'BKKREP.REP')
930	FORMAT(4A4,' DRAW: ',I4.4,' ',3A2,'- ',5A2)
940	FORMAT(55X,'B O O K  K E E P I N G  R E P O R T')
950	FORMAT(132('='))
960	FORMAT(40X,'TOTAL SALES.......................',A12)
970	FORMAT(40X,'SALES COMMISSIION.................',A12)
980	FORMAT(40X,'TOTAL REFUND AMOUNT...............',A12,
     *         10X,'REFUNDS PAYED OUT  ',A12)
990	FORMAT(40X,'TOTAL REFUND AMOUNT...............',A12)
1000	FORMAT(40X,'WINNERS SHARE.....................',A12)
1010	FORMAT(40X,'ROLL OVER AMOUNT..................',A12)
1020	FORMAT(40X,'WINNING AMOUNT....................',A12)
1030	FORMAT(40X,'BREAKAGE AMOUNT...................',A12)
1040	FORMAT(40X,'WINNING TAX AMOUNT................',A12)
9999	FORMAT(40X,'TOTAL POOL (TPL)..................',A12)
	END
